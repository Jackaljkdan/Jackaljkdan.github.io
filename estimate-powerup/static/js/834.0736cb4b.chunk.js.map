{"version":3,"file":"static/js/834.0736cb4b.chunk.js","mappings":"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","sources":["api/estimateApi.ts","utils/truncate.ts","components/WorkButton.tsx","hooks/useCard.ts","hooks/useCurrentWork.ts","hooks/useElapsed.ts","hooks/useMember.ts","hooks/useProvidedTrello.ts","hooks/useTrelloRender.ts","jk/hooks/useInit.ts","jk/noDeps.ts","utils/dateMath.ts","utils/mathParsing.ts","utils/timeParsing.ts","utils/workDelta.ts","utils/workSessionsUtils.ts"],"sourcesContent":["import { Trello } from \"../types/trello\";\n\nexport type UserMinutes = {\n    [key: string]: number,\n}\n\nexport type Estimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: UserMinutes,\n}\n\nexport type SummaryEstimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: number,\n    remainingMinutes: number,\n    deltaMinutes: number,\n}\n\nexport type CurrentWork = {\n    cardId: string,\n    startDate: Date,\n}\n\nexport type WorkSession = {\n    startDate: Date,\n    endDate?: Date,\n    workMinutes: number,\n}\n\nexport async function getMyWorkMinutes(estimate: Estimate, t: Trello.PowerUp.IFrame): Promise<number> {\n    const me = await t.member(\"id\");\n    return estimate.workMinutes[me.id];\n}\n\nexport function getTotalWorkMinutes(estimate: Estimate) {\n    let sum = 0;\n    for (const workerId in estimate.workMinutes)\n        sum += estimate.workMinutes[workerId];\n    return sum;\n}\n\nexport function getRemainingWorkMinutes(estimate: Estimate, dueComplete: boolean, totalWorkMinutes?: number) {\n    if (dueComplete)\n        return 0;\n\n    if (totalWorkMinutes === undefined)\n        totalWorkMinutes = getTotalWorkMinutes(estimate);\n\n    return (estimate.updatedEstimateMinutes || estimate.estimateMinutes) - totalWorkMinutes;\n}\n\nexport function* enumerateWork(estimate: Estimate) {\n    for (const memberId in estimate.workMinutes) {\n        yield {\n            memberId,\n            minutes: estimate.workMinutes[memberId],\n        };\n    }\n}\n\nexport async function getCardEstimate(t: Trello.PowerUp.IFrame, cardId?: string): Promise<Estimate> {\n    const estimate = JSON.parse(await t.get(cardId ?? \"card\", \"shared\", \"estimate\", \"null\")) as Estimate;\n    if (estimate === null) {\n        return {\n            estimateMinutes: 0,\n            updatedEstimateMinutes: 0,\n            workMinutes: {},\n        };\n    }\n    return estimate;\n}\n\nexport async function setCardEstimate(t: Trello.PowerUp.IFrame, estimate: Estimate, cardId?: string) {\n    await t.set(cardId ?? \"card\", \"shared\", \"estimate\", JSON.stringify(estimate));\n    return estimate;\n}\n\nexport async function getAllCardsEstimates(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"id\"];\n\n    const cards: Trello.PowerUp.Card[] = await t.cards(...fields);\n    return await Promise.all(cards.map(card =>\n        getCardEstimate(t, card.id).then(estimate => ({\n            ...estimate,\n            card: card,\n        }))));\n}\n\nexport async function getBoardEstimates(t: Trello.PowerUp.IFrame) {\n    const estimates = await getAllCardsEstimates(t, \"id\", \"dueComplete\");\n\n    const summary: SummaryEstimate = {\n        estimateMinutes: 0,\n        updatedEstimateMinutes: 0,\n        workMinutes: 0,\n        remainingMinutes: 0,\n        deltaMinutes: 0,\n    };\n\n    for (const est of estimates) {\n        summary.estimateMinutes += est.estimateMinutes;\n        summary.updatedEstimateMinutes += (est.updatedEstimateMinutes || est.estimateMinutes);\n\n        const totalWorkMinutes = getTotalWorkMinutes(est);\n        summary.workMinutes += totalWorkMinutes;\n\n        const remaining = getRemainingWorkMinutes(est, est.card.dueComplete);\n        summary.remainingMinutes += remaining > 0 ? remaining : 0;\n\n        if (est.card.dueComplete)\n            summary.deltaMinutes += est.estimateMinutes - totalWorkMinutes;\n    }\n\n    return summary;\n}\n\nexport async function getCurrentWork(t: Trello.PowerUp.IFrame) {\n    // console.log(\"getting current work\");\n\n    const currentWork = JSON.parse(await t.get(\"board\", \"private\", \"work\", \"null\")) as CurrentWork | null;\n\n    if (currentWork !== null)\n        // js parses dates as strings so i have to convert it here\n        currentWork.startDate = new Date(currentWork.startDate);\n\n    return currentWork;\n}\n\nexport async function setCurrentWork(t: Trello.PowerUp.IFrame, currentWork: CurrentWork | null) {\n    // console.log(\"setting current work\");\n    await t.set(\"board\", \"private\", \"work\", JSON.stringify(currentWork ?? null));\n}\n\nexport async function getWorkSessions(t: Trello.PowerUp.IFrame) {\n    const sessions = JSON.parse(await t.get(\"board\", \"private\", \"work_sessions\", \"[]\")) as WorkSession[];\n\n    for (const s of sessions) {\n        s.startDate = new Date(s.startDate);\n        if (s.endDate !== undefined)\n            s.endDate = new Date(s.endDate);\n    }\n\n    return sessions;\n}\n\nexport async function setWorkSessions(t: Trello.PowerUp.IFrame, sessions: WorkSession[]) {\n    await t.set(\"board\", \"private\", \"work_sessions\", JSON.stringify(sessions));\n}\n\nconst maxWorkSessions = 5;\n\nfunction addWorkSession(sessions: WorkSession[]) {\n    if (sessions.length >= maxWorkSessions)\n        sessions.shift();\n\n    const added: WorkSession = {\n        startDate: new Date(),\n        workMinutes: 0,\n    };\n\n    sessions.push(added);\n\n    return added;\n}\n\nexport async function editCurrentWorkSession(t: Trello.PowerUp.IFrame, action: (session: WorkSession) => Promise<WorkSession>) {\n    const sessions = await getWorkSessions(t);\n    let current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        current = addWorkSession(sessions);\n\n    sessions[sessions.length - 1] = await action(current);\n\n    await setWorkSessions(t, sessions);\n}\n\nexport async function getMarginMultiplier(t: Trello.PowerUp.IFrame) {\n    const margin = await t.get(\"board\", \"shared\", \"margin\", 0.2) as number;\n    return margin;\n}\n\nexport async function setMaringMultiplier(t: Trello.PowerUp.IFrame, marginMultiplier: number) {\n    await t.set(\"board\", \"shared\", \"margin\", marginMultiplier);\n}\n","\nexport function truncateString(str: string, maxLength = 10) {\n    if (str.length < maxLength)\n        return str;\n    else\n        return str.substring(0, maxLength - 3) + \"...\";\n}\n","import React from \"react\";\n\nimport \"./WorkButton.scss\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useCardById, useProvidedCard } from \"../hooks/useCard\";\nimport { getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { formatMinutesWithOptions, hoursPerDay } from \"../utils/timeParsing\";\nimport { truncateString } from \"../utils/truncate\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { useMember } from \"../hooks/useMember\";\nimport { addMinutesToDate, getElapsedSeconds } from \"../utils/dateMath\";\nimport { askToCloseOldSessionAndCreateNew, closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { If } from \"../jk/types/jsxControlStatements\";\n\ntype Props = {\n    onEstimateChanged?: () => void;\n}\n\nexport function WorkButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(currentWork.value?.startDate);\n    const providedCard = useProvidedCard(\"id\");\n    const workCard = useCardById(t, currentWork.value?.cardId, \"id\", \"name\");\n    const member = useMember(t, \"id\");\n\n    const isWorking = currentWork.value?.cardId !== undefined && !currentWork.isSaving;\n\n    if (!providedCard && !isWorking)\n        return null;\n\n    return (\n        <button\n            className={`work-button ${!isWorking ? \"mod-primary\" : \"mod-danger\"}`}\n            onClick={async e => {\n                if (member === undefined)\n                    return;\n\n                if (!isWorking && providedCard !== undefined) {\n                    currentWork.set({\n                        cardId: providedCard.id,\n                        startDate: new Date(),\n                    });\n\n                    askToCloseOldSessionAndCreateNew(t, {\n                        hoursPerDay,\n                        mouseEvent: e,\n                    });\n                }\n                else if (isWorking) {\n                    const seconds = Math.round(getElapsedSeconds(currentWork.value!.startDate));\n                    const minutes = seconds / 60;\n\n                    currentWork.set(null);\n\n                    const estimate = await getCardEstimate(t, currentWork.value!.cardId);\n                    await setCardEstimate(\n                        t,\n                        {\n                            ...estimate,\n                            workMinutes: {\n                                ...estimate.workMinutes,\n                                [member.id]: (estimate.workMinutes[member.id] ?? 0) + minutes,\n                            },\n                        },\n                            currentWork.value!.cardId,\n                    );\n\n                    await closeIfOldAndEditCurrentWorkSession(t, {\n                        action: async session => {\n                            if (session.workMinutes === 0)\n                                session.startDate = addMinutesToDate(session.startDate, -minutes);\n                            session.workMinutes += minutes;\n                            return session;\n                        },\n                        hoursPerDay,\n                        mouseEvent: e,\n                    });\n\n                    props.onEstimateChanged?.();\n                }\n            }}\n        >\n            <If condition={currentWork.isSaving}>\n                ...\n            </If>\n            <If condition={!currentWork.isSaving}>\n                {!isWorking ? \"Start work\" : \"End work\"}\n                <If condition={isWorking}>\n                    {\" \" + formatMinutesWithOptions(elapsedWorkMinutes, { zero: \"\" })}\n                </If>\n                <If condition={isWorking && providedCard?.id !== currentWork.value?.cardId}>\n                    {` (on${providedCard ? \" other\" : \"\"} card${workCard === undefined ? \"\" : `: \"${truncateString(workCard.name, 8)}\"`})`}\n                </If>\n            </If>\n        </button>\n    );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Trello } from \"../types/trello\";\n\nimport { noDeps } from \"../jk/noDeps\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRender } from \"./useTrelloRender\";\n\nexport function useCardWithRefresh(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    const refresh = useCallback(\n        async () => {\n            let fetched: Trello.PowerUp.Card;\n\n            try {\n                fetched = await t.card(...fields);\n            }\n            catch (error) {\n                console.warn(\"no card in context\");\n                return;\n            }\n\n            setCard(fetched);\n        },\n        noDeps,\n    );\n\n    useTrelloRender(t, refresh);\n\n    return useMemo(\n        () => ({\n            card,\n            refresh,\n        }),\n        [card],\n    );\n}\n\nexport function useCard(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const { card } = useCardWithRefresh(t, ...fields);\n    return card;\n}\n\nexport function useProvidedCard(...fields: (keyof Trello.PowerUp.Card)[]) {\n    const t = useProvidedTrello();\n    return useCard(t, ...fields);\n}\n\nexport function useCardById(t: Trello.PowerUp.IFrame, cardId: string | undefined, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    useEffect(\n        () => {\n            async function refresh() {\n                if (cardId === undefined)\n                    return;\n\n                const cards = await t.cards(...fields);\n                for (const c of cards) {\n                    if (c.id === cardId) {\n                        setCard(c);\n                        break;\n                    }\n                }\n            }\n            refresh();\n            t.render(refresh);\n        },\n        [cardId],\n    );\n\n    return card;\n}\n","import { useCallback, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { CurrentWork, getCurrentWork, setCurrentWork } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { minutesToMs } from \"../utils/timeParsing\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRenderWithOptions } from \"./useTrelloRender\";\n\nconst queryKey = \"current_work\";\n\nexport function useCurrentWorkQuery(t: Trello.PowerUp.IFrame) {\n    // N.B. la query sembra che non venga cachata, penso che il motivo sia che\n    // ogni volta che viene aperta una scheda viene avviata una nuova\n    // istanza di react\n    return useQuery(\n        queryKey,\n        () => getCurrentWork(t),\n        {\n            staleTime: minutesToMs(2),\n            cacheTime: Infinity,\n            refetchOnMount: false,\n            refetchOnReconnect: false,\n            refetchOnWindowFocus: false,\n        },\n    );\n}\n\nexport function useCurrentWork() {\n    const t = useProvidedTrello();\n    const queryClient = useQueryClient();\n    const query = useCurrentWorkQuery(t);\n    const [isSaving, setIsSaving] = useState(false);\n\n    // console.log(\"query stale: \" + query.isStale);\n\n    useTrelloRenderWithOptions(t, {\n        refresh: query.refetch,\n        callImmediately: false,\n    });\n\n    const set = useCallback(\n        async (updated: CurrentWork | null) => {\n            setIsSaving(true);\n            await setCurrentWork(t, updated);\n            // console.log(\"setting query data\");\n            queryClient.setQueryData(queryKey, updated);\n            setIsSaving(false);\n        },\n        [t, queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            value: query.data,\n            isSaving,\n            set,\n        }),\n        [query.data, isSaving, set],\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport { getElapsedMs } from \"../utils/dateMath\";\n\nexport function useElapsedMinutes(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000 / 60;\n}\n\nexport function useElapsedSeconds(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000;\n}\n\nexport function useElapsedMs(startDate: Date | undefined) {\n    const [ms, setMs] = useState(0);\n\n    useEffect(\n        () => {\n            if (startDate === undefined) {\n                setMs(0);\n                return;\n            }\n\n            let animationFrameId: number;\n            let canceled = false;\n\n            function updateSeconds() {\n                setMs(getElapsedMs(startDate!));\n\n                if (!canceled)\n                    animationFrameId = requestAnimationFrame(updateSeconds);\n            }\n\n            animationFrameId = requestAnimationFrame(updateSeconds);\n\n            return () => {\n                canceled = true;\n                cancelAnimationFrame(animationFrameId);\n            };\n        },\n        [startDate],\n    );\n\n    return ms;\n}\n","import { useEffect, useState } from \"react\";\n\nimport { Trello } from \"../types/trello\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport function useMember(t: Trello.PowerUp.IFrame, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const state = useState<Trello.PowerUp.Member>();\n    const [member, setMember] = state;\n\n    useEffect(\n        () => {\n            const actualFields = fields !== undefined && fields.length > 0\n                ? fields\n                : [\"id\"] as Trello.PowerUp.MemberFields[];\n            t.member(...actualFields).then(res => setMember(res));\n        },\n        [t],\n    );\n\n    return member;\n}\n\nexport function useProvidedMember(...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const t = useProvidedTrello();\n    return useMember(t, ...fields);\n}\n","import { Trello } from \"../types/trello\";\n\nlet t: Trello.PowerUp.IFrame;\n\nexport function useProvidedTrello() {\n    if (t === undefined) {\n        t = window.TrelloPowerUp.iframe({\n            appName: process.env.REACT_APP_POWERUP_NAME,\n            appKey: process.env.REACT_APP_POWERUP_APP_KEY,\n        });\n    }\n\n    return t;\n}\n","import { Trello } from \"../types/trello\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport type TrelloRenderOptions = {\n    refresh: () => void;\n    callImmediately?: boolean;\n}\n\nexport function useTrelloRenderWithOptions(t: Trello.PowerUp.IFrame, options: TrelloRenderOptions) {\n    useInit(() => {\n        if (options.callImmediately)\n            options.refresh();\n        t.render(options.refresh);\n    });\n}\n\nexport function useTrelloRender(t: Trello.PowerUp.IFrame, refresh: () => void) {\n    return useTrelloRenderWithOptions(t, {\n        refresh,\n        callImmediately: true,\n    });\n}\n\nexport function useProvidedTrelloRender(refresh: () => void) {\n    const t = useProvidedTrello();\n    return useTrelloRender(t, refresh);\n}\n","import React, { useEffect } from \"react\";\nimport { noDeps } from \"../noDeps\";\n\nexport function useInit(effect: React.EffectCallback) {\n    return useEffect(effect, noDeps);\n}\n","export const noDeps = [];\n","import { minutesToMs } from \"./timeParsing\";\n\nexport function addMinutesToDate(date: Date, minutes: number) {\n    return new Date(date.getTime() + minutesToMs(minutes));\n}\n\nexport function getElapsedMs(date: Date) {\n    return Date.now() - date.getTime();\n}\n\nexport function getElapsedSeconds(date: Date) {\n    return getElapsedMs(date) / 1000;\n}\n\nexport function getElapsedMinutes(date: Date) {\n    return getElapsedMs(date) / 1000 / 60;\n}\n","\nexport function evaluateMathExpression(expression: string) {\n    if (/^[0-9.()+*-/]+$/.test(expression)) {\n        try {\n            return eval(expression) as number;\n        }\n        catch (error) {\n            return NaN;\n        }\n    }\n    else {\n        return NaN;\n    }\n}\n","import { evaluateMathExpression } from \"./mathParsing\";\n\nexport function parseTimeDelta(timeDeltaString: string) {\n    timeDeltaString = timeDeltaString.replaceAll(\" \", \"\");\n    timeDeltaString = timeDeltaString.replaceAll(\",\", \".\");\n    timeDeltaString = timeDeltaString.toLowerCase();\n\n    if (!/^([^a-z]+[a-z]+)+$/.test(timeDeltaString)) {\n        // console.log(\"desk rejected\");\n        return NaN;\n    }\n\n    let minutes = 0;\n\n    for (const match of timeDeltaString.matchAll(/([^a-z]+)([a-z]+)/g)) {\n        const timeLabel = match[2];\n\n        if (timeLabel.length !== 1)\n            return NaN;\n\n        let multiplier: number;\n\n        if (timeLabel === \"m\")\n            multiplier = 1;\n        else if (timeLabel === \"h\")\n            multiplier = 60;\n        else\n            return NaN;\n\n        const expressionResult = evaluateMathExpression(match[1]);\n\n        if (isNaN(expressionResult))\n            return NaN;\n\n        minutes += multiplier * expressionResult;\n    }\n\n    if (minutes <= 0)\n        return NaN;\n\n    return minutes;\n}\n\nexport const hoursPerDay = 8;\n\nexport type FormatMinutesOptions = {\n    zero: string,\n    negative: string,\n    hoursPerDay: number,\n}\n\nconst defaultOptions: FormatMinutesOptions = {\n    zero: \"none\",\n    negative: \"?\",\n    hoursPerDay: 8,\n};\n\nexport function formatMinutes(minutes: number) {\n    return formatMinutesWithOptions(minutes );\n}\n\nexport function formatMinutesWithOptions(minutes: number, options: Partial<FormatMinutesOptions> = defaultOptions) {\n    if (isNaN(minutes))\n        return \"NaN\";\n\n    if (minutes < 0)\n        return options.negative ?? defaultOptions.negative;\n\n    if (minutes === 0)\n        return options.zero ?? defaultOptions.zero;\n\n    const hoursPerDay = options.hoursPerDay ?? defaultOptions.hoursPerDay;\n\n    let minutesPart = Math.floor(minutes % 60);\n    const flooredHours = Math.floor(minutes / 60);\n    const hoursPart = flooredHours % hoursPerDay;\n    const daysPart = Math.floor(flooredHours / hoursPerDay);\n\n    let secondsPart = 0;\n\n    // show seconds only if minutes < 1\n    if (minutes < 1) {\n        secondsPart = Math.round(minutes * 60);\n        minutesPart = 0;\n    }\n\n    let str = \"\";\n\n    if (daysPart > 0)\n        str += daysPart + \"d\";\n    if (hoursPart > 0)\n        str += hoursPart + \"h\";\n    if (minutesPart > 0)\n        str += minutesPart + \"m\";\n    if (secondsPart > 0)\n        str += secondsPart + \"s\";\n\n    return str;\n}\n\nexport function minutesToMs(minutes: number) {\n    return minutes * 60 * 1000;\n}\n\nexport function hoursToMs(hours: number) {\n    return minutesToMs(hours * 60);\n}\n\nexport function msToMinutes(ms: number) {\n    return (ms / 1000) / 60;\n}\n","import { CurrentWork, Estimate, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { getElapsedMinutes } from \"./dateMath\";\nimport { formatMinutes } from \"./timeParsing\";\n\ntype Args = {\n    estimate: Estimate,\n    totalWorkMinutes?: number,\n    currentWork?: CurrentWork | null | undefined,\n}\n\nexport function getWorkDelta(args: Args) {\n    let totalWorkMinutes = args.totalWorkMinutes ?? getTotalWorkMinutes(args.estimate);\n\n    if (args.currentWork != null)\n        totalWorkMinutes += getElapsedMinutes(args.currentWork.startDate);\n\n    return args.estimate.estimateMinutes - totalWorkMinutes;\n}\n\ntype FormattedArgs = {\n    delta: number,\n    short?: boolean,\n}\n\nexport function formatWorkDelta({ delta, short }: FormattedArgs) {\n    if (delta >= 0) {\n        if (short)\n            return \"S: \" + formatMinutes(delta);\n        else\n            return \"Saved: \" + formatMinutes(delta);\n    }\n    else {\n        if (short)\n            return \"S: -\" + formatMinutes(-delta);\n        else\n            return \"Spent: \" + formatMinutes(-delta);\n    }\n}\n","import { Trello } from \"../types/trello\";\nimport { editCurrentWorkSession, getWorkSessions, setWorkSessions, WorkSession } from \"../api/estimateApi\";\nimport { formatMinutesWithOptions, hoursToMs, msToMinutes } from \"./timeParsing\";\nimport { getElapsedMs } from \"./dateMath\";\n\ntype Options = {\n    hoursPerDay: number,\n    mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n}\n\ntype AskOptions = Options & {\n    action?: () => Promise<void>,\n}\n\ntype EditOptions = Options & {\n    action: (session: WorkSession) => Promise<WorkSession>,\n}\n\nexport async function askToCloseOldSession(t: Trello.PowerUp.IFrame, options: AskOptions): Promise<void> {\n    const sessions = await getWorkSessions(t);\n    const current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        return options.action?.();\n\n    const sessionAgeMs = getElapsedMs(current.startDate);\n\n    if (sessionAgeMs < hoursToMs(options.hoursPerDay * 2))\n        return options.action?.();\n\n    const formattedAge = formatMinutesWithOptions(msToMinutes(sessionAgeMs), {\n        hoursPerDay: 24,\n    });\n\n    return new Promise((resolve, reject) => {\n        t.popup({\n            type: \"confirm\",\n            title: \"Close old session?\",\n            message: `The current session looks old (${formattedAge}), do you want to close it and open a new one to save this work?`,\n            confirmText: \"Yes\",\n            onConfirm: async tp => {\n                current.endDate = new Date();\n                await setWorkSessions(t, sessions);\n                resolve(options.action?.());\n                await tp.closePopup();\n            },\n            cancelText: \"No\",\n            onCancel: tp => {\n                resolve(options.action?.());\n                return tp.closePopup();\n            },\n            mouseEvent: options.mouseEvent.nativeEvent,\n        });\n    });\n}\n\nexport function askToCloseOldSessionAndCreateNew(t: Trello.PowerUp.IFrame, options: AskOptions) {\n    return askToCloseOldSession(t, {\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n        action: async () => {\n            await editCurrentWorkSession(t, async session => session);\n            options.action?.();\n        },\n    });\n}\n\nexport function closeIfOldAndEditCurrentWorkSession(t: Trello.PowerUp.IFrame, options: EditOptions) {\n    return askToCloseOldSession(t, {\n        action: () => editCurrentWorkSession(t, options.action),\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n    });\n}\n"],"names":["enumerateWork","getTotalWorkMinutes","estimate","sum","workerId","workMinutes","getRemainingWorkMinutes","dueComplete","totalWorkMinutes","undefined","updatedEstimateMinutes","estimateMinutes","memberId","minutes","getCardEstimate","t","cardId","JSON","get","parse","setCardEstimate","set","stringify","getAllCardsEstimates","fields","length","cards","Promise","all","map","card","id","then","getBoardEstimates","estimates","summary","remainingMinutes","deltaMinutes","est","remaining","getCurrentWork","currentWork","startDate","Date","setCurrentWork","getWorkSessions","sessions","s","endDate","setWorkSessions","addWorkSession","shift","added","push","editCurrentWorkSession","action","current","getMarginMultiplier","margin","setMaringMultiplier","marginMultiplier","truncateString","str","maxLength","substring","WorkButton","props","useProvidedTrello","useCurrentWork","elapsedWorkMinutes","useElapsedMinutes","value","providedCard","useProvidedCard","workCard","useCardById","member","useMember","isWorking","isSaving","className","onClick","e","askToCloseOldSessionAndCreateNew","hoursPerDay","mouseEvent","seconds","Math","round","getElapsedSeconds","closeIfOldAndEditCurrentWorkSession","session","addMinutesToDate","onEstimateChanged","formatMinutesWithOptions","zero","name","useCardWithRefresh","useState","setCard","refresh","useCallback","fetched","console","warn","noDeps","useTrelloRender","useMemo","useCard","useEffect","c","render","queryKey","queryClient","useQueryClient","query","useQuery","staleTime","minutesToMs","cacheTime","Infinity","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","useCurrentWorkQuery","setIsSaving","useTrelloRenderWithOptions","refetch","callImmediately","updated","setQueryData","data","useElapsedMs","ms","setMs","animationFrameId","canceled","requestAnimationFrame","updateSeconds","getElapsedMs","cancelAnimationFrame","state","setMember","actualFields","res","window","TrelloPowerUp","iframe","appName","process","appKey","options","effect","date","getTime","now","getElapsedMinutes","evaluateMathExpression","expression","test","NaN","eval","error","parseTimeDelta","timeDeltaString","replaceAll","toLowerCase","matchAll","match","timeLabel","multiplier","expressionResult","isNaN","defaultOptions","negative","formatMinutes","minutesPart","floor","flooredHours","hoursPart","daysPart","secondsPart","hoursToMs","hours","msToMinutes","getWorkDelta","args","formatWorkDelta","delta","short","askToCloseOldSession","sessionAgeMs","formattedAge","resolve","reject","popup","type","title","message","confirmText","onConfirm","tp","closePopup","cancelText","onCancel","nativeEvent"],"sourceRoot":""}