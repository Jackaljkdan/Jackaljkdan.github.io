{"version":3,"file":"static/js/914.ec2d2b76.chunk.js","mappings":"gQACO,SAASA,EAAeC,GAA8B,IAAjBC,EAAgB,uDAAJ,GACpD,OAAID,EAAIE,OAASD,EACND,EAEAA,EAAIG,UAAU,EAAGF,EAAY,GAAK,M,oDCc1C,SAASG,EAAWC,GAAe,IAAD,QAC/BC,GAAIC,EAAAA,EAAAA,KACJC,GAAcC,EAAAA,EAAAA,KACdC,GAAqBC,EAAAA,EAAAA,IAAiB,UAACH,EAAYI,aAAb,aAAC,EAAmBC,WAC1DC,GAAeC,EAAAA,EAAAA,IAAgB,MAC/BC,GAAWC,EAAAA,EAAAA,IAAYX,EAAD,UAAIE,EAAYI,aAAhB,aAAI,EAAmBM,OAAQ,KAAM,QAC3DC,GAASC,EAAAA,EAAAA,GAAUd,EAAG,MAEtBe,OAA0CC,KAA9B,UAAAd,EAAYI,aAAZ,eAAmBM,UAAyBV,EAAYe,SAE1E,OAAKT,GAAiBO,GAIlB,iBAAKG,UAAU,sBAAf,WACI,oBACIA,UAAS,sBAAkBH,EAA4B,aAAhB,eACvCI,QAAO,yCAAE,WAAMC,GAAN,4FACUJ,IAAXH,EADC,oDAIAE,QAA8BC,IAAjBR,EAJb,gBAKDN,EAAYmB,IAAI,CACZT,OAAQJ,EAAac,GACrBf,UAAW,IAAIgB,QAGnBC,EAAAA,EAAAA,IAAiCxB,EAAG,CAChCyB,YAAAA,EAAAA,GACAC,WAAYN,IAZf,2BAeIL,EAfJ,wBAgBKY,EAAUC,KAAKC,OAAMC,EAAAA,EAAAA,IAAkB5B,EAAYI,MAAOC,YAC1DwB,EAAUJ,EAAU,GAE1BzB,EAAYmB,IAAI,MAnBf,WAqBsBW,EAAAA,EAAAA,IAAgBhC,EAAGE,EAAYI,MAAOM,QArB5D,eAqBKqB,EArBL,kBAsBKC,EAAAA,EAAAA,IACFlC,GADiB,QAAC,UAGXiC,GAHU,IAIbE,aAAY,kBACLF,EAASE,aADL,cAENtB,EAAOS,IAAK,UAACW,EAASE,YAAYtB,EAAOS,WAA7B,QAAoC,GAAKS,MAG9D7B,EAAYI,MAAOM,QA/BtB,0BAkCKwB,EAAAA,EAAAA,IAAoCpC,EAAG,CACzCqC,OAAO,WAAD,8BAAE,WAAMC,GAAN,6EACwB,IAAxBA,EAAQH,cACRG,EAAQ/B,WAAYgC,EAAAA,EAAAA,IAAiBD,EAAQ/B,WAAYwB,IAC7DO,EAAQH,aAAeJ,EAHnB,kBAIGO,GAJH,2CAAF,mDAAC,GAMPb,YAAAA,EAAAA,GACAC,WAAYN,IA1Cf,QA6CD,UAAArB,EAAMyC,yBAAN,cAAAzC,GA7CC,4CAAF,sDAFX,UAmDmBG,EAAYe,SAnD/B,WAsDoBf,EAAYe,SAtDhC,MAuDUF,EAA2B,WAAf,aACCA,EACV,KAAM0B,EAAAA,EAAAA,IAAyBrC,EAAoB,CAAEsC,KAAM,KAzDxE,KA2DuB3B,IAAyB,OAAZP,QAAY,IAAZA,OAAA,EAAAA,EAAcc,OAAd,UAAqBpB,EAAYI,aAAjC,aAAqB,EAAmBM,QA3D5E,cA4DoBJ,EAAe,SAAW,GA5D9C,qBA4DqEQ,IAAbN,EAAyB,GAAzB,aAAoCjB,EAAeiB,EAASiC,KAAM,GAAlE,KA5DxD,cAgEe5B,GACX,mBACIG,UAAU,qBACVC,QAAS,SAAAC,GAAC,OAAIpB,EAAE4C,MAAM,CAClBC,KAAM,UACNC,MAAO,eACPC,QAAS,wDACTC,YAAa,MACbC,UAAW,SAAAC,GAEP,OADAhD,EAAYmB,IAAI,MACT6B,EAAGC,cAEdC,WAAY,KACZC,SAAU,SAAAH,GAAE,OAAIA,EAAGC,cACnBzB,WAAYN,EAAEkC,eAbtB,eAlER,QAHO,O,oOCtBR,SAASC,EAAyBvD,GACrC,IAAMwD,EAAW,OACXC,GAAcC,EAAAA,EAAAA,kBAEdC,GAAQC,EAAAA,EAAAA,UACVJ,GADkB,uBAElB,yGACuBxD,EAAE6D,KAAK,eAD9B,cACUA,EADV,yBAEWA,EAAKC,aAFhB,2CAIA,CAAEC,UAAW,MAGXC,GAAUC,EAAAA,EAAAA,cACZ,SAACC,GAAD,OAAmBT,EAAYU,aAAaX,EAAUU,KACtD,CAACT,IAGL,OAAOW,EAAAA,EAAAA,UACH,0BAAC,UACMT,GADP,IAEIK,QAAAA,MAEJ,CAACL,EAAOK,IAIT,SAASK,EAAqBrE,GAAqE,IAAD,uBAAvCsE,EAAuC,iCAAvCA,EAAuC,kBACrG,OAAwBC,EAAAA,EAAAA,YAAxB,eAAOV,EAAP,KAAaW,EAAb,KAEMC,GAAUR,EAAAA,EAAAA,cAAW,uBACvB,kHAIwBjE,EAAE6D,KAAF,MAAA7D,EAAUsE,GAJlC,OAIQI,EAJR,8DAOQC,QAAQC,KAAK,sBAPrB,2BAaIJ,EAAQE,GAbZ,yDAeAG,EAAAA,GAKJ,OAFAC,EAAAA,EAAAA,IAAgB9E,EAAGyE,IAEZL,EAAAA,EAAAA,UACH,iBAAO,CACHP,KAAAA,EACAY,QAAAA,EACAD,QAAAA,KAEJ,CAACX,IAIF,SAASkB,EAAQ/E,GAAqE,IAAD,uBAAvCsE,EAAuC,iCAAvCA,EAAuC,kBACxF,MAAiBD,EAAoB,WAApB,GAAqBrE,GAArB,OAA2BsE,IAApCT,EAAR,EAAQA,KACR,OAAOA,EAGJ,SAASpD,IAA0D,IACtE,IAAMT,GAAIC,EAAAA,EAAAA,KAD4D,mBAAvCqE,EAAuC,yBAAvCA,EAAuC,gBAEtE,OAAOS,EAAO,WAAP,GAAQ/E,GAAR,OAAcsE,IAGlB,SAAS3D,EAAYX,EAA0BY,GAAuE,IAAD,uBAAvC0D,EAAuC,iCAAvCA,EAAuC,kBACxH,OAAwBC,EAAAA,EAAAA,YAAxB,eAAOV,EAAP,KAAaW,EAAb,KAsBA,OApBAQ,EAAAA,EAAAA,YACI,WAAO,SACYP,IADb,6EACF,uGACmBzD,IAAXJ,EADR,iEAIwBZ,EAAEiF,MAAF,MAAAjF,EAAWsE,GAJnC,OAIUW,EAJV,iBAKoBA,GALpB,6DAKeC,EALf,SAMc5D,KAAOV,EANrB,wBAOY4D,EAAQU,GAPpB,6NADE,sBAaFT,IACAzE,EAAEmF,OAAOV,KAEb,CAAC7D,IAGEiD,I,qKC3FLL,EAAW,eA+BV,SAASrD,IACZ,IAAMH,GAAIC,EAAAA,EAAAA,KACJwD,GAAcC,EAAAA,EAAAA,kBACdC,EAhCH,SAA6B3D,GAIhC,IAAM2D,GAAQC,EAAAA,EAAAA,UACVJ,GACA,kBAAM4B,EAAAA,EAAAA,IAAepF,KACrB,CACI+D,WAAWsB,EAAAA,EAAAA,IAAY,GACvBC,UAAWC,IACXC,gBAAgB,EAChBC,oBAAoB,EACpBC,sBAAsB,IAc9B,OAVAC,EAAAA,EAAAA,IAA2B3F,EAAG,CAC1ByE,QAASd,EAAMiC,QACfC,iBAAiB,KAGrBC,EAAAA,EAAAA,IAAQ,WACJ,IAAMC,EAAWC,EAAAA,EAAAA,GAA2BrC,EAAMiC,SAClD,OAAO,kBAAMI,EAAAA,EAAAA,IAA4BD,OAGtCpC,EAMOsC,CAAoBjG,GAClC,GAAgCuE,EAAAA,EAAAA,WAAS,GAAzC,eAAOtD,EAAP,KAAiBiF,EAAjB,KAIM7E,GAAM4C,EAAAA,EAAAA,aAAW,yCACnB,WAAOkC,GAAP,6EACID,GAAY,GADhB,UAEUE,EAAAA,EAAAA,IAAepG,EAAGmG,GAF5B,OAII1C,EAAYU,aAAaX,EAAU2C,GACnCD,GAAY,GALhB,2CADmB,sDAQnB,CAAClG,EAAGyD,IAGR,OAAOW,EAAAA,EAAAA,UACH,iBAAO,CACH9D,MAAOqD,EAAMO,KACbjD,SAAAA,EACAI,IAAAA,KAEJ,CAACsC,EAAMO,KAAMjD,EAAUI,M,uFChExB,SAAShB,EAAkBE,GAC9B,OAAO8F,EAAa9F,GAAa,IAAO,GAOrC,SAAS8F,EAAa9F,GACzB,OAAoBgE,EAAAA,EAAAA,UAAS,GAA7B,eAAO+B,EAAP,KAAWC,EAAX,KA6BA,OA3BAvB,EAAAA,EAAAA,YACI,WACI,QAAkBhE,IAAdT,EAAJ,CAKA,IAAIiG,EACAC,GAAW,EAWf,OAFAD,EAAmBE,uBAPnB,SAASC,IACLJ,GAAMK,EAAAA,EAAAA,IAAarG,IAEdkG,IACDD,EAAmBE,sBAAsBC,OAK1C,WACHF,GAAW,EACXI,qBAAqBL,IAlBrBD,EAAM,KAqBd,CAAChG,IAGE+F,I,sFCpCJ,SAASxF,EAAUd,GAA+E,IAAD,uBAAjDsE,EAAiD,iCAAjDA,EAAiD,kBACpG,IAAMwC,GAAQvC,EAAAA,EAAAA,YACd,UAA4BuC,EAA5B,GAAOjG,EAAP,KAAekG,EAAf,KAYA,OAVA/B,EAAAA,EAAAA,YACI,WACI,IAAMgC,OAA0BhG,IAAXsD,GAAwBA,EAAO1E,OAAS,EACvD0E,EACA,CAAC,MACPtE,EAAEa,OAAF,MAAAb,GAAC,OAAWgH,IAAcC,MAAK,SAAAC,GAAG,OAAIH,EAAUG,QAEpD,CAAClH,IAGEa,I,oBCjBX,IAAIb,EAEG,SAASC,IAQZ,YAPUe,IAANhB,IACAA,EAAImH,OAAOC,cAAcC,OAAO,CAC5BC,QAASC,WACTC,OAAQD,sCAITvH,E,6HCHJ,SAAS2F,EAA2B3F,EAA0ByH,IACjE3B,EAAAA,EAAAA,IAAQ,WACA2B,EAAQ5B,iBACR4B,EAAQhD,UACZzE,EAAEmF,OAAOsC,EAAQhD,YAIlB,SAASK,EAAgB9E,EAA0ByE,GACtD,OAAOkB,EAA2B3F,EAAG,CACjCyE,QAAAA,EACAoB,iBAAiB,M,6ECjBlB,SAASC,EAAQ4B,GACpB,OAAO1C,EAAAA,EAAAA,WAAU0C,EAAQ7C,EAAAA,K,qDCJtB,IAAMA,EAAS,I,mNCAL8C,GAAV,SAAUA,EAAiBC,GAA3B,gGACeA,GADf,6CAEC,OADOC,EADR,oBAEOA,EAFP,6DCIP,IAAMC,EAAU,2BAEVC,EAASR,mCAiCR,SAASS,EAAiBC,EAAerH,EAAgB0D,GAC5D,IC/ByB4D,ED+BnBvE,GAAK,kBACJW,GADI,IAEPuD,IAAKE,EACLE,MAAOA,IAGLE,EAAcC,MAAMC,KAAKV,EAAchE,IAAQ,SAAAkE,GAAG,OAAIA,EAAM,IAAMlE,EAAMkE,MAAMS,KAAK,KAEzF,OCvCyBJ,EDuCa,CAClCK,IAAKT,EAAO,iBAAalH,EAAb,YAAuBuH,GACnCK,OAAQ,OCxCLC,MAAMP,EAAQK,KAAT,QAAC,UACNL,GADK,IAERQ,SAAQ,QACJC,OAAQ,oBADL,OAEAT,QAFA,IAEAA,OAFA,EAEAA,EAASQ,YAGfzB,MAAK,SAAA2B,GACF,OAAOA,EAASC,OAAO5B,MAAK,SAAA4B,GACxB,IAAMC,EAAeF,EAGrB,OAFAE,EAAa5E,KAAO2E,EACpBC,EAAaZ,QAAUA,EAChBY,Q,aCXhB,SAASC,EAAmBhJ,GAC/B,IAAMC,GAAIC,EAAAA,EAAAA,KACJ4D,GAAOkB,EAAAA,EAAAA,IAAQ/E,EAAG,KAAM,OACxBgJ,GAAmBzF,EAAAA,EAAAA,IAAyBvD,GAElD,OACI,oBACIkB,UAAS,wBAAmBnB,EAAMmB,WAClCC,QAAS,gBACQH,IAAT6C,GFZb,SAA8B7D,GAAgF,IAAtDiJ,EAAqD,uDAAd,aAClG,OAAOjJ,EAAEkJ,aACJC,eACAlC,MAAK,SAAAmC,GACF,IAAIA,EAGA,MAAM,IAAIC,MAAM,mBAEvBC,OAAM,WACH,OAAOtJ,EAAEkJ,aAAaK,UAAU,CAC5BN,MAAAA,OAGPhC,MAAK,WACF,OAAOjH,EAAEkJ,aAAaM,cEAlBC,CAAqBzJ,GAChBiH,MAAK,SAAAgB,GAAK,OAAID,EAAiBC,EAAOpE,EAAKvC,GAAI,CAC5CoI,IAAKV,EAAiB9E,KAChB,KACAL,EAAK6F,IACD7F,EAAK6F,KACL,IAAInI,MAAOoI,cACrB7F,aAAckF,EAAiB9E,UAElC+C,MAAK,SAAA2B,GACEA,EAASgB,IACTZ,EAAiBhF,QAAQ4E,EAAS1E,KAAKJ,gBAE9CwF,OAAM,SAAAO,GACHlF,QAAQmF,MAAMD,OApB9B,eAwB6C7I,IAA1BgI,EAAiB9E,KAxBpC,uBA2B6ClD,IAA1BgI,EAAiB9E,KA3BpC,CA4BuB8E,EAAiB9E,KA5BxC,uBA+BwB8E,EAAiB9E,KA/BzC,8B,cCPD,SAAS6F,EAAmBhK,GAAe,IAAD,EACvCC,GAAIC,EAAAA,EAAAA,KACJC,GAAcC,EAAAA,EAAAA,KACd0D,GAAOkB,EAAAA,EAAAA,IAAQ/E,EAAG,MAExB,YAAkCgB,KAA9B,UAAAd,EAAYI,aAAZ,eAAmBM,cAGVI,IAAT6C,GAAsB3D,EAAYI,MAAMM,SAAWiD,EAAKvC,GAFjD,MAMP,mBACIJ,UAAS,oBAAenB,EAAMmB,WAC9BC,QAAS,kBAAMnB,EAAEgK,SAAS9J,EAAYI,MAAOM,SAFjD,4B,cCJD,SAASqJ,EAAYlK,GAAe,IAAD,QACtC,OACI,iBAAKmB,UAAS,iCAAkBnB,EAAMmB,iBAAxB,QAAqC,IAAnD,WACI,gBAAKA,UAAU,QAAf,SACKnB,EAAMmK,SAEX,mBAAQ/I,QAAS,SAAAC,GAAC,OAAIrB,EAAMsC,OAAOjB,GAAG,SAAC+I,EAAGC,GAAJ,OAAeA,MAArD,mBACKrK,EAAMsK,gBADX,QACuB,SAEvB,mBAAQlJ,QAAS,SAAAC,GAAC,OAAIrB,EAAMsC,OAAOjB,GAAG,SAACkJ,EAAUF,GAAX,OAAsBE,EAAWF,MAAvE,gBAGA,mBAAQjJ,QAAS,SAAAC,GAAC,OAAIrB,EAAMsC,OAAOjB,GAAG,SAACkJ,EAAUF,GAAX,OAAsBE,EAAWF,MAAvE,eAVJ,UAamBrK,EAAMwK,iBAbzB,UAcQ,mBAAQpJ,QAASpB,EAAMyK,YAAvB,mBACKzK,EAAM0K,kBADX,QACyB,UAfjC,Q,cCfKC,EAA4C,CACrDC,aAAa,WAAD,8BAAE,WAAM3K,GAAN,kFAAW4K,QAAX,UAAyBC,EAAAA,EAAAA,IAAiB7K,GAA1C,uGAAF,mDAAC,GACb8K,SAAS,WAAD,8BAAE,WAAM9K,GAAN,+FACuB6K,EAAAA,EAAAA,IAAiB7K,GADxC,cACA+K,EADA,OAEAC,GAA+BC,EAAAA,EAAAA,IAAkBF,GAFjD,gEAGuCG,EAAAA,EAAAA,IAAcF,GAHrD,iDAAF,mDAAC,GAKTG,KAAK,WAAD,8BAAE,WAAMnL,GAAN,+FAC2B6K,EAAAA,EAAAA,IAAiB7K,GAD5C,cACI+K,EADJ,gBAEiB/K,EAAE6D,KAAK,MAFxB,cAEIA,EAFJ,iBAIIuH,EAAAA,EAAAA,IAAuBpL,GAAGiL,EAAAA,EAAAA,IAAkBF,GAAgBlH,EAAKvC,IAJrE,2CAAF,mDAAC,I,oBCLI+J,EAAgC,CACzCV,aAAa,WAAD,8BAAE,WAAM3K,GAAN,iFACJsL,GAAeC,EAAAA,EAAAA,KADX,0CAIC,GAJD,wBAMgBnG,EAAAA,EAAAA,IAAepF,GAN/B,kBAMJE,EANI,kBAQLA,GAAAA,EAAaK,UARR,0CASC,GATD,gCAWH+K,EAAepL,EAAYK,WAXxB,2CAAF,mDAAC,GAabuK,SAAS,WAAD,8BAAE,WAAM9K,GAAN,iGACqBoF,EAAAA,EAAAA,IAAepF,GADpC,cACAE,EADA,OAEAoL,GAAeC,EAAAA,EAAAA,KACfC,GAA0BC,EAAAA,EAAAA,IAAkBvL,EAAYK,UAAW+K,GAHnE,8EAKqDI,EAAAA,EAAAA,GAAWJ,EAAc,uBAL9E,mBAK8GJ,EAAAA,EAAAA,IAAcM,GAL5H,iDAAF,mDAAC,GAOTL,KAAK,WAAD,8BAAE,WAAMnL,GAAN,iGACyBoF,EAAAA,EAAAA,IAAepF,GADxC,cACIE,EADJ,OAEIoL,GAAeC,EAAAA,EAAAA,KACfC,GAA0BC,EAAAA,EAAAA,IAAkBvL,EAAYK,UAAW+K,GAHvE,UAKIF,EAAAA,EAAAA,IAAuBpL,EAAGwL,EAAyBtL,EAAYU,QALnE,wBAOIwF,EAAAA,EAAAA,IAAepG,EAAG,MAPtB,2CAAF,mDAAC,ICfF,SAAS2L,EAAwB5L,GAAe,IAAD,EAC5CC,GAAIC,EAAAA,EAAAA,KADwC,SAGnC2L,EAHmC,kFAGlD,WAA6CC,EAA6CC,GAA1F,sFACeA,EAAanB,aAAa3K,GADzC,8EAII6L,EAJJ,SAKoBC,EAAahB,SAAS9K,GAL1C,iEAMkB,WAAMkD,GAAN,4FACA4I,EAAaX,KAAKnL,GADlB,cAEN,UAAAD,EAAMgM,iBAAN,cAAAhM,GAFM,SAGAmD,EAAGC,aAHH,2CANlB,4DAKQ6I,KALR,KAMQC,SANR,WAIUC,KAJV,4DAHkD,wBAiBlD,OACI,mBACIhL,UAAS,oBAAKnB,EAAMmB,iBAAX,QAAwB,IACjCC,QAAO,yCAAE,WAAMC,GAAN,mFACCyK,EAA8C,GAD/C,SAGCD,EAA8BC,EAAOnB,GAHtC,uBAICkB,EAA8BC,EAAOR,GAJtC,OAMLrL,EAAE4C,MAAM,CACJE,MAAO,iBACP+I,MAAAA,EACAnK,WAAYN,EAAEkC,cATb,2CAAF,sDAFX,oB,gECVD,SAAS6I,EAAYpM,GAAe,IAAD,QAC9BkC,EAAqBlC,EAArBkC,SAAUpB,EAAWd,EAAXc,OAClB,GAAsC0D,EAAAA,EAAAA,WAAS,GAA/C,eAAO6H,EAAP,KAAoBC,EAApB,KACA,GAA8B9H,EAAAA,EAAAA,YAA9B,eAAO+H,EAAP,KAAgBC,EAAhB,KAEMvM,GAAIC,EAAAA,EAAAA,KACJ4D,GAAOkB,EAAAA,EAAAA,IAAQ/E,EAAG,MAElBwM,EAAc,WADKjJ,EAAAA,EAAAA,IAAyBvD,GACVkE,YAApB,SAEdhE,GAAcC,EAAAA,EAAAA,KACdC,GAAqBC,EAAAA,EAAAA,KACvB,UAAAH,EAAYI,aAAZ,eAAmBM,WAAnB,OAA8BiD,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMvC,IAApC,UACMpB,EAAYI,aADlB,aACM,EAAmBC,eACnBS,IAGVgE,EAAAA,EAAAA,YACI,WACSoH,QAA2BpL,IAAZsL,GAGpBtM,EAAEyM,MAAM,WAAWxF,MAAK,SAAAC,GACpB,IAD2B,EACrBwF,EAAqB,GADA,UAEXxF,EAAIoF,SAFO,IAE3B,2BACI,KADOK,EACP,QAAAD,EAAIC,EAAErL,IAAMqL,GAHW,8BAI3BJ,EAAWG,QAGnB,CAACN,EAAaE,IAGlB,IAAMM,GAAYC,EAAAA,EAAAA,IAAoB5K,GAAY7B,EAC5C0M,EAAM,UAAG1M,EAAqB6B,EAASE,YAAYtB,EAAOS,WAApD,QAA4D,EAClEyL,GAAgBC,EAAAA,EAAAA,IAAwB/K,EAAUuK,EAAgBI,GAExE,OACI,iCACI,iBAAK1L,UAAU,aAAf,oBACWgK,EAAAA,EAAAA,IAAc0B,GACpB,IACcE,EAASF,EAH5B,YAIgB1B,EAAAA,EAAAA,IAAc4B,GAJ9B,UAMK,IACcA,EAASF,GACpB,iBACI1L,UAAU,yBACVC,QAAS,kBAAMkL,GAAe,SAAAY,GAAO,OAAKA,MAF9C,qBARR,KAeoBT,EAfpB,MAgBS,MAhBT,gBAgB4BtB,EAAAA,EAAAA,IAAc6B,IAEvBP,EAlBnB,CAmBS,OACAU,EAAAA,EAAAA,GAAgB,CACbC,OAAOC,EAAAA,EAAAA,GAAa,CAChBxM,OAAM,OAAEiD,QAAF,IAAEA,OAAF,EAAEA,EAAMvC,GACdW,SAAAA,EACAoL,iBAAkBT,OAxBlC,QA6BeR,QAA2BpL,IAAZsL,GAC1B,0BACK,QAAIgB,EAAAA,EAAAA,IAAcrL,IACdsL,QAAO,SAAAC,GAAI,OAAIA,EAAKzL,QAAU,KAC9B0L,KAAI,SAAAD,GAAS,IAAD,EACH3M,EAASyL,EAASkB,EAAKE,UAC7B,OACI,4CACK7M,QADL,IACKA,OADL,EACKA,EAAQ8M,gBADb,QACyB,YACpB9M,GAAU,SACCG,IAAXH,EAAA,WAA2BA,EAAO+M,SAAlC,KAAgD,GAChD,MACA1C,EAAAA,EAAAA,IAAcsC,EAAKzL,WALdyL,EAAKE,eArCvC,QCxCD,SAASG,EAAgB9N,GAAe,IAAD,EAClCkC,EAAqBlC,EAArBkC,SAAUpB,EAAWd,EAAXc,OACZb,GAAIC,EAAAA,EAAAA,KAEV,QAAuBe,IAAnBiB,EAAS3B,MACT,OAAQ,yBAAM2B,EAAS6L,WAE3B,IAAMlB,GAAYC,EAAAA,EAAAA,IAAoB5K,EAAS3B,OACzCwM,EAAM,UAAG7K,EAAS3B,MAAM6B,YAAYtB,EAAOS,WAArC,QAA6C,EARf,SAU3ByM,EAV2B,gFAU1C,WAAmCC,GAAnC,8FAIwBA,EAAK3L,SAJ7B,UAIU8K,EAJV,gEAUwBnM,KADdiN,EAAcd,EAAMhL,YAAYtB,EAAQS,KATlD,iDAaItB,EAAE4C,MAAM,CACJC,KAAM,UACNC,MAAO,kBACPC,QAAS,sDACTC,YAAa,MACbC,UAAW,SAAAC,GAEP,OADAA,EAAGC,cACIf,EAAAA,EAAAA,IAAoCpC,EAAG,CAC1CqC,OAAO,WAAD,8BAAE,WAAMC,GAAN,kHACDA,GADC,IAEJH,YAAaG,EAAQH,YAAc8L,KAF/B,2CAAF,mDAAC,GAIPxM,YAAAA,EAAAA,GACAC,WAAYsM,EAAKtM,cAGzB0B,WAAY,KACZC,SAAU,SAAAH,GAAE,OAAIA,EAAGC,cACnBzB,WAAYsM,EAAKtM,WAAW4B,cA/BpC,2CAV0C,wBA6C1C,OACI,SAAC,EAAD,CACI4G,OAAQ,SAACiC,EAAD,CACJlK,SAAUA,EAAS3B,MACnBO,OAAQA,IAEZwB,OAAQ,SAACjB,EAAG8M,GAAJ,OAAuBH,EAAoB,CAC/C1L,OAAQ,kBAAM8L,EAAAA,EAAAA,IAAYnO,EAAGD,EAAMqO,YAAY,SAAAC,GAAa,OACxDpM,EAASZ,KAAI,SAAA4L,GAAO,+BACbA,GADa,IAEhB9K,aAAY,kBACL8K,EAAQ9K,aADJ,cAENtB,EAAQS,GAAK4M,EAAc,UAACjB,EAAQ9K,YAAYtB,EAAQS,WAA7B,QAAoC,EAAG+M,cAG/E3M,WAAYN,KAEhBmJ,UAAWqC,EAAY,EACvBpC,YAAa,SAAApJ,GACTpB,EAAE4C,MAAM,CACJC,KAAM,UACNC,MAAO,SACPC,QAAQ,4CAAD,QAA8CmI,EAAAA,EAAAA,IAAc0B,GAA5D,MACP5J,YAAa,MACbC,UAAU,WAAD,8BAAE,WAAMC,GAAN,sFACD6K,EAAoB,CACtB1L,OAAQ,kBAAMJ,EAASZ,KAAI,SAAA4L,GAAO,yBAC3BA,GAD2B,IAE9B9K,aAAY,kBACL8K,EAAQ9K,aADJ,cAENtB,EAAQS,GAAK,UAGtBI,WAAYN,IATT,uBAWD8B,EAAGC,aAXF,2CAAF,mDAAC,GAaVC,WAAY,KACZC,SAAU,SAAAH,GAAE,OAAIA,EAAGC,cACnBzB,WAAYN,EAAEkC,eAGtBmH,WAAYqC,EAASF,EAAY,kBAAe5L,EAChDqJ,SAAUyC,EAASF,EAAY,gBAAa5L,EAC5CE,UAAWnB,EAAMmB,YC1Fd,SAASoN,IACpB,IAAMtO,GAAIC,EAAAA,EAAAA,KACJgC,ECbH,SAAqBjC,GAA4C,IAAlBuO,IAAiB,yDACnE,GAAgChK,EAAAA,EAAAA,YAAhC,eAAOtC,EAAP,KAAiBuM,EAAjB,KACA,GAAgCjK,EAAAA,EAAAA,UAAS,IAAzC,eAAOuJ,EAAP,KAAiBW,EAAjB,KAEMhK,GAAUL,EAAAA,EAAAA,UACZ,yCAAM,gGACFqK,EAAY,cADV,UAE4BzM,EAAAA,EAAAA,IAAgBhC,GAF5C,OAEI0O,EAFJ,OAGFF,EAAYE,GACZD,EAAY,IAJV,6CAMN5J,EAAAA,GAGExD,GAAM+C,EAAAA,EAAAA,UACR,kBAAM,SAAC/B,GACH,QAAiBrB,IAAbiB,EAAJ,CAGA,IAAMkE,EAAU9D,EAAOJ,GAEjBkL,EAAkB,CACpBwB,gBAAiBxI,EAAQwI,gBAAkB1M,EAAS0M,gBACpDC,uBAAwBzI,EAAQyI,uBAAyB3M,EAAS2M,uBAClEzM,YAAa,IAGjB,IAAK,IAAMuL,KAAYvH,EAAQhE,YAA/B,OACIgL,EAAMhL,YAAYuL,GAAYvH,EAAQhE,YAAYuL,IAApB,UAAiCzL,EAASE,YAAYuL,UAAtD,QAAmE,GAErG,GAAKa,EAKL,OAFAE,EAAY,cAELzM,EAAAA,EAAAA,IAAgBhC,GAClBiH,MAAK,SAAA4H,GACF,IAAMC,EAA0B,CAC5BH,gBAAiBE,EAAeF,gBAAkBxB,EAAMwB,gBACxDC,uBAAwBC,EAAeD,uBAAyBzB,EAAMyB,uBACtEzM,YAAa,IAGjB,IAAK,IAAMuL,KAAYP,EAAMhL,YAA7B,OACI2M,EAAc3M,YAAYuL,IAAY,UAACmB,EAAe1M,YAAYuL,UAA5B,QAAyC,GAAKP,EAAMhL,YAAYuL,GAE1G,OAAOxL,EAAAA,EAAAA,IAAgBlC,EAAG8O,MAE7B7H,MAAK,SAAA6H,GAIF,OAHAN,EAAYM,GACZL,EAAY,UACZM,YAAW,kBAAMN,EAAY,MAAK,KAC3BtB,KAEV7D,OAAM,SAAAO,GACH4E,EAAY,IACZzO,EAAEgP,MAAM,CACJC,QAAS,QACTlM,QAAQ,sBAAD,OAAwB8G,YAI/C,CAAC5H,EAAUsM,IAGf,OAAOnK,EAAAA,EAAAA,UACH,iBAAO,CACH9D,MAAO2B,EACPZ,IAAAA,EACAyM,SAAAA,EACArJ,QAAAA,KAEJ,CAACxC,EAAU6L,ID3DEoB,CAAYlP,GAEvBoO,GAAa7J,EAAAA,EAAAA,UAAiB,IACpC,UAA0C6J,EAA1C,GAAOe,EAAP,KAAsBC,EAAtB,KAEMvO,GAASC,EAAAA,EAAAA,GAAUd,EAAG,MAI5B,IAFA8E,EAAAA,EAAAA,IAAgB9E,EAAGiC,EAASwC,cAELzD,IAAnBiB,EAAS3B,MACT,OAAQ,yBAAM2B,EAAS6L,WAE3B,IAAMuB,EAA+D,IAA1CpN,EAAS3B,MAAMsO,wBACnC3M,EAAS3B,MAAMsO,yBAA2B3M,EAAS3B,MAAMqO,gBAEhE,OACI,4BACI,iBAAKzN,UAAU,oBAAf,WACI,kBACIZ,MAAO6O,EACPG,SAAU,SAAAlO,GAAC,OAAIgO,EAAiBhO,EAAEmO,OAAOjP,QACzCkP,YAAY,8BAEhB,SAAC1P,EAAA,EAAD,CAAY0C,kBAAmBP,EAASwC,WACxC,iBAAKvD,UAAU,YAAf,WACI,SAAC6I,EAAD,KACA,SAAChB,EAAD,KACA,SAAC4C,EAAD,CAAyBI,UAAW9J,EAASwC,iBAGrD,SAAC,EAAD,CACIyF,OAAO,gCACFmF,GAAsB,YADpB,cAEQnE,EAAAA,EAAAA,IAAcjJ,EAAS3B,MAAMqO,iBACzBU,EAHZ,CAIE,MAJF,aAKWnE,EAAAA,EAAAA,IAAcjJ,EAAS3B,MAAMsO,yBALxC,QAQPvM,OAAQ,SAACjB,EAAGqO,GAAJ,OAA2BtB,EAAAA,EAAAA,IAAYnO,EAAGoO,GAAY,SAAAC,GAClB,IAApCpM,EAAS3B,MAAOqO,iBAA0BU,EAO1CrP,EAAE4C,MAAM,CACJC,KAAM,UACNC,MAAO,mBACPC,QAAS,6DACTC,YAAa,SACbC,UAAW,SAAAC,GAQP,OAPAjB,EAASZ,KAAI,SAAA4L,GAAO,yBACbA,GADa,IAEhB2B,uBAAwBa,GACpBC,EAAAA,EAAAA,IAAmBzC,GACnBoB,QAGDnL,EAAGC,cAEdC,WAAY,kBACZC,SAAU,SAAAH,GASN,OARAjB,EAASZ,KAAI,SAAA4L,GAAO,yBACbA,GADa,IAEhB0B,gBAAiBc,GACbC,EAAAA,EAAAA,IAAmBzC,GACnBoB,GAEJO,uBAAwB,OAErB1L,EAAGC,cAEdzB,WAAYN,EAAEkC,cAjClBrB,EAASZ,KAAI,SAAA4L,GAAO,yBACbA,GADa,IAEhB0B,gBAAiBc,EAAmBxC,EAAQ0B,gBAAiBN,YAmCzE7D,YAAa,kBAAMvI,EAASZ,KAAI,SAAA4L,GAAO,yBAChCA,GADgC,IAEnC0B,gBAAiB,EACjBC,uBAAwB,eAGN5N,IAAXH,GACX,SAACgN,EAAD,CACI5L,SAAUA,EACVpB,OAAQA,EACRuN,WAAYA,EACZlN,UAAU,SAzEtB,KA4EmB0J,QAAQ3I,EAAS6L,WAC5B,yBACK7L,EAAS6L,WA9EtB,U,qBE9BD,SAASpC,EAAWiE,GAAgD,IAApCC,EAAmC,uDAAd,aACxD,OAAOA,EACFC,WAAW,OAAQF,EAAKG,cAAcC,YACtCF,WAAW,MAAOF,EAAKK,WAAa,GAAGD,WAAWE,SAAS,EAAG,MAC9DJ,WAAW,KAAMF,EAAKO,UAAUH,WAAWE,SAAS,EAAG,MACvDJ,WAAW,KAAMF,EAAKQ,WAAWJ,WAAWE,SAAS,EAAG,MACxDJ,WAAW,KAAMF,EAAKS,aAAaL,WAAWE,SAAS,EAAG,MAC1DJ,WAAW,KAAMF,EAAKU,aAAaN,WAAWE,SAAS,EAAG,M,2HCV7DpI,EAAM,gBAEL,SAASyI,IACZnJ,OAAOoJ,iBAAiB,YAAY,SAAAnP,GAChCoP,aAAaC,QAAQ5I,EAAK6I,KAAKC,UAAU,IAAIpP,UAQjD,IAAM+J,EAAeC,IACrB5G,QAAQiM,IAAI/I,EAAM,MAAQyD,GAAeI,EAAAA,EAAAA,GAAWJ,EAAc,uBAAyB,SAGxF,SAASC,IACZ,IAAMsF,EAAQH,KAAKI,MAAMN,aAAaO,QAAQlJ,IAE9C,OAAIgJ,EACO,IAAItP,KAAKsP,GAEb,O,oICNJ,SAAeG,EAAtB,iDAAO,OAAP,0BAAO,WAAoChR,EAA0ByH,GAA9D,uGACoBwJ,EAAAA,EAAAA,IAAgBjR,GADpC,UACGkR,EADH,YAIalQ,KAFViM,EAAUiE,EAASA,EAAStR,OAAS,UAEMoB,IAApBiM,EAAQkE,QAJlC,mDAKQ1J,EAAQpF,cALhB,aAKQ,OAAAoF,IALR,aAOG2J,GAAexK,EAAAA,EAAAA,IAAaqG,EAAQ1M,aAEvB8Q,EAAAA,EAAAA,IAAgC,EAAtB5J,EAAQhG,cATlC,mDAUQgG,EAAQpF,cAVhB,aAUQ,OAAAoF,IAVR,cAYG6J,GAAe7O,EAAAA,EAAAA,KAAyB8O,EAAAA,EAAAA,IAAYH,GAAe,CACrE3P,YAAa,KAbd,kBAgBI,IAAI+P,SAAQ,SAACC,EAASC,GACzB1R,EAAE4C,MAAM,CACJC,KAAM,UACNC,MAAO,qBACPC,QAAQ,kCAAD,OAAoCuO,EAApC,oEACPtO,YAAa,MACbC,UAAU,WAAD,8BAAE,WAAMC,GAAN,mFACP+J,EAAQkE,QAAU,IAAI5P,KADf,UAEDoQ,EAAAA,EAAAA,IAAgB3R,EAAGkR,GAFlB,cAGPO,EAAO,UAAChK,EAAQpF,cAAT,aAAC,OAAAoF,IAHD,SAIDvE,EAAGC,aAJF,2CAAF,mDAAC,GAMVC,WAAY,KACZC,SAAU,SAAAH,GAAO,IAAD,EAEZ,OADAuO,EAAO,UAAChK,EAAQpF,cAAT,aAAC,OAAAoF,IACDvE,EAAGC,cAEdzB,WAAY+F,EAAQ/F,WAAW4B,kBAjCpC,oEAsCA,SAAS9B,EAAiCxB,EAA0ByH,GACvE,OAAOuJ,EAAqBhR,EAAG,CAC3ByB,YAAagG,EAAQhG,YACrBC,WAAY+F,EAAQ/F,WACpBW,OAAO,WAAD,8BAAE,0GAEEuP,EAAAA,EAAAA,IAAuB5R,EAAD,yCAAI,WAAMsC,GAAN,+FAAiBA,GAAjB,2CAAJ,uDAFxB,OAIJ,UAAAmF,EAAQpF,cAAR,cAAAoF,GAJI,2CAAF,kDAAC,KASR,SAASrF,EAAoCpC,EAA0ByH,GAC1E,OAAOuJ,EAAqBhR,EAAG,CAC3BqC,OAAQ,kBAAMuP,EAAAA,EAAAA,IAAuB5R,EAAGyH,EAAQpF,SAChDZ,YAAagG,EAAQhG,YACrBC,WAAY+F,EAAQ/F","sources":["utils/truncate.ts","components/WorkButton.tsx","hooks/useCard.ts","hooks/useCurrentWork.ts","hooks/useElapsed.ts","hooks/useMember.ts","hooks/useProvidedTrello.ts","hooks/useTrelloRender.ts","jk/hooks/useInit.ts","jk/noDeps.ts","utils/object.ts","utils/trelloRest.ts","utils/fetch.ts","components/CompleteCardButton.tsx","components/OpenWorkCardButton.tsx","components/TimeButtons.tsx","card_functions/addTimeSinceLastInputAsWork.ts","card_functions/forgotToEndWork.ts","components/MoreCardFunctionsButton.tsx","components/WorkDetails.tsx","components/WorkTimeButtons.tsx","pages/CardBackSectionPage.tsx","hooks/useEstimate.ts","utils/dateFormatting.ts","utils/exitTime.ts","utils/workSessionsUtils.ts"],"sourcesContent":["\nexport function truncateString(str: string, maxLength = 10) {\n    if (str.length < maxLength)\n        return str;\n    else\n        return str.substring(0, maxLength - 3) + \"...\";\n}\n","import React from \"react\";\n\nimport \"./WorkButton.scss\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useCardById, useProvidedCard } from \"../hooks/useCard\";\nimport { getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { formatMinutesWithOptions, hoursPerDay } from \"../utils/timeParsing\";\nimport { truncateString } from \"../utils/truncate\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { useMember } from \"../hooks/useMember\";\nimport { addMinutesToDate, getElapsedSeconds } from \"../utils/dateMath\";\nimport { askToCloseOldSessionAndCreateNew, closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { If } from \"../jk/types/jsxControlStatements\";\n\ntype Props = {\n    onEstimateChanged?: () => void;\n}\n\nexport function WorkButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(currentWork.value?.startDate);\n    const providedCard = useProvidedCard(\"id\");\n    const workCard = useCardById(t, currentWork.value?.cardId, \"id\", \"name\");\n    const member = useMember(t, \"id\");\n\n    const isWorking = currentWork.value?.cardId !== undefined && !currentWork.isSaving;\n\n    if (!providedCard && !isWorking)\n        return null;\n\n    return (\n        <div className=\"work-button-wrapper\">\n            <button\n                className={`work-button ${!isWorking ? \"mod-primary\" : \"mod-danger\"}`}\n                onClick={async e => {\n                    if (member === undefined)\n                        return;\n\n                    if (!isWorking && providedCard !== undefined) {\n                        currentWork.set({\n                            cardId: providedCard.id,\n                            startDate: new Date(),\n                        });\n\n                        askToCloseOldSessionAndCreateNew(t, {\n                            hoursPerDay,\n                            mouseEvent: e,\n                        });\n                    }\n                    else if (isWorking) {\n                        const seconds = Math.round(getElapsedSeconds(currentWork.value!.startDate));\n                        const minutes = seconds / 60;\n\n                        currentWork.set(null);\n\n                        const estimate = await getCardEstimate(t, currentWork.value!.cardId);\n                        await setCardEstimate(\n                            t,\n                            {\n                                ...estimate,\n                                workMinutes: {\n                                    ...estimate.workMinutes,\n                                    [member.id]: (estimate.workMinutes[member.id] ?? 0) + minutes,\n                                },\n                            },\n                            currentWork.value!.cardId,\n                        );\n\n                        await closeIfOldAndEditCurrentWorkSession(t, {\n                            action: async session => {\n                                if (session.workMinutes === 0)\n                                    session.startDate = addMinutesToDate(session.startDate, -minutes);\n                                session.workMinutes += minutes;\n                                return session;\n                            },\n                            hoursPerDay,\n                            mouseEvent: e,\n                        });\n\n                        props.onEstimateChanged?.();\n                    }\n                }}\n            >\n                <If condition={currentWork.isSaving}>\n                ...\n                </If>\n                <If condition={!currentWork.isSaving}>\n                    {!isWorking ? \"Start work\" : \"End work\"}\n                    <If condition={isWorking}>\n                        {\" \" + formatMinutesWithOptions(elapsedWorkMinutes, { zero: \"\" })}\n                    </If>\n                    <If condition={isWorking && providedCard?.id !== currentWork.value?.cardId}>\n                        {` (on${providedCard ? \" other\" : \"\"} card${workCard === undefined ? \"\" : `: \"${truncateString(workCard.name, 8)}\"`})`}\n                    </If>\n                </If>\n            </button>\n            <If condition={isWorking}>\n                <button\n                    className=\"cancel-work-button\"\n                    onClick={e => t.popup({\n                        type: \"confirm\",\n                        title: \"Cancel work?\",\n                        message: \"Are you sure you want to cancel the work in progress?\",\n                        confirmText: \"Yes\",\n                        onConfirm: tp => {\n                            currentWork.set(null);\n                            return tp.closePopup();\n                        },\n                        cancelText: \"No\",\n                        onCancel: tp => tp.closePopup(),\n                        mouseEvent: e.nativeEvent,\n                    })}\n                >\n                    X\n                </button>\n            </If>\n        </div>\n    );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRender } from \"./useTrelloRender\";\n\nexport function useCardDueCompletedQuery(t: Trello.PowerUp.IFrame) {\n    const queryKey = \"card\";\n    const queryClient = useQueryClient();\n\n    const query = useQuery(\n        queryKey,\n        async () => {\n            const card = await t.card(\"dueComplete\");\n            return card.dueComplete;\n        },\n        { staleTime: 1000 },\n    );\n\n    const setData = useCallback(\n        (data: boolean) => queryClient.setQueryData(queryKey, data),\n        [queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            ...query,\n            setData,\n        }),\n        [query, setData],\n    );\n}\n\nexport function useCardWithFunctions(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    const refresh = useCallback(\n        async () => {\n            let fetched: Trello.PowerUp.Card;\n\n            try {\n                fetched = await t.card(...fields);\n            }\n            catch (error) {\n                console.warn(\"no card in context\");\n                return;\n            }\n\n            // console.log(\"refreshed card complete\", fetched.dueComplete);\n\n            setCard(fetched);\n        },\n        noDeps,\n    );\n\n    useTrelloRender(t, refresh);\n\n    return useMemo(\n        () => ({\n            card,\n            refresh,\n            setCard,\n        }),\n        [card],\n    );\n}\n\nexport function useCard(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const { card } = useCardWithFunctions(t, ...fields);\n    return card;\n}\n\nexport function useProvidedCard(...fields: (keyof Trello.PowerUp.Card)[]) {\n    const t = useProvidedTrello();\n    return useCard(t, ...fields);\n}\n\nexport function useCardById(t: Trello.PowerUp.IFrame, cardId: string | undefined, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    useEffect(\n        () => {\n            async function refresh() {\n                if (cardId === undefined)\n                    return;\n\n                const cards = await t.cards(...fields);\n                for (const c of cards) {\n                    if (c.id === cardId) {\n                        setCard(c);\n                        break;\n                    }\n                }\n            }\n            refresh();\n            t.render(refresh);\n        },\n        [cardId],\n    );\n\n    return card;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { CurrentWork, getCurrentWork, setCurrentWork } from \"../api/estimateApi\";\nimport { currentWorkChangedEvent } from \"../api/events/apiEvents\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { Trello } from \"../types/trello\";\nimport { minutesToMs } from \"../utils/timeParsing\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRenderWithOptions } from \"./useTrelloRender\";\n\nconst queryKey = \"current_work\";\n\nexport function useCurrentWorkQuery(t: Trello.PowerUp.IFrame) {\n    // N.B. la query sembra che non venga cachata, penso che il motivo sia che\n    // ogni volta che viene aperta una scheda viene avviata una nuova\n    // istanza di react\n    const query = useQuery(\n        queryKey,\n        () => getCurrentWork(t),\n        {\n            staleTime: minutesToMs(2),\n            cacheTime: Infinity,\n            refetchOnMount: false,\n            refetchOnReconnect: false,\n            refetchOnWindowFocus: false,\n        },\n    );\n\n    useTrelloRenderWithOptions(t, {\n        refresh: query.refetch,\n        callImmediately: false,\n    });\n\n    useInit(() => {\n        const listener = currentWorkChangedEvent.on(query.refetch as any);\n        return () => currentWorkChangedEvent.off(listener) as any;\n    });\n\n    return query;\n}\n\nexport function useCurrentWork() {\n    const t = useProvidedTrello();\n    const queryClient = useQueryClient();\n    const query = useCurrentWorkQuery(t);\n    const [isSaving, setIsSaving] = useState(false);\n\n    // console.log(\"query stale: \" + query.isStale);\n\n    const set = useCallback(\n        async (updated: CurrentWork | null) => {\n            setIsSaving(true);\n            await setCurrentWork(t, updated);\n            // console.log(\"setting query data\");\n            queryClient.setQueryData(queryKey, updated);\n            setIsSaving(false);\n        },\n        [t, queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            value: query.data,\n            isSaving,\n            set,\n        }),\n        [query.data, isSaving, set],\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport { getElapsedMs } from \"../utils/dateMath\";\n\nexport function useElapsedMinutes(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000 / 60;\n}\n\nexport function useElapsedSeconds(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000;\n}\n\nexport function useElapsedMs(startDate: Date | undefined) {\n    const [ms, setMs] = useState(0);\n\n    useEffect(\n        () => {\n            if (startDate === undefined) {\n                setMs(0);\n                return;\n            }\n\n            let animationFrameId: number;\n            let canceled = false;\n\n            function updateSeconds() {\n                setMs(getElapsedMs(startDate!));\n\n                if (!canceled)\n                    animationFrameId = requestAnimationFrame(updateSeconds);\n            }\n\n            animationFrameId = requestAnimationFrame(updateSeconds);\n\n            return () => {\n                canceled = true;\n                cancelAnimationFrame(animationFrameId);\n            };\n        },\n        [startDate],\n    );\n\n    return ms;\n}\n","import { useEffect, useState } from \"react\";\n\nimport { Trello } from \"../types/trello\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport function useMember(t: Trello.PowerUp.IFrame, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const state = useState<Trello.PowerUp.Member>();\n    const [member, setMember] = state;\n\n    useEffect(\n        () => {\n            const actualFields = fields !== undefined && fields.length > 0\n                ? fields\n                : [\"id\"] as Trello.PowerUp.MemberFields[];\n            t.member(...actualFields).then(res => setMember(res));\n        },\n        [t],\n    );\n\n    return member;\n}\n\nexport function useProvidedMember(...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const t = useProvidedTrello();\n    return useMember(t, ...fields);\n}\n","import { Trello } from \"../types/trello\";\n\nlet t: Trello.PowerUp.IFrame;\n\nexport function useProvidedTrello() {\n    if (t === undefined) {\n        t = window.TrelloPowerUp.iframe({\n            appName: process.env.REACT_APP_POWERUP_NAME,\n            appKey: process.env.REACT_APP_POWERUP_APP_KEY,\n        });\n    }\n\n    return t;\n}\n","import { Trello } from \"../types/trello\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport type TrelloRenderOptions = {\n    refresh: () => void;\n    callImmediately?: boolean;\n}\n\nexport function useTrelloRenderWithOptions(t: Trello.PowerUp.IFrame, options: TrelloRenderOptions) {\n    useInit(() => {\n        if (options.callImmediately)\n            options.refresh();\n        t.render(options.refresh);\n    });\n}\n\nexport function useTrelloRender(t: Trello.PowerUp.IFrame, refresh: () => void) {\n    return useTrelloRenderWithOptions(t, {\n        refresh,\n        callImmediately: true,\n    });\n}\n\nexport function useProvidedTrelloRender(refresh: () => void) {\n    const t = useProvidedTrello();\n    return useTrelloRender(t, refresh);\n}\n","import React, { useEffect } from \"react\";\nimport { noDeps } from \"../noDeps\";\n\nexport function useInit(effect: React.EffectCallback) {\n    return useEffect(effect, noDeps);\n}\n","export const noDeps = [];\n","export function* enumerateKeys<T>(object: T): Generator<keyof T> {\n    for (const key in object)\n        yield key;\n}\n","import { Trello } from \"../types/trello\";\nimport { fetchJson } from \"./fetch\";\nimport { enumerateKeys } from \"./object\";\n\nconst baseurl = \"https://api.trello.com/1\";\n\nconst apiKey = process.env.REACT_APP_POWERUP_APP_KEY;\n\nexport function getAuthorizedRestApi(t: Trello.PowerUp.IFrame, scope: Trello.PowerUp.AllPermissions = \"read,write\") {\n    return t.getRestApi()\n        .isAuthorized()\n        .then(authorized => {\n            if (authorized)\n                return;\n            else\n                throw new Error(\"unauthorized\");\n        })\n        .catch(() => {\n            return t.getRestApi().authorize({\n                scope,\n            });\n        })\n        .then(() => {\n            return t.getRestApi().getToken();\n        });\n}\n\nexport function getCardFields(token: string, cardId: string, ...fields: [\"all\"] | (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"all\"];\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?fields=${fields.join(\",\")}&key=${apiKey}&token=${token}`,\n        method: \"GET\",\n    });\n}\n\nexport type EditableCard = Partial<Omit<Trello.PowerUp.Card, \"id\" | \"idShort\" | \"url\">>;\n\nexport function updateCardFields(token: string, cardId: string, fields: EditableCard) {\n    const query = {\n        ...fields,\n        key: apiKey,\n        token: token,\n    };\n\n    const queryString = Array.from(enumerateKeys(query), key => key + \"=\" + query[key]).join(\"&\");\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?${queryString}`,\n        method: \"PUT\",\n    });\n}\n","export type Request = RequestInit & {\n    url: RequestInfo | URL;\n}\n\nexport type JsonResponse<T> = Response & {\n    data: T;\n    request: Request\n}\n\nexport function fetchJson<T>(request: Request): Promise<JsonResponse<T>> {\n    return fetch(request.url, {\n        ...request,\n        headers: {\n            Accept: \"application/json\",\n            ...request?.headers,\n        },\n    })\n        .then(response => {\n            return response.json().then(json => {\n                const jsonResponse = response as JsonResponse<T>;\n                jsonResponse.data = json;\n                jsonResponse.request = request;\n                return jsonResponse;\n            });\n        });\n}\n","import React from \"react\";\n\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { getAuthorizedRestApi, updateCardFields } from \"../utils/trelloRest\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function CompleteCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\", \"due\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n\n    return (\n        <button\n            className={`complete-work ${props.className}`}\n            onClick={() => {\n                if (card === undefined)\n                    return;\n\n                getAuthorizedRestApi(t)\n                    .then(token => updateCardFields(token, card.id, {\n                        due: dueCompleteQuery.data\n                            ? null\n                            : card.due\n                                ? card.due\n                                : new Date().toISOString(),\n                        dueComplete: !dueCompleteQuery.data,\n                    }))\n                    .then(response => {\n                        if (response.ok)\n                            dueCompleteQuery.setData(response.data.dueComplete);\n                    })\n                    .catch(err => {\n                        console.error(err);\n                    });\n            }}\n        >\n            <If condition={dueCompleteQuery.data === undefined}>\n                loading...\n            </If>\n            <If condition={dueCompleteQuery.data !== undefined}>\n                <If condition={dueCompleteQuery.data}>\n                    Uncomplete card\n                </If>\n                <If condition={!dueCompleteQuery.data}>\n                    Complete card\n                </If>\n            </If>\n        </button>\n    );\n}\n","import React from \"react\";\nimport { useCard } from \"../hooks/useCard\";\n\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function OpenWorkCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const card = useCard(t, \"id\");\n\n    if (currentWork.value?.cardId === undefined)\n        return null;\n\n    if (card === undefined || currentWork.value.cardId === card.id)\n        return null;\n\n    return (\n        <button\n            className={`open-work ${props.className}`}\n            onClick={() => t.showCard(currentWork.value!.cardId)}\n        >\n            Open work card\n        </button>\n    );\n}\n","import React from \"react\";\nimport { If } from \"../jk/types/jsxControlStatements\";\n\nimport \"./TimeButtons.scss\";\n\ntype Props = {\n    label: React.ReactNode;\n    action: (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        computeNew: (previous: number, parsed: number) => number\n    ) => void;\n    clearAction: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    setLabel?: string;\n    showClear?: boolean;\n    clearLabel?: string;\n    className?: string;\n}\n\nexport function TimeButtons(props: Props) {\n    return (\n        <div className={`time-buttons ${props.className ?? \"\"}`}>\n            <div className='label'>\n                {props.label}\n            </div>\n            <button onClick={e => props.action(e, (_, parsed) => parsed)}>\n                {props.setLabel ?? \"Set\"}\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous + parsed)}>\n                +\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous - parsed)}>\n                -\n            </button>\n            <If condition={props.showClear ?? true}>\n                <button onClick={props.clearAction}>\n                    {props.clearLabel ?? \"Clear\"}\n                </button>\n            </If>\n        </div>\n    );\n}\n","import { CardFunction } from \"./types\";\r\nimport { getLastInputTime, modMyCardWorkInSession } from \"../api/estimateApi\";\r\nimport { getElapsedMinutes } from \"../utils/dateMath\";\r\nimport { formatMinutes } from \"../utils/timeParsing\";\r\n\r\nexport const addTimeSinceLastInputAsWork: CardFunction = {\r\n    isApplicable: async t => Boolean(await getLastInputTime(t)),\r\n    getTitle: async t => {\r\n        const lastInputTime = (await getLastInputTime(t))!;\r\n        const elapsedMinutesSinceLastInput = getElapsedMinutes(lastInputTime);\r\n        return `Add time since last input as work (${formatMinutes(elapsedMinutesSinceLastInput)})`;\r\n    },\r\n    call: async t => {\r\n        const lastInputTime = (await getLastInputTime(t))!;\r\n        const card = await t.card(\"id\");\r\n\r\n        await modMyCardWorkInSession(t, getElapsedMinutes(lastInputTime), card.id);\r\n    },\r\n};\r\n","import { CardFunction } from \"./types\";\r\nimport { getCurrentWork, setCurrentWork, modMyCardWorkInSession } from \"../api/estimateApi\";\r\nimport { getMinutesBetween } from \"../utils/dateMath\";\r\nimport { formatMinutes } from \"../utils/timeParsing\";\r\nimport { getLastExitTime } from \"../utils/exitTime\";\r\nimport { formatDate } from \"../utils/dateFormatting\";\r\n\r\nexport const forgotToEndWork: CardFunction = {\r\n    isApplicable: async t => {\r\n        const lastExitTime = getLastExitTime();\r\n\r\n        if (!lastExitTime)\r\n            return false;\r\n\r\n        const currentWork = await getCurrentWork(t);\r\n\r\n        if (!currentWork?.startDate)\r\n            return false;\r\n\r\n        return lastExitTime > currentWork.startDate;\r\n    },\r\n    getTitle: async t => {\r\n        const currentWork = (await getCurrentWork(t))!;\r\n        const lastExitTime = getLastExitTime()!;\r\n        const elapsedMinutesUntilExit = getMinutesBetween(currentWork.startDate, lastExitTime);\r\n\r\n        return `I forgot to end work before closing (close time: ${formatDate(lastExitTime, \"yyyy-MM-dd hh:mm:ss\")} work: ${formatMinutes(elapsedMinutesUntilExit)})`;\r\n    },\r\n    call: async t => {\r\n        const currentWork = (await getCurrentWork(t))!;\r\n        const lastExitTime = getLastExitTime()!;\r\n        const elapsedMinutesUntilExit = getMinutesBetween(currentWork.startDate, lastExitTime);\r\n\r\n        await modMyCardWorkInSession(t, elapsedMinutesUntilExit, currentWork.cardId);\r\n\r\n        await setCurrentWork(t, null);\r\n    },\r\n};\r\n","import React from \"react\";\nimport { addTimeSinceLastInputAsWork } from \"../card_functions/addTimeSinceLastInputAsWork\";\nimport { forgotToEndWork } from \"../card_functions/forgotToEndWork\";\nimport { CardFunction } from \"../card_functions/types\";\n\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\n\ntype Props = {\n    className?: string;\n    onRefresh?: () => void;\n}\n\nexport function MoreCardFunctionsButton(props: Props) {\n    const t = useProvidedTrello();\n\n    async function addFunctionButtonIfApplicable(items: Trello.PowerUp.PopupOptions[\"items\"], cardFunction: CardFunction) {\n        if (!await cardFunction.isApplicable(t))\n            return;\n\n        items.push({\n            text: await cardFunction.getTitle(t),\n            callback: async tp => {\n                await cardFunction.call(t);\n                props.onRefresh?.();\n                await tp.closePopup();\n            },\n        });\n    }\n\n    return (\n        <button\n            className={`${props.className ?? \"\"}`}\n            onClick={async e => {\n                const items: Trello.PowerUp.PopupOptions[\"items\"] = [];\n\n                await addFunctionButtonIfApplicable(items, addTimeSinceLastInputAsWork);\n                await addFunctionButtonIfApplicable(items, forgotToEndWork);\n\n                t.popup({\n                    title: \"More functions\",\n                    items,\n                    mouseEvent: e.nativeEvent,\n                });\n            }}\n        >\n            &#8943;\n        </button>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { enumerateWork, Estimate, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { formatWorkDelta, getWorkDelta } from \"../utils/workDelta\";\n\ntype Props = {\n    estimate: Estimate,\n    member: Trello.PowerUp.Member,\n}\n\ntype MembersObject = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function WorkDetails(props: Props) {\n    const { estimate, member } = props;\n    const [showDetails, setShowDetails] = useState(false);\n    const [members, setMembers] = useState<MembersObject>();\n\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n    const isCardComplete = dueCompleteQuery.data ?? false;\n\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(\n        currentWork.value?.cardId === card?.id\n            ? currentWork.value?.startDate\n            : undefined,\n    );\n\n    useEffect(\n        () => {\n            if (!showDetails || members !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MembersObject = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMembers(obj);\n            });\n        },\n        [showDetails, members],\n    );\n\n    const totalWork = getTotalWorkMinutes(estimate) + elapsedWorkMinutes;\n    const myWork = elapsedWorkMinutes + estimate.workMinutes[member.id!] ?? 0;\n    const remainingWork = getRemainingWorkMinutes(estimate, isCardComplete, totalWork);\n\n    return (\n        <>\n            <div className='card-label'>\n                Work: {formatMinutes(totalWork)}\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    (mine: {formatMinutes(myWork)})\n                </If>\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    <span\n                        className='work-details link-like'\n                        onClick={() => setShowDetails(current => !current)}\n                    >\n                        details\n                    </span>\n                </If>\n                <If condition={!isCardComplete}>\n                    {\" | \"} Remaining: {formatMinutes(remainingWork)}\n                </If>\n                <If condition={isCardComplete}>\n                    {\" | \"}\n                    {formatWorkDelta({\n                        delta: getWorkDelta({\n                            cardId: card?.id,\n                            estimate,\n                            totalWorkMinutes: totalWork,\n                        }),\n                    })}\n                </If>\n            </div>\n            <If condition={showDetails && members !== undefined}>\n                <div>\n                    {[...enumerateWork(estimate)]\n                        .filter(item => item.minutes > 0)\n                        .map(item => {\n                            const member = members![item.memberId];\n                            return (\n                                <div key={item.memberId}>\n                                    {member?.fullName ?? \"<missing>\"}\n                                    {member && \" \"}\n                                    {member !== undefined ? `(${member.username})` : \"\"}\n                                    {\": \"}\n                                    {formatMinutes(item.minutes)}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </If>\n        </>\n    );\n}\n","import React from \"react\";\n\nimport { getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { UsedEstimate } from \"../hooks/useEstimate\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { formatMinutes, hoursPerDay, parseAndRun } from \"../utils/timeParsing\";\nimport { closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { TimeButtons } from \"./TimeButtons\";\nimport { WorkDetails } from \"./WorkDetails\";\n\ntype Props = {\n    className?: string;\n    estimate: UsedEstimate,\n    inputState: UsedState<string>,\n    member: Trello.PowerUp.Member,\n}\n\nexport function WorkTimeButtons(props: Props) {\n    const { estimate, member } = props;\n    const t = useProvidedTrello();\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    const totalWork = getTotalWorkMinutes(estimate.value);\n    const myWork = estimate.value.workMinutes[member.id!] ?? 0;\n\n    async function runAndUpdateSession(args: {\n        action: () => ReturnType<typeof estimate.set>,\n        mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    }) {\n        const delta = await args.action();\n\n        if (!delta)\n            return;\n\n        const myWorkDelta = delta.workMinutes[member!.id];\n        if (myWorkDelta === undefined)\n            return;\n\n        t.popup({\n            type: \"confirm\",\n            title: \"Add to session?\",\n            message: \"Should this work change count in your work session?\",\n            confirmText: \"Yes\",\n            onConfirm: tp => {\n                tp.closePopup();\n                return closeIfOldAndEditCurrentWorkSession(t, {\n                    action: async session => ({\n                        ...session,\n                        workMinutes: session.workMinutes + myWorkDelta,\n                    }),\n                    hoursPerDay,\n                    mouseEvent: args.mouseEvent,\n                });\n            },\n            cancelText: \"No\",\n            onCancel: tp => tp.closePopup(),\n            mouseEvent: args.mouseEvent.nativeEvent,\n        });\n    }\n\n    return (\n        <TimeButtons\n            label= {<WorkDetails\n                estimate={estimate.value}\n                member={member!}\n            />}\n            action={(e, computeNewWork) => runAndUpdateSession({\n                action: () => parseAndRun(t, props.inputState, parsedMinutes =>\n                    estimate.set(current => ({\n                        ...current,\n                        workMinutes: {\n                            ...current.workMinutes,\n                            [member!.id]: computeNewWork(current.workMinutes[member!.id] ?? 0, parsedMinutes),\n                        },\n                    }))),\n                mouseEvent: e,\n            })}\n            showClear={totalWork > 0}\n            clearAction={e => {\n                t.popup({\n                    type: \"confirm\",\n                    title: \"Clear?\",\n                    message: `Are you sure you want to clear the work (${formatMinutes(totalWork)})?`,\n                    confirmText: \"Yes\",\n                    onConfirm: async tp => {\n                        await runAndUpdateSession({\n                            action: () => estimate.set(current => ({\n                                ...current,\n                                workMinutes: {\n                                    ...current.workMinutes,\n                                    [member!.id]: 0,\n                                },\n                            })),\n                            mouseEvent: e,\n                        });\n                        await tp.closePopup();\n                    },\n                    cancelText: \"No\",\n                    onCancel: tp => tp.closePopup(),\n                    mouseEvent: e.nativeEvent,\n                });\n            }}\n            clearLabel={myWork < totalWork ? \"Clear mine\" : undefined}\n            setLabel={myWork < totalWork ? \"Set mine\" : undefined}\n            className={props.className}\n        />\n    );\n}\n","import React, { useState } from \"react\";\n\nimport \"./CardBackSectionPage.scss\";\nimport { formatMinutes, parseAndRun } from \"../utils/timeParsing\";\nimport { useMember } from \"../hooks/useMember\";\nimport { useEstimate } from \"../hooks/useEstimate\";\nimport { WorkButton } from \"../components/WorkButton\";\nimport { CompleteCardButton } from \"../components/CompleteCardButton\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { OpenWorkCardButton } from \"../components/OpenWorkCardButton\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { useTrelloRender } from \"../hooks/useTrelloRender\";\nimport { TimeButtons } from \"../components/TimeButtons\";\nimport { getUpdatedEstimate } from \"../api/estimateApi\";\nimport { MoreCardFunctionsButton } from \"../components/MoreCardFunctionsButton\";\nimport { WorkTimeButtons } from \"../components/WorkTimeButtons\";\n\nexport default function CardBackSectionPage() {\n    const t = useProvidedTrello();\n    const estimate = useEstimate(t);\n\n    const inputState = useState<string>(\"\");\n    const [inputEstimate, setInputEstimate] = inputState;\n\n    const member = useMember(t, \"id\");\n\n    useTrelloRender(t, estimate.refresh);\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    const hasUpdatedEstimate = estimate.value.updatedEstimateMinutes !== 0\n        && estimate.value.updatedEstimateMinutes !== estimate.value.estimateMinutes;\n\n    return (\n        <div>\n            <div className='card-input-header'>\n                <input\n                    value={inputEstimate}\n                    onChange={e => setInputEstimate(e.target.value)}\n                    placeholder=\"input for all buttons...\"\n                />\n                <WorkButton onEstimateChanged={estimate.refresh} />\n                <div className='top-right'>\n                    <OpenWorkCardButton />\n                    <CompleteCardButton />\n                    <MoreCardFunctionsButton onRefresh={estimate.refresh} />\n                </div>\n            </div>\n            <TimeButtons\n                label={<>\n                    {hasUpdatedEstimate && \"Original \"}\n                    Estimate: {formatMinutes(estimate.value.estimateMinutes)}\n                    <If condition={hasUpdatedEstimate}>\n                        {\" | \"}\n                        Updated: {formatMinutes(estimate.value.updatedEstimateMinutes!)}\n                    </If>\n                </>}\n                action={(e, computeNewEstimate) => parseAndRun(t, inputState, parsedMinutes => {\n                    if (estimate.value!.estimateMinutes === 0 && !hasUpdatedEstimate) {\n                        estimate.set(current => ({\n                            ...current,\n                            estimateMinutes: computeNewEstimate(current.estimateMinutes, parsedMinutes),\n                        }));\n                    }\n                    else {\n                        t.popup({\n                            type: \"confirm\",\n                            title: \"Update estimate?\",\n                            message: \"Do you want to update the estimate or change the original?\",\n                            confirmText: \"Update\",\n                            onConfirm: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    updatedEstimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                }));\n                                return tp.closePopup();\n                            },\n                            cancelText: \"Change original\",\n                            onCancel: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    estimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                    updatedEstimateMinutes: 0,\n                                }));\n                                return tp.closePopup();\n                            },\n                            mouseEvent: e.nativeEvent,\n                        });\n                    }\n                })}\n                clearAction={() => estimate.set(current => ({\n                    ...current,\n                    estimateMinutes: 0,\n                    updatedEstimateMinutes: 0,\n                }))}\n            />\n            <If condition={member !== undefined}>\n                <WorkTimeButtons\n                    estimate={estimate}\n                    member={member!}\n                    inputState={inputState}\n                    className=\"work\"\n                />\n            </If>\n            <If condition={Boolean(estimate.feedback)}>\n                <div>\n                    {estimate.feedback}\n                </div>\n            </If>\n        </div>\n    );\n}\n","import { useState, useMemo } from \"react\";\n\nimport { Estimate, getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\n\nexport function useEstimate(t: Trello.PowerUp.IFrame, autosave = true) {\n    const [estimate, setEstimate] = useState<Estimate>();\n    const [feedback, setFeedback] = useState(\"\");\n\n    const refresh = useMemo(\n        () => async () => {\n            setFeedback(\"loading...\");\n            const fetchedEstimate = await getCardEstimate(t);\n            setEstimate(fetchedEstimate);\n            setFeedback(\"\");\n        },\n        noDeps,\n    );\n\n    const set = useMemo(\n        () => (action: (estimate: Estimate) => Estimate) => {\n            if (estimate === undefined)\n                return;\n\n            const updated = action(estimate);\n\n            const delta: Estimate = {\n                estimateMinutes: updated.estimateMinutes - estimate.estimateMinutes,\n                updatedEstimateMinutes: updated.updatedEstimateMinutes - estimate.updatedEstimateMinutes,\n                workMinutes: {},\n            };\n\n            for (const memberId in updated.workMinutes)\n                delta.workMinutes[memberId] = updated.workMinutes[memberId] - (estimate.workMinutes[memberId] ?? 0);\n\n            if (!autosave)\n                return;\n\n            setFeedback(\"saving...\");\n\n            return getCardEstimate(t)\n                .then(remoteEstimate => {\n                    const updatedRemote: Estimate = {\n                        estimateMinutes: remoteEstimate.estimateMinutes + delta.estimateMinutes,\n                        updatedEstimateMinutes: remoteEstimate.updatedEstimateMinutes + delta.updatedEstimateMinutes,\n                        workMinutes: {},\n                    };\n\n                    for (const memberId in delta.workMinutes)\n                        updatedRemote.workMinutes[memberId] = (remoteEstimate.workMinutes[memberId] ?? 0) + delta.workMinutes[memberId];\n\n                    return setCardEstimate(t, updatedRemote);\n                })\n                .then(updatedRemote => {\n                    setEstimate(updatedRemote);\n                    setFeedback(\"saved!\");\n                    setTimeout(() => setFeedback(\"\"), 1000);\n                    return delta;\n                })\n                .catch(err => {\n                    setFeedback(\"\");\n                    t.alert({\n                        display: \"error\",\n                        message: `error during save: ${err}`,\n                    });\n                });\n        },\n        [estimate, autosave],\n    );\n\n    return useMemo(\n        () => ({\n            value: estimate,\n            set,\n            feedback,\n            refresh,\n        }),\n        [estimate, feedback],\n    );\n}\n\nexport type UsedEstimate = ReturnType<typeof useEstimate>;\n","export type DateFormat =\r\n    \"yyyy-MM-dd\"\r\n    | \"yyyy-MM-dd hh:mm:ss\"\r\n;\r\n\r\nexport function formatDate(date: Date, format: DateFormat = \"yyyy-MM-dd\") {\r\n    return format\r\n        .replaceAll(\"yyyy\", date.getFullYear().toString())\r\n        .replaceAll(\"MM\", (date.getMonth() + 1).toString().padStart(2, \"0\"))\r\n        .replaceAll(\"dd\", date.getDate().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"hh\", date.getHours().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"mm\", date.getMinutes().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"ss\", date.getSeconds().toString().padStart(2, \"0\"));\r\n}\r\n","import { formatDate } from \"./dateFormatting\";\r\n\r\nconst key = \"exit.datetime\";\r\n\r\nexport function addListenerToSaveExitTime() {\r\n    window.addEventListener(\"pagehide\", e => {\r\n        localStorage.setItem(key, JSON.stringify(new Date()));\r\n        // localStorage.setItem(\"pagehide\", JSON.stringify(new Date()));\r\n    });\r\n\r\n    // window.addEventListener(\"visibilitychange\", e => {\r\n    //     localStorage.setItem(\"visibilitychange.\" + document.visibilityState, JSON.stringify(new Date()));\r\n    // });\r\n\r\n    const lastExitTime = getLastExitTime();\r\n    console.log(key + \": \" + (lastExitTime ? formatDate(lastExitTime, \"yyyy-MM-dd hh:mm:ss\") : \"null\"));\r\n}\r\n\r\nexport function getLastExitTime() {\r\n    const saved = JSON.parse(localStorage.getItem(key) as string);\r\n\r\n    if (saved)\r\n        return new Date(saved);\r\n\r\n    return null;\r\n}\r\n","import { Trello } from \"../types/trello\";\nimport { editCurrentWorkSession, getWorkSessions, setWorkSessions, WorkSession } from \"../api/estimateApi\";\nimport { formatMinutesWithOptions, hoursToMs, msToMinutes } from \"./timeParsing\";\nimport { getElapsedMs } from \"./dateMath\";\n\ntype Options = {\n    hoursPerDay: number,\n    mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n}\n\ntype AskOptions = Options & {\n    action?: () => Promise<void>,\n}\n\ntype EditOptions = Options & {\n    action: (session: WorkSession) => Promise<WorkSession>,\n}\n\nexport async function askToCloseOldSession(t: Trello.PowerUp.IFrame, options: AskOptions): Promise<void> {\n    const sessions = await getWorkSessions(t);\n    const current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        return options.action?.();\n\n    const sessionAgeMs = getElapsedMs(current.startDate);\n\n    if (sessionAgeMs < hoursToMs(options.hoursPerDay * 2))\n        return options.action?.();\n\n    const formattedAge = formatMinutesWithOptions(msToMinutes(sessionAgeMs), {\n        hoursPerDay: 24,\n    });\n\n    return new Promise((resolve, reject) => {\n        t.popup({\n            type: \"confirm\",\n            title: \"Close old session?\",\n            message: `The current session looks old (${formattedAge}), do you want to close it and open a new one to save this work?`,\n            confirmText: \"Yes\",\n            onConfirm: async tp => {\n                current.endDate = new Date();\n                await setWorkSessions(t, sessions);\n                resolve(options.action?.());\n                await tp.closePopup();\n            },\n            cancelText: \"No\",\n            onCancel: tp => {\n                resolve(options.action?.());\n                return tp.closePopup();\n            },\n            mouseEvent: options.mouseEvent.nativeEvent,\n        });\n    });\n}\n\nexport function askToCloseOldSessionAndCreateNew(t: Trello.PowerUp.IFrame, options: AskOptions) {\n    return askToCloseOldSession(t, {\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n        action: async () => {\n            // create the new session\n            await editCurrentWorkSession(t, async session => session);\n\n            options.action?.();\n        },\n    });\n}\n\nexport function closeIfOldAndEditCurrentWorkSession(t: Trello.PowerUp.IFrame, options: EditOptions) {\n    return askToCloseOldSession(t, {\n        action: () => editCurrentWorkSession(t, options.action),\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n    });\n}\n"],"names":["truncateString","str","maxLength","length","substring","WorkButton","props","t","useProvidedTrello","currentWork","useCurrentWork","elapsedWorkMinutes","useElapsedMinutes","value","startDate","providedCard","useProvidedCard","workCard","useCardById","cardId","member","useMember","isWorking","undefined","isSaving","className","onClick","e","set","id","Date","askToCloseOldSessionAndCreateNew","hoursPerDay","mouseEvent","seconds","Math","round","getElapsedSeconds","minutes","getCardEstimate","estimate","setCardEstimate","workMinutes","closeIfOldAndEditCurrentWorkSession","action","session","addMinutesToDate","onEstimateChanged","formatMinutesWithOptions","zero","name","popup","type","title","message","confirmText","onConfirm","tp","closePopup","cancelText","onCancel","nativeEvent","useCardDueCompletedQuery","queryKey","queryClient","useQueryClient","query","useQuery","card","dueComplete","staleTime","setData","useCallback","data","setQueryData","useMemo","useCardWithFunctions","fields","useState","setCard","refresh","fetched","console","warn","noDeps","useTrelloRender","useCard","useEffect","cards","c","render","getCurrentWork","minutesToMs","cacheTime","Infinity","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","useTrelloRenderWithOptions","refetch","callImmediately","useInit","listener","currentWorkChangedEvent","useCurrentWorkQuery","setIsSaving","updated","setCurrentWork","useElapsedMs","ms","setMs","animationFrameId","canceled","requestAnimationFrame","updateSeconds","getElapsedMs","cancelAnimationFrame","state","setMember","actualFields","then","res","window","TrelloPowerUp","iframe","appName","process","appKey","options","effect","enumerateKeys","object","key","baseurl","apiKey","updateCardFields","token","request","queryString","Array","from","join","url","method","fetch","headers","Accept","response","json","jsonResponse","CompleteCardButton","dueCompleteQuery","scope","getRestApi","isAuthorized","authorized","Error","catch","authorize","getToken","getAuthorizedRestApi","due","toISOString","ok","err","error","OpenWorkCardButton","showCard","TimeButtons","label","_","parsed","setLabel","previous","showClear","clearAction","clearLabel","addTimeSinceLastInputAsWork","isApplicable","Boolean","getLastInputTime","getTitle","lastInputTime","elapsedMinutesSinceLastInput","getElapsedMinutes","formatMinutes","call","modMyCardWorkInSession","forgotToEndWork","lastExitTime","getLastExitTime","elapsedMinutesUntilExit","getMinutesBetween","formatDate","MoreCardFunctionsButton","addFunctionButtonIfApplicable","items","cardFunction","onRefresh","text","callback","push","WorkDetails","showDetails","setShowDetails","members","setMembers","isCardComplete","board","obj","m","totalWork","getTotalWorkMinutes","myWork","remainingWork","getRemainingWorkMinutes","current","formatWorkDelta","delta","getWorkDelta","totalWorkMinutes","enumerateWork","filter","item","map","memberId","fullName","username","WorkTimeButtons","feedback","runAndUpdateSession","args","myWorkDelta","computeNewWork","parseAndRun","inputState","parsedMinutes","CardBackSectionPage","autosave","setEstimate","setFeedback","fetchedEstimate","estimateMinutes","updatedEstimateMinutes","remoteEstimate","updatedRemote","setTimeout","alert","display","useEstimate","inputEstimate","setInputEstimate","hasUpdatedEstimate","onChange","target","placeholder","computeNewEstimate","getUpdatedEstimate","date","format","replaceAll","getFullYear","toString","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","addListenerToSaveExitTime","addEventListener","localStorage","setItem","JSON","stringify","log","saved","parse","getItem","askToCloseOldSession","getWorkSessions","sessions","endDate","sessionAgeMs","hoursToMs","formattedAge","msToMinutes","Promise","resolve","reject","setWorkSessions","editCurrentWorkSession"],"sourceRoot":""}