{"version":3,"file":"static/js/265.7a2160d6.chunk.js","mappings":"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","sources":["api/estimateApi.ts","api/events/apiEvents.ts","jk/events/createEvent.ts","utils/dateMath.ts","utils/mathParsing.ts","utils/timeParsing.ts","utils/workDelta.ts"],"sourcesContent":["import { Trello } from \"../types/trello\";\nimport { currentWorkChangedEvent } from \"./events/apiEvents\";\n\nexport type UserMinutes = {\n    [key: string]: number,\n}\n\nexport type Estimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: UserMinutes,\n}\n\ntype EstimateWithCard = Estimate & {\n    card: Trello.PowerUp.Card,\n}\n\nexport type SummaryEstimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: number,\n    remainingMinutes: number,\n    deltaMinutes: number,\n}\n\nexport type CurrentWork = {\n    cardId: string,\n    startDate: Date,\n}\n\nexport type WorkSession = {\n    startDate: Date,\n    endDate?: Date,\n    workMinutes: number,\n}\n\nexport async function getMyWorkMinutes(estimate: Estimate, t: Trello.PowerUp.IFrame): Promise<number> {\n    const me = await t.member(\"id\");\n    return estimate.workMinutes[me.id];\n}\n\nexport function getTotalWorkMinutes(estimate: Estimate) {\n    let sum = 0;\n    for (const workerId in estimate.workMinutes)\n        sum += estimate.workMinutes[workerId];\n    return sum;\n}\n\nexport function getRemainingWorkMinutes(estimate: Estimate, dueComplete: boolean, totalWorkMinutes?: number) {\n    if (dueComplete)\n        return 0;\n\n    if (totalWorkMinutes === undefined)\n        totalWorkMinutes = getTotalWorkMinutes(estimate);\n\n    return (estimate.updatedEstimateMinutes || estimate.estimateMinutes) - totalWorkMinutes;\n}\n\nexport function* enumerateWork(estimate: Estimate) {\n    for (const memberId in estimate.workMinutes) {\n        yield {\n            memberId,\n            minutes: estimate.workMinutes[memberId],\n        };\n    }\n}\n\nexport function getUpdatedEstimate(estimate: Estimate) {\n    if (estimate.updatedEstimateMinutes !== 0)\n        return estimate.updatedEstimateMinutes;\n    else\n        return estimate.estimateMinutes;\n}\n\nexport async function getCardEstimate(t: Trello.PowerUp.IFrame, cardId?: string): Promise<Estimate> {\n    const estimate = JSON.parse(await t.get(cardId ?? \"card\", \"shared\", \"estimate\", \"null\")) as Estimate;\n    if (estimate === null) {\n        return {\n            estimateMinutes: 0,\n            updatedEstimateMinutes: 0,\n            workMinutes: {},\n        };\n    }\n    return estimate;\n}\n\nexport async function setCardEstimate(t: Trello.PowerUp.IFrame, estimate: Estimate, cardId?: string) {\n    await t.set(cardId ?? \"card\", \"shared\", \"estimate\", JSON.stringify(estimate));\n    await setLastInputTimeToNow(t);\n    return estimate;\n}\n\nexport async function modMyCardWorkInSession(t: Trello.PowerUp.IFrame, workMinutesDelta: number, cardId?: string) {\n    const member = await t.member(\"id\");\n    const estimate = await getCardEstimate(t, cardId);\n    await setCardEstimate(\n        t,\n        {\n            ...estimate,\n            workMinutes: {\n                ...estimate.workMinutes,\n                [member.id]: (estimate.workMinutes[member.id] ?? 0) + workMinutesDelta,\n            },\n        },\n        cardId,\n    );\n    await editCurrentWorkSession(t, async session => ({\n        ...session,\n        workMinutes: session.workMinutes + workMinutesDelta,\n    }));\n}\n\nexport async function getAllCardsEstimates(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"id\"];\n\n    const cards: Trello.PowerUp.Card[] = await t.cards(...fields);\n    return await Promise.all(cards.map(card =>\n        getCardEstimate(t, card.id).then(estimate => ({\n            ...estimate,\n            card: card,\n        }))));\n}\n\nexport async function getBoardEstimates(t: Trello.PowerUp.IFrame) {\n    const estimatedCards = await getAllCardsEstimates(t, \"id\", \"dueComplete\");\n    return getSummaryEstimate(estimatedCards);\n}\n\nexport function getSummaryEstimate(estimatedCards: EstimateWithCard[]) {\n    const summary: SummaryEstimate = {\n        estimateMinutes: 0,\n        updatedEstimateMinutes: 0,\n        workMinutes: 0,\n        remainingMinutes: 0,\n        deltaMinutes: 0,\n    };\n\n    for (const estimate of estimatedCards) {\n        summary.estimateMinutes += estimate.estimateMinutes;\n\n        const totalWorkMinutes = getTotalWorkMinutes(estimate);\n        summary.workMinutes += totalWorkMinutes;\n\n        const remaining = getRemainingWorkMinutes(estimate, estimate.card.dueComplete);\n        summary.remainingMinutes += remaining > 0 ? remaining : 0;\n\n        summary.updatedEstimateMinutes += !estimate.card.dueComplete\n            ? (estimate.updatedEstimateMinutes || estimate.estimateMinutes)\n            : totalWorkMinutes;\n\n        if (estimate.card.dueComplete || totalWorkMinutes > estimate.estimateMinutes)\n            summary.deltaMinutes += estimate.estimateMinutes - totalWorkMinutes;\n    }\n\n    return summary;\n}\n\nexport async function getListEstimates(t: Trello.PowerUp.IFrame) {\n    const trelloList = await t.list(\"id\", \"cards\");\n\n    const estimatedCards: EstimateWithCard[] = [];\n\n    for (const card of trelloList.cards) {\n        const estimate = await getCardEstimate(t, card.id);\n        estimatedCards.push({\n            card,\n            ...estimate,\n        });\n    }\n\n    return getSummaryEstimate(estimatedCards);\n}\n\nexport async function getCurrentWork(t: Trello.PowerUp.IFrame) {\n    // console.log(\"getting current work\");\n\n    const currentWork = JSON.parse(await t.get(\"board\", \"private\", \"work\", \"null\")) as CurrentWork | null;\n\n    if (currentWork !== null)\n        // js parses dates as strings so i have to convert it here\n        currentWork.startDate = new Date(currentWork.startDate);\n\n    return currentWork;\n}\n\nexport async function setCurrentWork(t: Trello.PowerUp.IFrame, currentWork: CurrentWork | null) {\n    // console.log(\"setting current work\");\n    await t.set(\"board\", \"private\", \"work\", JSON.stringify(currentWork ?? null));\n    currentWorkChangedEvent.emit();\n}\n\nexport async function getWorkSessions(t: Trello.PowerUp.IFrame) {\n    const stored = await t.get(\"board\", \"private\", \"work_sessions\", \"[]\");\n    const sessions = JSON.parse(stored) as WorkSession[];\n    // console.log(\"stored sessions:\", sessions);\n\n    for (const s of sessions) {\n        s.startDate = new Date(s.startDate);\n        if (s.endDate !== undefined)\n            s.endDate = new Date(s.endDate);\n    }\n\n    return sessions;\n}\n\nexport async function setWorkSessions(t: Trello.PowerUp.IFrame, sessions: WorkSession[]) {\n    await t.set(\"board\", \"private\", \"work_sessions\", JSON.stringify(sessions));\n}\n\nconst maxWorkSessions = 10;\n\nfunction addWorkSession(sessions: WorkSession[]) {\n    if (sessions.length >= maxWorkSessions)\n        sessions.shift();\n\n    const added: WorkSession = {\n        startDate: new Date(),\n        workMinutes: 0,\n    };\n\n    sessions.push(added);\n\n    return added;\n}\n\nexport async function editCurrentWorkSession(t: Trello.PowerUp.IFrame, action: (session: WorkSession) => Promise<WorkSession>) {\n    // console.log((\"editing current work session\"));\n\n    const sessions = await getWorkSessions(t);\n    let current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        current = addWorkSession(sessions);\n\n    sessions[sessions.length - 1] = await action(current);\n\n    await setWorkSessions(t, sessions);\n}\n\nexport async function getMarginMultiplier(t: Trello.PowerUp.IFrame) {\n    const margin = await t.get(\"board\", \"shared\", \"margin\", 0.2) as number;\n    return margin;\n}\n\nexport async function setMaringMultiplier(t: Trello.PowerUp.IFrame, marginMultiplier: number) {\n    await t.set(\"board\", \"shared\", \"margin\", marginMultiplier);\n}\n\nexport async function getLastInputTime(t: Trello.PowerUp.IFrame): Promise<Date | null> {\n    let time = await t.get(\"board\", \"private\", \"last_input_time\", null);\n\n    if (time)\n        time = new Date(time);\n\n    // console.log(\"got last input time:\", time);\n\n    return time;\n}\n\nexport async function setLastInputTime(t: Trello.PowerUp.IFrame, time: Date) {\n    // console.log(\"setting last input time @\", time);\n    await t.set(\"board\", \"private\", \"last_input_time\", time);\n}\n\nexport async function setLastInputTimeToNow(t: Trello.PowerUp.IFrame) {\n    setLastInputTime(t, new Date());\n}\n","import EventEmitter from \"eventemitter3\";\r\nimport { createEvent } from \"../../jk/events/createEvent\";\r\n\r\nexport const apiEventEmitter = new EventEmitter();\r\n\r\nexport const currentWorkChangedEvent = createEvent<void>(apiEventEmitter, \"work.current.changed\");\r\n","import EventEmitter from \"eventemitter3\";\r\n\r\ninterface Listener<T> {\r\n    (arg: T): void;\r\n}\r\n\r\nexport type Event<T> = {\r\n    on: (listener: Listener<T>) => Listener<T>;\r\n    once: (listener: Listener<T>) => Listener<T>;\r\n    off: (listener: Listener<T>) => Listener<T>;\r\n    emit: (arg: T) => void;\r\n}\r\n\r\nexport function createEvent<T>(eventEmitter: EventEmitter, key: string): Event<T> {\r\n    return {\r\n        on: listener => {\r\n            eventEmitter.on(key, listener);\r\n            return listener;\r\n        },\r\n        once: listener => {\r\n            eventEmitter.once(key, listener);\r\n            return listener;\r\n        },\r\n        off: listener => {\r\n            eventEmitter.off(key, listener);\r\n            return listener;\r\n        },\r\n        emit: arg => eventEmitter.emit(key, arg),\r\n    };\r\n}\r\n","import { minutesToMs, msToMinutes } from \"./timeParsing\";\n\nexport function addMinutesToDate(date: Date, minutes: number) {\n    return new Date(date.getTime() + minutesToMs(minutes));\n}\n\nexport function getMsBetween(earlierDate: Date, laterDate: Date) {\n    return laterDate.getTime() - earlierDate.getTime();\n}\n\nexport function getMinutesBetween(earlierDate: Date, laterDate: Date) {\n    return msToMinutes(getMsBetween(earlierDate, laterDate));\n}\n\nexport function getElapsedMs(date: Date) {\n    return Date.now() - date.getTime();\n}\n\nexport function getElapsedSeconds(date: Date) {\n    return getElapsedMs(date) / 1000;\n}\n\nexport function getElapsedMinutes(date: Date) {\n    return getElapsedMs(date) / 1000 / 60;\n}\n\nexport function areDatesEqual(date1: Date, date2: Date) {\n    return date1?.getTime() === date2?.getTime();\n}\n","\nexport function evaluateMathExpression(expression: string) {\n    if (/^[0-9.()+*-/]+$/.test(expression)) {\n        try {\n            return eval(expression) as number;\n        }\n        catch (error) {\n            return NaN;\n        }\n    }\n    else {\n        return NaN;\n    }\n}\n","import { Trello } from \"../types/trello\";\nimport { evaluateMathExpression } from \"./mathParsing\";\n\nexport const hoursPerDay = 8;\n\nexport function parseTimeDelta(timeDeltaString: string) {\n    timeDeltaString = timeDeltaString.replaceAll(\" \", \"\");\n    timeDeltaString = timeDeltaString.replaceAll(\",\", \".\");\n    timeDeltaString = timeDeltaString.toLowerCase();\n\n    if (!/^([^a-z]+[a-z]+)+$/.test(timeDeltaString)) {\n        // console.log(\"desk rejected\");\n        return NaN;\n    }\n\n    let minutes = 0;\n\n    for (const match of timeDeltaString.matchAll(/([^a-z]+)([a-z]+)/g)) {\n        const timeLabel = match[2];\n\n        if (timeLabel.length !== 1)\n            return NaN;\n\n        let multiplier: number;\n\n        if (timeLabel === \"m\")\n            multiplier = 1;\n        else if (timeLabel === \"h\")\n            multiplier = 60;\n        else if (timeLabel === \"d\")\n            multiplier = 60 * hoursPerDay;\n        else\n            return NaN;\n\n        const expressionResult = evaluateMathExpression(match[1]);\n\n        if (isNaN(expressionResult))\n            return NaN;\n\n        minutes += multiplier * expressionResult;\n    }\n\n    if (minutes <= 0)\n        return NaN;\n\n    return minutes;\n}\n\nexport function parseAndRun<T>(t: Trello.PowerUp.IFrame, [input, setInput]: UsedState<string>, action: (parsedMinutes: number) => T) {\n    const parsedMinutes = parseTimeDelta(input);\n\n    if (isNaN(parsedMinutes)) {\n        t.alert({\n            display: \"error\",\n            message: \"invalid input\",\n            duration: 4,\n        });\n        return;\n    }\n\n    const val = action(parsedMinutes);\n\n    setInput(\"\");\n\n    return val;\n}\n\nexport type FormatMinutesOptions = {\n    zero: string,\n    negative: string,\n    hoursPerDay: number,\n}\n\nconst defaultOptions: FormatMinutesOptions = {\n    zero: \"none\",\n    negative: \"?\",\n    hoursPerDay: 8,\n};\n\nexport function formatMinutes(minutes: number) {\n    return formatMinutesWithOptions(minutes );\n}\n\nexport function formatMinutesWithOptions(minutes: number, options: Partial<FormatMinutesOptions> = defaultOptions) {\n    if (isNaN(minutes))\n        return \"NaN\";\n\n    if (minutes < 0)\n        return options.negative ?? defaultOptions.negative;\n\n    if (minutes === 0)\n        return options.zero ?? defaultOptions.zero;\n\n    const hoursPerDay = options.hoursPerDay ?? defaultOptions.hoursPerDay;\n\n    let minutesPart = Math.floor(minutes % 60);\n    const flooredHours = Math.floor(minutes / 60);\n    const hoursPart = flooredHours % hoursPerDay;\n    const daysPart = Math.floor(flooredHours / hoursPerDay);\n\n    let secondsPart = 0;\n\n    // show seconds only if minutes < 1\n    if (minutes < 1) {\n        secondsPart = Math.round(minutes * 60);\n        minutesPart = 0;\n    }\n\n    let str = \"\";\n\n    if (daysPart > 0)\n        str += daysPart + \"d\";\n    if (hoursPart > 0)\n        str += hoursPart + \"h\";\n    if (minutesPart > 0)\n        str += minutesPart + \"m\";\n    if (secondsPart > 0)\n        str += secondsPart + \"s\";\n\n    return str;\n}\n\nexport function minutesToMs(minutes: number) {\n    return minutes * 60 * 1000;\n}\n\nexport function hoursToMs(hours: number) {\n    return minutesToMs(hours * 60);\n}\n\nexport function msToMinutes(ms: number) {\n    return (ms / 1000) / 60;\n}\n","import { CurrentWork, Estimate, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { getElapsedMinutes } from \"./dateMath\";\nimport { formatMinutes } from \"./timeParsing\";\n\ntype Args = {\n    cardId: Trello.PowerUp.Card[\"id\"] | undefined,\n    estimate: Estimate,\n    totalWorkMinutes?: number,\n    currentWork?: CurrentWork | null | undefined,\n}\n\nexport function getWorkDelta(args: Args) {\n    let totalWorkMinutes = args.totalWorkMinutes ?? getTotalWorkMinutes(args.estimate);\n\n    if (args.currentWork != null && args.currentWork.cardId === args.cardId)\n        totalWorkMinutes += getElapsedMinutes(args.currentWork.startDate);\n\n    return args.estimate.estimateMinutes - totalWorkMinutes;\n}\n\ntype FormattedArgs = {\n    delta: number,\n    short?: boolean,\n}\n\nexport function formatWorkDelta({ delta, short }: FormattedArgs) {\n    if (delta >= 0) {\n        if (short)\n            return \"S: \" + formatMinutes(delta);\n        else\n            return \"Saved: \" + formatMinutes(delta);\n    }\n    else {\n        if (short)\n            return \"O: \" + formatMinutes(-delta);\n        else\n            return \"Overtime: \" + formatMinutes(-delta);\n    }\n}\n"],"names":["enumerateWork","getTotalWorkMinutes","estimate","sum","workerId","workMinutes","getRemainingWorkMinutes","dueComplete","totalWorkMinutes","undefined","updatedEstimateMinutes","estimateMinutes","memberId","minutes","getUpdatedEstimate","getCardEstimate","t","cardId","JSON","get","parse","setCardEstimate","set","stringify","setLastInputTimeToNow","modMyCardWorkInSession","workMinutesDelta","member","id","editCurrentWorkSession","session","getAllCardsEstimates","fields","length","cards","Promise","all","map","card","then","getBoardEstimates","estimatedCards","getSummaryEstimate","summary","remainingMinutes","deltaMinutes","remaining","getListEstimates","list","trelloList","push","getCurrentWork","currentWork","startDate","Date","setCurrentWork","currentWorkChangedEvent","getWorkSessions","stored","sessions","s","endDate","setWorkSessions","addWorkSession","shift","added","action","current","getMarginMultiplier","margin","setMaringMultiplier","marginMultiplier","getLastInputTime","time","setLastInputTime","eventEmitter","key","apiEventEmitter","EventEmitter","on","listener","once","off","emit","arg","addMinutesToDate","date","getTime","minutesToMs","getMinutesBetween","earlierDate","laterDate","msToMinutes","getMsBetween","getElapsedMs","now","getElapsedSeconds","getElapsedMinutes","areDatesEqual","date1","date2","evaluateMathExpression","expression","test","NaN","eval","error","hoursPerDay","parseAndRun","input","setInput","parsedMinutes","timeDeltaString","replaceAll","toLowerCase","matchAll","match","timeLabel","multiplier","expressionResult","isNaN","parseTimeDelta","val","alert","display","message","duration","defaultOptions","zero","negative","formatMinutes","formatMinutesWithOptions","options","minutesPart","Math","floor","flooredHours","hoursPart","daysPart","secondsPart","round","str","hoursToMs","hours","ms","getWorkDelta","args","formatWorkDelta","delta","short"],"sourceRoot":""}