{"version":3,"file":"static/js/914.acf2d822.chunk.js","mappings":"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","sources":["utils/truncate.ts","components/WorkButton.tsx","hooks/useCard.ts","hooks/useCurrentWork.ts","hooks/useElapsed.ts","hooks/useMember.ts","hooks/useProvidedTrello.ts","hooks/useTrelloRender.ts","jk/hooks/useInit.ts","jk/noDeps.ts","utils/trelloRest.ts","utils/object.ts","utils/fetch.ts","components/CompleteCardButton.tsx","components/OpenWorkCardButton.tsx","components/TimeButtons.tsx","card_functions/addTimeSinceLastInputAsWork.ts","card_functions/forgotToEndWork.ts","components/MoreCardFunctionsButton.tsx","components/WorkDetails.tsx","components/WorkTimeButtons.tsx","pages/CardBackSectionPage.tsx","hooks/useEstimate.ts","utils/dateFormatting.ts","utils/exitTime.ts","utils/workSessionsUtils.ts"],"sourcesContent":["\nexport function truncateString(str: string, maxLength = 10) {\n    if (str.length < maxLength)\n        return str;\n    else\n        return str.substring(0, maxLength - 3) + \"...\";\n}\n","import React from \"react\";\n\nimport \"./WorkButton.scss\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useCardById, useProvidedCard } from \"../hooks/useCard\";\nimport { getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { formatMinutesWithOptions, hoursPerDay } from \"../utils/timeParsing\";\nimport { truncateString } from \"../utils/truncate\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { useMember } from \"../hooks/useMember\";\nimport { addMinutesToDate, getElapsedSeconds } from \"../utils/dateMath\";\nimport { askToCloseOldSessionAndCreateNew, closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { If } from \"../jk/types/jsxControlStatements\";\n\ntype Props = {\n    onEstimateChanged?: () => void;\n}\n\nexport function WorkButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(currentWork.value?.startDate);\n    const providedCard = useProvidedCard(\"id\");\n    const workCard = useCardById(t, currentWork.value?.cardId, \"id\", \"name\");\n    const member = useMember(t, \"id\");\n\n    const isWorking = currentWork.value?.cardId !== undefined && !currentWork.isSaving;\n\n    if (!providedCard && !isWorking)\n        return null;\n\n    return (\n        <div className=\"work-button-wrapper\">\n            <button\n                className={`work-button ${!isWorking ? \"mod-primary\" : \"mod-danger\"}`}\n                onClick={async e => {\n                    if (member === undefined)\n                        return;\n\n                    if (!isWorking && providedCard !== undefined) {\n                        currentWork.set({\n                            cardId: providedCard.id,\n                            startDate: new Date(),\n                        });\n\n                        askToCloseOldSessionAndCreateNew(t, {\n                            hoursPerDay,\n                            mouseEvent: e,\n                        });\n                    }\n                    else if (isWorking) {\n                        const seconds = Math.round(getElapsedSeconds(currentWork.value!.startDate));\n                        const minutes = seconds / 60;\n\n                        currentWork.set(null);\n\n                        const estimate = await getCardEstimate(t, currentWork.value!.cardId);\n                        await setCardEstimate(\n                            t,\n                            {\n                                ...estimate,\n                                workMinutes: {\n                                    ...estimate.workMinutes,\n                                    [member.id]: (estimate.workMinutes[member.id] ?? 0) + minutes,\n                                },\n                            },\n                            currentWork.value!.cardId,\n                        );\n\n                        await closeIfOldAndEditCurrentWorkSession(t, {\n                            action: async session => {\n                                if (session.workMinutes === 0)\n                                    session.startDate = addMinutesToDate(session.startDate, -minutes);\n                                session.workMinutes += minutes;\n                                return session;\n                            },\n                            hoursPerDay,\n                            mouseEvent: e,\n                        });\n\n                        props.onEstimateChanged?.();\n                    }\n                }}\n            >\n                <If condition={currentWork.isSaving}>\n                ...\n                </If>\n                <If condition={!currentWork.isSaving}>\n                    {!isWorking ? \"Start work\" : \"End work\"}\n                    <If condition={isWorking}>\n                        {\" \" + formatMinutesWithOptions(elapsedWorkMinutes, { zero: \"\" })}\n                    </If>\n                    <If condition={isWorking && providedCard?.id !== currentWork.value?.cardId}>\n                        {` (on${providedCard ? \" other\" : \"\"} card${workCard === undefined ? \"\" : `: \"${truncateString(workCard.name, 8)}\"`})`}\n                    </If>\n                </If>\n            </button>\n            <If condition={isWorking}>\n                <button\n                    className=\"cancel-work-button\"\n                    onClick={e => t.popup({\n                        type: \"confirm\",\n                        title: \"Cancel work?\",\n                        message: \"Are you sure you want to cancel the work in progress?\",\n                        confirmText: \"Yes\",\n                        onConfirm: tp => {\n                            currentWork.set(null);\n                            return tp.closePopup();\n                        },\n                        cancelText: \"No\",\n                        onCancel: tp => tp.closePopup(),\n                        mouseEvent: e.nativeEvent,\n                    })}\n                >\n                    X\n                </button>\n            </If>\n        </div>\n    );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRender } from \"./useTrelloRender\";\n\nexport function useCardDueCompletedQuery(t: Trello.PowerUp.IFrame) {\n    const queryKey = \"card\";\n    const queryClient = useQueryClient();\n\n    const query = useQuery(\n        queryKey,\n        async () => {\n            const card = await t.card(\"dueComplete\");\n            return card.dueComplete;\n        },\n        { staleTime: 1000 },\n    );\n\n    const setData = useCallback(\n        (data: boolean) => queryClient.setQueryData(queryKey, data),\n        [queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            ...query,\n            setData,\n        }),\n        [query, setData],\n    );\n}\n\nexport function useCardWithFunctions(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    const refresh = useCallback(\n        async () => {\n            let fetched: Trello.PowerUp.Card;\n\n            try {\n                fetched = await t.card(...fields);\n            }\n            catch (error) {\n                console.warn(\"no card in context\");\n                return;\n            }\n\n            // console.log(\"refreshed card complete\", fetched.dueComplete);\n\n            setCard(fetched);\n        },\n        noDeps,\n    );\n\n    useTrelloRender(t, refresh);\n\n    return useMemo(\n        () => ({\n            card,\n            refresh,\n            setCard,\n        }),\n        [card],\n    );\n}\n\nexport function useCard(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const { card } = useCardWithFunctions(t, ...fields);\n    return card;\n}\n\nexport function useProvidedCard(...fields: (keyof Trello.PowerUp.Card)[]) {\n    const t = useProvidedTrello();\n    return useCard(t, ...fields);\n}\n\nexport function useCardById(t: Trello.PowerUp.IFrame, cardId: string | undefined, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    useEffect(\n        () => {\n            async function refresh() {\n                if (cardId === undefined)\n                    return;\n\n                const cards = await t.cards(...fields);\n                for (const c of cards) {\n                    if (c.id === cardId) {\n                        setCard(c);\n                        break;\n                    }\n                }\n            }\n            refresh();\n            t.render(refresh);\n        },\n        [cardId],\n    );\n\n    return card;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { CurrentWork, getCurrentWork, setCurrentWork } from \"../api/estimateApi\";\nimport { currentWorkChangedEvent } from \"../api/events/apiEvents\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { Trello } from \"../types/trello\";\nimport { minutesToMs } from \"../utils/timeParsing\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRenderWithOptions } from \"./useTrelloRender\";\n\nconst queryKey = \"current_work\";\n\nexport function useCurrentWorkQuery(t: Trello.PowerUp.IFrame) {\n    // N.B. la query sembra che non venga cachata, penso che il motivo sia che\n    // ogni volta che viene aperta una scheda viene avviata una nuova\n    // istanza di react\n    const query = useQuery(\n        queryKey,\n        () => getCurrentWork(t),\n        {\n            staleTime: minutesToMs(2),\n            cacheTime: Infinity,\n            refetchOnMount: false,\n            refetchOnReconnect: false,\n            refetchOnWindowFocus: false,\n        },\n    );\n\n    useTrelloRenderWithOptions(t, {\n        refresh: query.refetch,\n        callImmediately: false,\n    });\n\n    useInit(() => {\n        const listener = currentWorkChangedEvent.on(query.refetch as any);\n        return () => currentWorkChangedEvent.off(listener) as any;\n    });\n\n    return query;\n}\n\nexport function useCurrentWork() {\n    const t = useProvidedTrello();\n    const queryClient = useQueryClient();\n    const query = useCurrentWorkQuery(t);\n    const [isSaving, setIsSaving] = useState(false);\n\n    // console.log(\"query stale: \" + query.isStale);\n\n    const set = useCallback(\n        async (updated: CurrentWork | null) => {\n            setIsSaving(true);\n            await setCurrentWork(t, updated);\n            // console.log(\"setting query data\");\n            queryClient.setQueryData(queryKey, updated);\n            setIsSaving(false);\n        },\n        [t, queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            value: query.data,\n            isSaving,\n            set,\n        }),\n        [query.data, isSaving, set],\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport { getElapsedMs } from \"../utils/dateMath\";\n\nexport function useElapsedMinutes(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000 / 60;\n}\n\nexport function useElapsedSeconds(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000;\n}\n\nexport function useElapsedMs(startDate: Date | undefined) {\n    const [ms, setMs] = useState(0);\n\n    useEffect(\n        () => {\n            if (startDate === undefined) {\n                setMs(0);\n                return;\n            }\n\n            let animationFrameId: number;\n            let canceled = false;\n\n            function updateSeconds() {\n                setMs(getElapsedMs(startDate!));\n\n                if (!canceled)\n                    animationFrameId = requestAnimationFrame(updateSeconds);\n            }\n\n            animationFrameId = requestAnimationFrame(updateSeconds);\n\n            return () => {\n                canceled = true;\n                cancelAnimationFrame(animationFrameId);\n            };\n        },\n        [startDate],\n    );\n\n    return ms;\n}\n","import { useEffect, useState } from \"react\";\n\nimport { Trello } from \"../types/trello\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport function useMember(t: Trello.PowerUp.IFrame, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const state = useState<Trello.PowerUp.Member>();\n    const [member, setMember] = state;\n\n    useEffect(\n        () => {\n            const actualFields = fields !== undefined && fields.length > 0\n                ? fields\n                : [\"id\"] as Trello.PowerUp.MemberFields[];\n            t.member(...actualFields).then(res => setMember(res));\n        },\n        [t],\n    );\n\n    return member;\n}\n\nexport function useProvidedMember(...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const t = useProvidedTrello();\n    return useMember(t, ...fields);\n}\n\nexport type MemberById = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function useMemberById(t: Trello.PowerUp.IFrame, isLazy = true, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const [memberById, setMemberById] = useState<MemberById>();\n\n    useEffect(\n        () => {\n            if (isLazy || memberById !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MemberById = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMemberById(obj);\n            });\n        },\n        [t, isLazy, memberById],\n    );\n\n    return memberById;\n}\n\nexport function useProvidedMemberById(isLazy = true, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const t = useProvidedTrello();\n    return useMemberById(t, isLazy, ...fields);\n}\n","import { Trello } from \"../types/trello\";\n\nlet t: Trello.PowerUp.IFrame;\n\nexport function useProvidedTrello() {\n    if (t === undefined) {\n        t = window.TrelloPowerUp.iframe({\n            appName: process.env.REACT_APP_POWERUP_NAME,\n            appKey: process.env.REACT_APP_POWERUP_APP_KEY,\n        });\n    }\n\n    return t;\n}\n","import { Trello } from \"../types/trello\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport type TrelloRenderOptions = {\n    refresh: () => void;\n    callImmediately?: boolean;\n}\n\nexport function useTrelloRenderWithOptions(t: Trello.PowerUp.IFrame, options: TrelloRenderOptions) {\n    useInit(() => {\n        if (options.callImmediately)\n            options.refresh();\n        t.render(options.refresh);\n    });\n}\n\nexport function useTrelloRender(t: Trello.PowerUp.IFrame, refresh: () => void) {\n    return useTrelloRenderWithOptions(t, {\n        refresh,\n        callImmediately: true,\n    });\n}\n\nexport function useProvidedTrelloRender(refresh: () => void) {\n    const t = useProvidedTrello();\n    return useTrelloRender(t, refresh);\n}\n","import React, { useEffect } from \"react\";\nimport { noDeps } from \"../noDeps\";\n\nexport function useInit(effect: React.EffectCallback) {\n    return useEffect(effect, noDeps);\n}\n","export const noDeps = [];\n","import { Trello } from \"../types/trello\";\nimport { fetchJson } from \"./fetch\";\nimport { enumerateKeys } from \"./object\";\n\nconst baseurl = \"https://api.trello.com/1\";\n\nconst apiKey = process.env.REACT_APP_POWERUP_APP_KEY;\n\nexport function getAuthorizedRestApi(t: Trello.PowerUp.IFrame, scope: Trello.PowerUp.AllPermissions = \"read,write\") {\n    return t.getRestApi()\n        .isAuthorized()\n        .then(authorized => {\n            if (authorized)\n                return;\n            else\n                throw new Error(\"unauthorized\");\n        })\n        .catch(() => {\n            return t.getRestApi().authorize({\n                scope,\n            });\n        })\n        .then(() => {\n            return t.getRestApi().getToken();\n        });\n}\n\nexport function getCardFields(token: string, cardId: string, ...fields: [\"all\"] | (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"all\"];\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?fields=${fields.join(\",\")}&key=${apiKey}&token=${token}`,\n        method: \"GET\",\n    });\n}\n\nexport type EditableCard = Partial<Omit<Trello.PowerUp.Card, \"id\" | \"idShort\" | \"url\">>;\n\nexport function updateCardFields(token: string, cardId: string, fields: EditableCard) {\n    const query = {\n        ...fields,\n        key: apiKey,\n        token: token,\n    };\n\n    const queryString = Array.from(enumerateKeys(query), key => key + \"=\" + query[key]).join(\"&\");\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?${queryString}`,\n        method: \"PUT\",\n    });\n}\n","export function* enumerateKeys<T>(object: T): Generator<keyof T> {\n    for (const key in object)\n        yield key;\n}\n","export type Request = RequestInit & {\n    url: RequestInfo | URL;\n}\n\nexport type JsonResponse<T> = Response & {\n    data: T;\n    request: Request\n}\n\nexport function fetchJson<T>(request: Request): Promise<JsonResponse<T>> {\n    return fetch(request.url, {\n        ...request,\n        headers: {\n            Accept: \"application/json\",\n            ...request?.headers,\n        },\n    })\n        .then(response => {\n            return response.json().then(json => {\n                const jsonResponse = response as JsonResponse<T>;\n                jsonResponse.data = json;\n                jsonResponse.request = request;\n                return jsonResponse;\n            });\n        });\n}\n","import React from \"react\";\n\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { getAuthorizedRestApi, updateCardFields } from \"../utils/trelloRest\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function CompleteCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\", \"due\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n\n    return (\n        <button\n            className={`complete-work ${props.className}`}\n            onClick={() => {\n                if (card === undefined)\n                    return;\n\n                getAuthorizedRestApi(t)\n                    .then(token => updateCardFields(token, card.id, {\n                        due: dueCompleteQuery.data\n                            ? null\n                            : card.due\n                                ? card.due\n                                : new Date().toISOString(),\n                        dueComplete: !dueCompleteQuery.data,\n                    }))\n                    .then(response => {\n                        if (response.ok)\n                            dueCompleteQuery.setData(response.data.dueComplete);\n                    })\n                    .catch(err => {\n                        console.error(err);\n                    });\n            }}\n        >\n            <If condition={dueCompleteQuery.data === undefined}>\n                loading...\n            </If>\n            <If condition={dueCompleteQuery.data !== undefined}>\n                <If condition={dueCompleteQuery.data}>\n                    Uncomplete card\n                </If>\n                <If condition={!dueCompleteQuery.data}>\n                    Complete card\n                </If>\n            </If>\n        </button>\n    );\n}\n","import React from \"react\";\nimport { useCard } from \"../hooks/useCard\";\n\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function OpenWorkCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const card = useCard(t, \"id\");\n\n    if (currentWork.value?.cardId === undefined)\n        return null;\n\n    if (card === undefined || currentWork.value.cardId === card.id)\n        return null;\n\n    return (\n        <button\n            className={`open-work ${props.className}`}\n            onClick={() => t.showCard(currentWork.value!.cardId)}\n        >\n            Open work card\n        </button>\n    );\n}\n","import React from \"react\";\nimport { If } from \"../jk/types/jsxControlStatements\";\n\nimport \"./TimeButtons.scss\";\n\ntype Props = {\n    label: React.ReactNode;\n    action: (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        computeNew: (previous: number, parsed: number) => number\n    ) => void;\n    clearAction: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    setLabel?: string;\n    showClear?: boolean;\n    clearLabel?: string;\n    className?: string;\n}\n\nexport function TimeButtons(props: Props) {\n    return (\n        <div className={`time-buttons ${props.className ?? \"\"}`}>\n            <div className='label'>\n                {props.label}\n            </div>\n            <button onClick={e => props.action(e, (_, parsed) => parsed)}>\n                {props.setLabel ?? \"Set\"}\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous + parsed)}>\n                +\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous - parsed)}>\n                -\n            </button>\n            <If condition={props.showClear ?? true}>\n                <button onClick={props.clearAction}>\n                    {props.clearLabel ?? \"Clear\"}\n                </button>\n            </If>\n        </div>\n    );\n}\n","import { CardFunction } from \"./types\";\r\nimport { getLastInputTime, modMyCardWorkInSession } from \"../api/estimateApi\";\r\nimport { getElapsedMinutes } from \"../utils/dateMath\";\r\nimport { formatMinutes } from \"../utils/timeParsing\";\r\n\r\nexport const addTimeSinceLastInputAsWork: CardFunction = {\r\n    isApplicable: async t => Boolean(await getLastInputTime(t)),\r\n    getTitle: async t => {\r\n        const lastInputTime = (await getLastInputTime(t))!;\r\n        const elapsedMinutesSinceLastInput = getElapsedMinutes(lastInputTime);\r\n        return `Add time since last input as work (${formatMinutes(elapsedMinutesSinceLastInput)})`;\r\n    },\r\n    call: async t => {\r\n        const lastInputTime = (await getLastInputTime(t))!;\r\n        const card = await t.card(\"id\");\r\n\r\n        await modMyCardWorkInSession(t, getElapsedMinutes(lastInputTime), card.id);\r\n    },\r\n};\r\n","import { CardFunction } from \"./types\";\r\nimport { getCurrentWork, setCurrentWork, modMyCardWorkInSession } from \"../api/estimateApi\";\r\nimport { getMinutesBetween } from \"../utils/dateMath\";\r\nimport { formatMinutes } from \"../utils/timeParsing\";\r\nimport { getLastExitTime } from \"../utils/exitTime\";\r\nimport { formatDate } from \"../utils/dateFormatting\";\r\n\r\nexport const forgotToEndWork: CardFunction = {\r\n    isApplicable: async t => {\r\n        const lastExitTime = getLastExitTime();\r\n\r\n        if (!lastExitTime)\r\n            return false;\r\n\r\n        const currentWork = await getCurrentWork(t);\r\n\r\n        if (!currentWork?.startDate)\r\n            return false;\r\n\r\n        return lastExitTime > currentWork.startDate;\r\n    },\r\n    getTitle: async t => {\r\n        const currentWork = (await getCurrentWork(t))!;\r\n        const lastExitTime = getLastExitTime()!;\r\n        const elapsedMinutesUntilExit = getMinutesBetween(currentWork.startDate, lastExitTime);\r\n\r\n        return `I forgot to end work before closing (close time: ${formatDate(lastExitTime, \"yyyy-MM-dd hh:mm:ss\")} work: ${formatMinutes(elapsedMinutesUntilExit)})`;\r\n    },\r\n    call: async t => {\r\n        const currentWork = (await getCurrentWork(t))!;\r\n        const lastExitTime = getLastExitTime()!;\r\n        const elapsedMinutesUntilExit = getMinutesBetween(currentWork.startDate, lastExitTime);\r\n\r\n        await modMyCardWorkInSession(t, elapsedMinutesUntilExit, currentWork.cardId);\r\n\r\n        await setCurrentWork(t, null);\r\n    },\r\n};\r\n","import React from \"react\";\nimport { addTimeSinceLastInputAsWork } from \"../card_functions/addTimeSinceLastInputAsWork\";\nimport { forgotToEndWork } from \"../card_functions/forgotToEndWork\";\nimport { CardFunction } from \"../card_functions/types\";\n\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\n\ntype Props = {\n    className?: string;\n    onRefresh?: () => void;\n}\n\nexport function MoreCardFunctionsButton(props: Props) {\n    const t = useProvidedTrello();\n\n    async function addFunctionButtonIfApplicable(items: Trello.PowerUp.PopupOptions[\"items\"], cardFunction: CardFunction) {\n        if (!await cardFunction.isApplicable(t))\n            return;\n\n        items.push({\n            text: await cardFunction.getTitle(t),\n            callback: async tp => {\n                await cardFunction.call(t);\n                props.onRefresh?.();\n                await tp.closePopup();\n            },\n        });\n    }\n\n    return (\n        <button\n            className={`${props.className ?? \"\"}`}\n            onClick={async e => {\n                const items: Trello.PowerUp.PopupOptions[\"items\"] = [];\n\n                await addFunctionButtonIfApplicable(items, addTimeSinceLastInputAsWork);\n                await addFunctionButtonIfApplicable(items, forgotToEndWork);\n\n                t.popup({\n                    title: \"More functions\",\n                    items,\n                    mouseEvent: e.nativeEvent,\n                });\n            }}\n        >\n            &#8943;\n        </button>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { enumerateWork, Estimate, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { formatWorkDelta, getWorkDelta } from \"../utils/workDelta\";\n\ntype Props = {\n    estimate: Estimate,\n    member: Trello.PowerUp.Member,\n}\n\ntype MembersObject = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function WorkDetails(props: Props) {\n    const { estimate, member } = props;\n    const [showDetails, setShowDetails] = useState(false);\n    const [members, setMembers] = useState<MembersObject>();\n\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n    const isCardComplete = dueCompleteQuery.data ?? false;\n\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(\n        currentWork.value?.cardId === card?.id\n            ? currentWork.value?.startDate\n            : undefined,\n    );\n\n    useEffect(\n        () => {\n            if (!showDetails || members !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MembersObject = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMembers(obj);\n            });\n        },\n        [showDetails, members],\n    );\n\n    const totalWork = getTotalWorkMinutes(estimate) + elapsedWorkMinutes;\n    const myWork = elapsedWorkMinutes + estimate.workMinutes[member.id!] ?? 0;\n    const remainingWork = getRemainingWorkMinutes(estimate, isCardComplete, totalWork);\n\n    return (\n        <>\n            <div className='card-label'>\n                Work: {formatMinutes(totalWork)}\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    (mine: {formatMinutes(myWork)})\n                </If>\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    <span\n                        className='work-details link-like'\n                        onClick={() => setShowDetails(current => !current)}\n                    >\n                        details\n                    </span>\n                </If>\n                <If condition={!isCardComplete}>\n                    {\" | \"} Remaining: {formatMinutes(remainingWork)}\n                </If>\n                <If condition={isCardComplete}>\n                    {\" | \"}\n                    {formatWorkDelta({\n                        delta: getWorkDelta({\n                            cardId: card?.id,\n                            estimate,\n                            totalWorkMinutes: totalWork,\n                        }),\n                    })}\n                </If>\n            </div>\n            <If condition={showDetails && members !== undefined}>\n                <div>\n                    {[...enumerateWork(estimate)]\n                        .filter(item => item.minutes > 0)\n                        .map(item => {\n                            const member = members![item.memberId];\n                            return (\n                                <div key={item.memberId}>\n                                    {member?.fullName ?? \"<missing>\"}\n                                    {member && \" \"}\n                                    {member !== undefined ? `(${member.username})` : \"\"}\n                                    {\": \"}\n                                    {formatMinutes(item.minutes)}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </If>\n        </>\n    );\n}\n","import React from \"react\";\n\nimport { getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { UsedEstimate } from \"../hooks/useEstimate\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { formatMinutes, hoursPerDay, parseAndRun } from \"../utils/timeParsing\";\nimport { closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { TimeButtons } from \"./TimeButtons\";\nimport { WorkDetails } from \"./WorkDetails\";\n\ntype Props = {\n    className?: string;\n    estimate: UsedEstimate,\n    inputState: UsedState<string>,\n    member: Trello.PowerUp.Member,\n}\n\nexport function WorkTimeButtons(props: Props) {\n    const { estimate, member } = props;\n    const t = useProvidedTrello();\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    const totalWork = getTotalWorkMinutes(estimate.value);\n    const myWork = estimate.value.workMinutes[member.id!] ?? 0;\n\n    async function runAndUpdateSession(args: {\n        action: () => ReturnType<typeof estimate.set>,\n        mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    }) {\n        const delta = await args.action();\n\n        if (!delta)\n            return;\n\n        const myWorkDelta = delta.workMinutes[member!.id];\n        if (myWorkDelta === undefined)\n            return;\n\n        t.popup({\n            type: \"confirm\",\n            title: \"Add to session?\",\n            message: \"Should this work change count in your work session?\",\n            confirmText: \"Yes\",\n            onConfirm: tp => {\n                tp.closePopup();\n                return closeIfOldAndEditCurrentWorkSession(t, {\n                    action: async session => ({\n                        ...session,\n                        workMinutes: session.workMinutes + myWorkDelta,\n                    }),\n                    hoursPerDay,\n                    mouseEvent: args.mouseEvent,\n                });\n            },\n            cancelText: \"No\",\n            onCancel: tp => tp.closePopup(),\n            mouseEvent: args.mouseEvent.nativeEvent,\n        });\n    }\n\n    return (\n        <TimeButtons\n            label= {<WorkDetails\n                estimate={estimate.value}\n                member={member!}\n            />}\n            action={(e, computeNewWork) => runAndUpdateSession({\n                action: () => parseAndRun(t, props.inputState, parsedMinutes =>\n                    estimate.set(current => ({\n                        ...current,\n                        workMinutes: {\n                            ...current.workMinutes,\n                            [member!.id]: computeNewWork(current.workMinutes[member!.id] ?? 0, parsedMinutes),\n                        },\n                    }))),\n                mouseEvent: e,\n            })}\n            showClear={totalWork > 0}\n            clearAction={e => {\n                t.popup({\n                    type: \"confirm\",\n                    title: \"Clear?\",\n                    message: `Are you sure you want to clear the work (${formatMinutes(totalWork)})?`,\n                    confirmText: \"Yes\",\n                    onConfirm: async tp => {\n                        await runAndUpdateSession({\n                            action: () => estimate.set(current => ({\n                                ...current,\n                                workMinutes: {\n                                    ...current.workMinutes,\n                                    [member!.id]: 0,\n                                },\n                            })),\n                            mouseEvent: e,\n                        });\n                        await tp.closePopup();\n                    },\n                    cancelText: \"No\",\n                    onCancel: tp => tp.closePopup(),\n                    mouseEvent: e.nativeEvent,\n                });\n            }}\n            clearLabel={myWork < totalWork ? \"Clear mine\" : undefined}\n            setLabel={myWork < totalWork ? \"Set mine\" : undefined}\n            className={props.className}\n        />\n    );\n}\n","import React, { useState } from \"react\";\n\nimport \"./CardBackSectionPage.scss\";\nimport { formatMinutes, parseAndRun } from \"../utils/timeParsing\";\nimport { useMember } from \"../hooks/useMember\";\nimport { useEstimate } from \"../hooks/useEstimate\";\nimport { WorkButton } from \"../components/WorkButton\";\nimport { CompleteCardButton } from \"../components/CompleteCardButton\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { OpenWorkCardButton } from \"../components/OpenWorkCardButton\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { useTrelloRender } from \"../hooks/useTrelloRender\";\nimport { TimeButtons } from \"../components/TimeButtons\";\nimport { getUpdatedEstimate } from \"../api/estimateApi\";\nimport { MoreCardFunctionsButton } from \"../components/MoreCardFunctionsButton\";\nimport { WorkTimeButtons } from \"../components/WorkTimeButtons\";\n\nexport default function CardBackSectionPage() {\n    const t = useProvidedTrello();\n    const estimate = useEstimate(t);\n\n    const inputState = useState<string>(\"\");\n    const [inputEstimate, setInputEstimate] = inputState;\n\n    const member = useMember(t, \"id\");\n\n    useTrelloRender(t, estimate.refresh);\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    const hasUpdatedEstimate = estimate.value.updatedEstimateMinutes !== 0\n        && estimate.value.updatedEstimateMinutes !== estimate.value.estimateMinutes;\n\n    return (\n        <div>\n            <div className='card-input-header'>\n                <input\n                    value={inputEstimate}\n                    onChange={e => setInputEstimate(e.target.value)}\n                    placeholder=\"input for all buttons...\"\n                />\n                <WorkButton onEstimateChanged={estimate.refresh} />\n                <div className='top-right'>\n                    <OpenWorkCardButton />\n                    <CompleteCardButton />\n                    <MoreCardFunctionsButton onRefresh={estimate.refresh} />\n                </div>\n            </div>\n            <TimeButtons\n                label={<>\n                    {hasUpdatedEstimate && \"Original \"}\n                    Estimate: {formatMinutes(estimate.value.estimateMinutes)}\n                    <If condition={hasUpdatedEstimate}>\n                        {\" | \"}\n                        Updated: {formatMinutes(estimate.value.updatedEstimateMinutes!)}\n                    </If>\n                </>}\n                action={(e, computeNewEstimate) => parseAndRun(t, inputState, parsedMinutes => {\n                    if (estimate.value!.estimateMinutes === 0 && !hasUpdatedEstimate) {\n                        estimate.set(current => ({\n                            ...current,\n                            estimateMinutes: computeNewEstimate(current.estimateMinutes, parsedMinutes),\n                        }));\n                    }\n                    else {\n                        t.popup({\n                            type: \"confirm\",\n                            title: \"Update estimate?\",\n                            message: \"Do you want to update the estimate or change the original?\",\n                            confirmText: \"Update\",\n                            onConfirm: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    updatedEstimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                }));\n                                return tp.closePopup();\n                            },\n                            cancelText: \"Change original\",\n                            onCancel: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    estimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                    updatedEstimateMinutes: 0,\n                                }));\n                                return tp.closePopup();\n                            },\n                            mouseEvent: e.nativeEvent,\n                        });\n                    }\n                })}\n                clearAction={() => estimate.set(current => ({\n                    ...current,\n                    estimateMinutes: 0,\n                    updatedEstimateMinutes: 0,\n                }))}\n            />\n            <If condition={member !== undefined}>\n                <WorkTimeButtons\n                    estimate={estimate}\n                    member={member!}\n                    inputState={inputState}\n                    className=\"work\"\n                />\n            </If>\n            <If condition={Boolean(estimate.feedback)}>\n                <div>\n                    {estimate.feedback}\n                </div>\n            </If>\n        </div>\n    );\n}\n","import { useState, useMemo } from \"react\";\n\nimport { Estimate, getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\n\nexport function useEstimate(t: Trello.PowerUp.IFrame, autosave = true) {\n    const [estimate, setEstimate] = useState<Estimate>();\n    const [feedback, setFeedback] = useState(\"\");\n\n    const refresh = useMemo(\n        () => async () => {\n            setFeedback(\"loading...\");\n            const fetchedEstimate = await getCardEstimate(t);\n            setEstimate(fetchedEstimate);\n            setFeedback(\"\");\n        },\n        noDeps,\n    );\n\n    const set = useMemo(\n        () => (action: (estimate: Estimate) => Estimate) => {\n            if (estimate === undefined)\n                return;\n\n            const updated = action(estimate);\n\n            const delta: Estimate = {\n                estimateMinutes: updated.estimateMinutes - estimate.estimateMinutes,\n                updatedEstimateMinutes: updated.updatedEstimateMinutes - estimate.updatedEstimateMinutes,\n                workMinutes: {},\n            };\n\n            for (const memberId in updated.workMinutes)\n                delta.workMinutes[memberId] = updated.workMinutes[memberId] - (estimate.workMinutes[memberId] ?? 0);\n\n            if (!autosave)\n                return;\n\n            setFeedback(\"saving...\");\n\n            return getCardEstimate(t)\n                .then(remoteEstimate => {\n                    const updatedRemote: Estimate = {\n                        estimateMinutes: remoteEstimate.estimateMinutes + delta.estimateMinutes,\n                        updatedEstimateMinutes: remoteEstimate.updatedEstimateMinutes + delta.updatedEstimateMinutes,\n                        workMinutes: {},\n                    };\n\n                    for (const memberId in delta.workMinutes)\n                        updatedRemote.workMinutes[memberId] = (remoteEstimate.workMinutes[memberId] ?? 0) + delta.workMinutes[memberId];\n\n                    return setCardEstimate(t, updatedRemote);\n                })\n                .then(updatedRemote => {\n                    setEstimate(updatedRemote);\n                    setFeedback(\"saved!\");\n                    setTimeout(() => setFeedback(\"\"), 1000);\n                    return delta;\n                })\n                .catch(err => {\n                    setFeedback(\"\");\n                    t.alert({\n                        display: \"error\",\n                        message: `error during save: ${err}`,\n                    });\n                });\n        },\n        [estimate, autosave],\n    );\n\n    return useMemo(\n        () => ({\n            value: estimate,\n            set,\n            feedback,\n            refresh,\n        }),\n        [estimate, feedback],\n    );\n}\n\nexport type UsedEstimate = ReturnType<typeof useEstimate>;\n","export type DateFormat =\r\n    \"yyyy-MM-dd\"\r\n    | \"yyyy-MM-dd hh:mm:ss\"\r\n;\r\n\r\nexport function formatDate(date: Date, format: DateFormat = \"yyyy-MM-dd\") {\r\n    return format\r\n        .replaceAll(\"yyyy\", date.getFullYear().toString())\r\n        .replaceAll(\"MM\", (date.getMonth() + 1).toString().padStart(2, \"0\"))\r\n        .replaceAll(\"dd\", date.getDate().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"hh\", date.getHours().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"mm\", date.getMinutes().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"ss\", date.getSeconds().toString().padStart(2, \"0\"));\r\n}\r\n","import { formatDate } from \"./dateFormatting\";\r\n\r\nconst key = \"exit.datetime\";\r\n\r\nexport function addListenerToSaveExitTime() {\r\n    window.addEventListener(\"pagehide\", e => {\r\n        localStorage.setItem(key, JSON.stringify(new Date()));\r\n        // localStorage.setItem(\"pagehide\", JSON.stringify(new Date()));\r\n    });\r\n\r\n    // window.addEventListener(\"visibilitychange\", e => {\r\n    //     localStorage.setItem(\"visibilitychange.\" + document.visibilityState, JSON.stringify(new Date()));\r\n    // });\r\n\r\n    const lastExitTime = getLastExitTime();\r\n    console.log(key + \": \" + (lastExitTime ? formatDate(lastExitTime, \"yyyy-MM-dd hh:mm:ss\") : \"null\"));\r\n}\r\n\r\nexport function getLastExitTime() {\r\n    const saved = JSON.parse(localStorage.getItem(key) as string);\r\n\r\n    if (saved)\r\n        return new Date(saved);\r\n\r\n    return null;\r\n}\r\n","import { Trello } from \"../types/trello\";\nimport { editCurrentWorkSession, getWorkSessions, setWorkSessions, WorkSession } from \"../api/estimateApi\";\nimport { formatMinutesWithOptions, hoursToMs, msToMinutes } from \"./timeParsing\";\nimport { getElapsedMs } from \"./dateMath\";\n\ntype Options = {\n    hoursPerDay: number,\n    mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n}\n\ntype AskOptions = Options & {\n    action?: () => Promise<void>,\n}\n\ntype EditOptions = Options & {\n    action: (session: WorkSession) => Promise<WorkSession>,\n}\n\nexport async function askToCloseOldSession(t: Trello.PowerUp.IFrame, options: AskOptions): Promise<void> {\n    const sessions = await getWorkSessions(t);\n    const current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        return options.action?.();\n\n    const sessionAgeMs = getElapsedMs(current.startDate);\n\n    if (sessionAgeMs < hoursToMs(options.hoursPerDay * 2))\n        return options.action?.();\n\n    const formattedAge = formatMinutesWithOptions(msToMinutes(sessionAgeMs), {\n        hoursPerDay: 24,\n    });\n\n    return new Promise((resolve, reject) => {\n        t.popup({\n            type: \"confirm\",\n            title: \"Close old session?\",\n            message: `The current session looks old (${formattedAge}), do you want to close it and open a new one to save this work?`,\n            confirmText: \"Yes\",\n            onConfirm: async tp => {\n                current.endDate = new Date();\n                await setWorkSessions(t, sessions);\n                resolve(options.action?.());\n                await tp.closePopup();\n            },\n            cancelText: \"No\",\n            onCancel: tp => {\n                resolve(options.action?.());\n                return tp.closePopup();\n            },\n            mouseEvent: options.mouseEvent.nativeEvent,\n        });\n    });\n}\n\nexport function askToCloseOldSessionAndCreateNew(t: Trello.PowerUp.IFrame, options: AskOptions) {\n    return askToCloseOldSession(t, {\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n        action: async () => {\n            // create the new session\n            await editCurrentWorkSession(t, async session => session);\n\n            options.action?.();\n        },\n    });\n}\n\nexport function closeIfOldAndEditCurrentWorkSession(t: Trello.PowerUp.IFrame, options: EditOptions) {\n    return askToCloseOldSession(t, {\n        action: () => editCurrentWorkSession(t, options.action),\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n    });\n}\n"],"names":["truncateString","str","maxLength","length","substring","WorkButton","props","t","useProvidedTrello","currentWork","useCurrentWork","elapsedWorkMinutes","useElapsedMinutes","value","startDate","providedCard","useProvidedCard","workCard","useCardById","cardId","member","useMember","isWorking","undefined","isSaving","className","onClick","async","minutes","Math","round","getElapsedSeconds","set","estimate","getCardEstimate","setCardEstimate","workMinutes","id","closeIfOldAndEditCurrentWorkSession","action","session","addMinutesToDate","hoursPerDay","mouseEvent","e","onEstimateChanged","Date","askToCloseOldSessionAndCreateNew","formatMinutesWithOptions","zero","name","popup","type","title","message","confirmText","onConfirm","tp","closePopup","cancelText","onCancel","nativeEvent","useCardDueCompletedQuery","queryKey","queryClient","useQueryClient","query","useQuery","card","dueComplete","staleTime","setData","useCallback","data","setQueryData","useMemo","useCardWithFunctions","fields","setCard","useState","refresh","fetched","error","console","warn","noDeps","useTrelloRender","useCard","useEffect","cards","c","render","getCurrentWork","minutesToMs","cacheTime","Infinity","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","useTrelloRenderWithOptions","refetch","callImmediately","useInit","listener","currentWorkChangedEvent","useCurrentWorkQuery","setIsSaving","setCurrentWork","updated","useElapsedMs","ms","setMs","animationFrameId","canceled","requestAnimationFrame","updateSeconds","getElapsedMs","cancelAnimationFrame","state","setMember","actualFields","then","res","useProvidedMember","useMemberById","isLazy","memberById","setMemberById","board","obj","m","members","useProvidedMemberById","window","TrelloPowerUp","iframe","appName","process","appKey","options","effect","baseurl","apiKey","updateCardFields","token","key","queryString","Array","from","object","enumerateKeys","join","request","url","method","fetch","headers","Accept","response","json","jsonResponse","CompleteCardButton","dueCompleteQuery","scope","getRestApi","isAuthorized","authorized","Error","catch","authorize","getToken","getAuthorizedRestApi","due","toISOString","ok","err","OpenWorkCardButton","showCard","TimeButtons","label","_","parsed","setLabel","previous","showClear","clearAction","clearLabel","addTimeSinceLastInputAsWork","isApplicable","Boolean","getLastInputTime","getTitle","lastInputTime","elapsedMinutesSinceLastInput","getElapsedMinutes","formatMinutes","call","modMyCardWorkInSession","forgotToEndWork","lastExitTime","getLastExitTime","elapsedMinutesUntilExit","getMinutesBetween","formatDate","MoreCardFunctionsButton","addFunctionButtonIfApplicable","items","cardFunction","push","text","callback","onRefresh","WorkDetails","showDetails","setShowDetails","setMembers","isCardComplete","totalWork","getTotalWorkMinutes","myWork","remainingWork","getRemainingWorkMinutes","current","formatWorkDelta","delta","getWorkDelta","totalWorkMinutes","enumerateWork","filter","item","map","memberId","fullName","username","WorkTimeButtons","feedback","runAndUpdateSession","args","myWorkDelta","computeNewWork","parseAndRun","inputState","parsedMinutes","CardBackSectionPage","autosave","setEstimate","setFeedback","fetchedEstimate","estimateMinutes","updatedEstimateMinutes","remoteEstimate","updatedRemote","setTimeout","alert","display","useEstimate","inputEstimate","setInputEstimate","hasUpdatedEstimate","onChange","target","placeholder","computeNewEstimate","getUpdatedEstimate","date","format","replaceAll","getFullYear","toString","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","addListenerToSaveExitTime","addEventListener","localStorage","setItem","JSON","stringify","log","saved","parse","getItem","askToCloseOldSession","sessions","getWorkSessions","endDate","sessionAgeMs","hoursToMs","formattedAge","msToMinutes","Promise","resolve","reject","setWorkSessions","editCurrentWorkSession"],"sourceRoot":""}