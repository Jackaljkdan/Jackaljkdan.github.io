{"version":3,"file":"static/js/132.5ad4b416.chunk.js","mappings":"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","sources":["utils/object.ts","utils/trelloRest.ts","utils/fetch.ts","components/CompleteCardButton.tsx","components/OpenWorkCardButton.tsx","components/WorkDetails.tsx","components/TimeButtons.tsx","pages/CardBackSectionPage.tsx","hooks/useEstimate.ts"],"sourcesContent":["export function* enumerateKeys<T>(object: T): Generator<keyof T> {\n    for (const key in object)\n        yield key;\n}\n","import { Trello } from \"../types/trello\";\nimport { fetchJson } from \"./fetch\";\nimport { enumerateKeys } from \"./object\";\n\nconst baseurl = \"https://api.trello.com/1\";\n\nconst apiKey = process.env.REACT_APP_POWERUP_APP_KEY;\n\nexport function getAuthorizedRestApi(t: Trello.PowerUp.IFrame, scope: Trello.PowerUp.AllPermissions = \"read,write\") {\n    return t.getRestApi()\n        .isAuthorized()\n        .then(authorized => {\n            if (authorized)\n                return;\n            else\n                throw new Error(\"unauthorized\");\n        })\n        .catch(() => {\n            return t.getRestApi().authorize({\n                scope,\n            });\n        })\n        .then(() => {\n            return t.getRestApi().getToken();\n        });\n}\n\nexport function getCardFields(token: string, cardId: string, ...fields: [\"all\"] | (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"all\"];\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?fields=${fields.join(\",\")}&key=${apiKey}&token=${token}`,\n        method: \"GET\",\n    });\n}\n\nexport type EditableCard = Partial<Omit<Trello.PowerUp.Card, \"id\" | \"idShort\" | \"url\">>;\n\nexport function updateCardFields(token: string, cardId: string, fields: EditableCard) {\n    const query = {\n        ...fields,\n        key: apiKey,\n        token: token,\n    };\n\n    const queryString = Array.from(enumerateKeys(query), key => key + \"=\" + query[key]).join(\"&\");\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?${queryString}`,\n        method: \"PUT\",\n    });\n}\n","export type Request = RequestInit & {\n    url: RequestInfo | URL;\n}\n\nexport type JsonResponse<T> = Response & {\n    data: T;\n    request: Request\n}\n\nexport function fetchJson<T>(request: Request): Promise<JsonResponse<T>> {\n    return fetch(request.url, {\n        ...request,\n        headers: {\n            Accept: \"application/json\",\n            ...request?.headers,\n        },\n    })\n        .then(response => {\n            return response.json().then(json => ({\n                ...response,\n                data: json as T,\n                request: request,\n            }));\n        });\n}\n","import React from \"react\";\n\nimport { useCardWithRefresh } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { getAuthorizedRestApi, updateCardFields } from \"../utils/trelloRest\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function CompleteCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const { card, refresh } = useCardWithRefresh(t, \"id\", \"due\", \"dueComplete\");\n\n    return (\n        <button\n            className={`complete-work ${props.className}`}\n            onClick={() => {\n                if (card === undefined)\n                    return;\n\n                getAuthorizedRestApi(t)\n                    .then(token =>\n                        updateCardFields(token, card.id, {\n                            due: card.dueComplete\n                                ? null\n                                : card.due\n                                    ? card.due\n                                    : new Date().toISOString(),\n                            dueComplete: !card.dueComplete,\n                        }))\n                    .catch(err => {\n                        console.error(err);\n                    })\n                    .then(refresh);\n            }}\n        >\n            <If condition={card === undefined}>\n                loading...\n            </If>\n            <If condition={card !== undefined}>\n                <If condition={card!.dueComplete}>\n                    Uncomplete card\n                </If>\n                <If condition={!card!.dueComplete}>\n                    Complete card\n                </If>\n            </If>\n        </button>\n    );\n}\n","import React from \"react\";\nimport { useCard } from \"../hooks/useCard\";\n\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function OpenWorkCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const card = useCard(t, \"id\");\n\n    if (currentWork.value?.cardId === undefined)\n        return null;\n\n    if (card === undefined || currentWork.value.cardId === card.id)\n        return null;\n\n    return (\n        <button\n            className={`open-work ${props.className}`}\n            onClick={() => t.showCard(currentWork.value!.cardId)}\n        >\n            Open work card\n        </button>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { enumerateWork, Estimate, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { useCard } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { formatWorkDelta, getWorkDelta } from \"../utils/workDelta\";\n\ntype Props = {\n    estimate: Estimate,\n    member: Trello.PowerUp.Member,\n}\n\ntype MembersObject = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function WorkDetails(props: Props) {\n    const { estimate, member } = props;\n    const [showDetails, setShowDetails] = useState(false);\n    const [members, setMembers] = useState<MembersObject>();\n\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\", \"dueComplete\");\n    const isCardComplete = card?.dueComplete ?? false;\n\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(\n        currentWork.value?.cardId === card?.id\n            ? currentWork.value?.startDate\n            : undefined,\n    );\n\n    useEffect(\n        () => {\n            if (!showDetails || members !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MembersObject = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMembers(obj);\n            });\n        },\n        [showDetails, members],\n    );\n\n    const totalWork = getTotalWorkMinutes(estimate) + elapsedWorkMinutes;\n    const myWork = elapsedWorkMinutes + estimate.workMinutes[member.id!] ?? 0;\n    const remainingWork = getRemainingWorkMinutes(estimate, isCardComplete, totalWork);\n\n    return (\n        <>\n            <div className='card-label'>\n                Work: {formatMinutes(totalWork)}\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    (mine: {formatMinutes(myWork)})\n                </If>\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    <span\n                        className='work-details link-like'\n                        onClick={() => setShowDetails(current => !current)}\n                    >\n                        details\n                    </span>\n                </If>\n                <If condition={!isCardComplete}>\n                    {\" | \"} Remaining: {formatMinutes(remainingWork)}\n                </If>\n                <If condition={isCardComplete}>\n                    {\" | \"}\n                    {formatWorkDelta({\n                        delta: getWorkDelta({\n                            cardId: card?.id,\n                            estimate,\n                            totalWorkMinutes: totalWork,\n                        }),\n                    })}\n                </If>\n            </div>\n            <If condition={showDetails && members !== undefined}>\n                <div>\n                    {[...enumerateWork(estimate)]\n                        .filter(item => item.minutes > 0)\n                        .map(item => {\n                            const member = members![item.memberId];\n                            return (\n                                <div key={item.memberId}>\n                                    {member?.fullName ?? \"<missing>\"}\n                                    {member && \" \"}\n                                    {member !== undefined ? `(${member.username})` : \"\"}\n                                    {\": \"}\n                                    {formatMinutes(item.minutes)}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </If>\n        </>\n    );\n}\n","import React from \"react\";\n\nimport \"./TimeButtons.scss\";\n\ntype Props = {\n    label: React.ReactNode;\n    action: (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        computeNew: (previous: number, parsed: number) => number\n    ) => void;\n    clearAction: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    setLabel?: string;\n    clearLabel?: string;\n    className?: string;\n}\n\nexport function TimeButtons(props: Props) {\n    return (\n        <div className={`time-buttons ${props.className ?? \"\"}`}>\n            <div className='label'>\n                {props.label}\n            </div>\n            <button onClick={e => props.action(e, (_, parsed) => parsed)}>\n                {props.setLabel ?? \"Set\"}\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous + parsed)}>\n                +\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous - parsed)}>\n                -\n            </button>\n            <button onClick={props.clearAction}>\n                {props.clearLabel ?? \"Clear\"}\n            </button>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\n\nimport \"./CardBackSectionPage.scss\";\nimport { formatMinutes, hoursPerDay, parseTimeDelta } from \"../utils/timeParsing\";\nimport { useMember } from \"../hooks/useMember\";\nimport { useEstimate } from \"../hooks/useEstimate\";\nimport { WorkButton } from \"../components/WorkButton\";\nimport { CompleteCardButton } from \"../components/CompleteCardButton\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { OpenWorkCardButton } from \"../components/OpenWorkCardButton\";\nimport { closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { WorkDetails } from \"../components/WorkDetails\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { useTrelloRender } from \"../hooks/useTrelloRender\";\nimport { TimeButtons } from \"../components/TimeButtons\";\nimport { getUpdatedEstimate } from \"../api/estimateApi\";\n\nexport default function CardBackSectionPage() {\n    const t = useProvidedTrello();\n    const estimate = useEstimate(t);\n    const [inputEstimate, setInputEstimate] = useState<string>(\"\");\n    const member = useMember(t, \"id\");\n\n    useTrelloRender(t, estimate.refresh);\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    function parseAndRun<T>(action: (parsedMinutes: number) => T) {\n        const parsedMinutes = parseTimeDelta(inputEstimate);\n\n        if (isNaN(parsedMinutes)) {\n            t.alert({\n                display: \"error\",\n                message: \"invalid input\",\n                duration: 4,\n            });\n            return;\n        }\n\n        const val = action(parsedMinutes);\n\n        setInputEstimate(\"\");\n\n        return val;\n    }\n\n    function parseAndChangeWork(computeNewWork: (previousMinutes: number, parsedMinutes: number) => number) {\n        return parseAndRun(parsedMinutes =>\n            estimate.set(current => ({\n                ...current,\n                workMinutes: {\n                    ...current.workMinutes,\n                    [member!.id]: computeNewWork(current.workMinutes[member!.id] ?? 0, parsedMinutes),\n                },\n            })));\n    }\n\n    async function runAndUpdateSession(args: {\n        action: () => ReturnType<typeof estimate.set>,\n        mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    }) {\n        const delta = await args.action();\n\n        if (!delta)\n            return;\n\n        const myWorkDelta = delta.workMinutes[member!.id];\n        if (myWorkDelta === undefined)\n            return;\n\n        t.popup({\n            type: \"confirm\",\n            title: \"Add to session?\",\n            message: \"Should this work change count in your work session?\",\n            confirmText: \"Yes\",\n            onConfirm: tp => {\n                tp.closePopup();\n                return closeIfOldAndEditCurrentWorkSession(t, {\n                    action: async session => ({\n                        ...session,\n                        workMinutes: session.workMinutes + myWorkDelta,\n                    }),\n                    hoursPerDay,\n                    mouseEvent: args.mouseEvent,\n                });\n            },\n            cancelText: \"No\",\n            onCancel: tp => tp.closePopup(),\n            mouseEvent: args.mouseEvent.nativeEvent,\n        });\n    }\n\n    const hasUpdatedEstimate = estimate.value.updatedEstimateMinutes !== 0\n        && estimate.value.updatedEstimateMinutes !== estimate.value.estimateMinutes;\n\n    return (\n        <div>\n            <div className='card-input-header'>\n                <input\n                    value={inputEstimate}\n                    onChange={e => setInputEstimate(e.target.value)}\n                    placeholder=\"input for all buttons...\"\n                />\n                <WorkButton onEstimateChanged={estimate.refresh} />\n                <div className='top-right'>\n                    <OpenWorkCardButton />\n                    <CompleteCardButton />\n                </div>\n            </div>\n            <TimeButtons\n                label={<>\n                    {hasUpdatedEstimate && \"Original \"}\n                    Estimate: {formatMinutes(estimate.value.estimateMinutes)}\n                    <If condition={hasUpdatedEstimate}>\n                        {\" | \"}\n                        Updated: {formatMinutes(estimate.value.updatedEstimateMinutes!)}\n                    </If>\n                </>}\n                action={(e, computeNewEstimate) => parseAndRun(parsedMinutes => {\n                    if (estimate.value!.estimateMinutes === 0 && !hasUpdatedEstimate) {\n                        estimate.set(current => ({\n                            ...current,\n                            estimateMinutes: computeNewEstimate(current.estimateMinutes, parsedMinutes),\n                        }));\n                    }\n                    else {\n                        t.popup({\n                            type: \"confirm\",\n                            title: \"Update estimate?\",\n                            message: \"Do you want to update the estimate or change the original?\",\n                            confirmText: \"Update\",\n                            onConfirm: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    updatedEstimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                }));\n                                return tp.closePopup();\n                            },\n                            cancelText: \"Change original\",\n                            onCancel: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    estimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                    updatedEstimateMinutes: 0,\n                                }));\n                                return tp.closePopup();\n                            },\n                            mouseEvent: e.nativeEvent,\n                        });\n                    }\n                })}\n                clearAction={() => estimate.set(current => ({\n                    ...current,\n                    estimateMinutes: 0,\n                    updatedEstimateMinutes: 0,\n                }))}\n            />\n            <If condition={member !== undefined}>\n                <TimeButtons\n                    label= {<WorkDetails\n                        estimate={estimate.value}\n                        member={member!}\n                    />}\n                    action={(e, computeNewWork) => runAndUpdateSession({\n                        action: () => parseAndChangeWork(computeNewWork),\n                        mouseEvent: e,\n                    })}\n                    clearAction={e => runAndUpdateSession({\n                        action: () => estimate.set(current => ({\n                            ...current,\n                            workMinutes: {\n                                ...current.workMinutes,\n                                [member!.id]: 0,\n                            },\n                        })),\n                        mouseEvent: e,\n                    })}\n                    clearLabel=\"Clear mine\"\n                    className=\"work\"\n                />\n            </If>\n            <If condition={Boolean(estimate.feedback)}>\n                <div>\n                    {estimate.feedback}\n                </div>\n            </If>\n        </div>\n    );\n}\n","import { useState, useMemo } from \"react\";\n\nimport { Estimate, getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\n\nexport function useEstimate(t: Trello.PowerUp.IFrame, autosave = true) {\n    const [estimate, setEstimate] = useState<Estimate>();\n    const [feedback, setFeedback] = useState(\"\");\n\n    const refresh = useMemo(\n        () => async () => {\n            setFeedback(\"loading...\");\n            const fetchedEstimate = await getCardEstimate(t);\n            setEstimate(fetchedEstimate);\n            setFeedback(\"\");\n        },\n        noDeps,\n    );\n\n    const set = useMemo(\n        () => (action: (estimate: Estimate) => Estimate) => {\n            if (estimate === undefined)\n                return;\n\n            const updated = action(estimate);\n\n            const delta: Estimate = {\n                estimateMinutes: updated.estimateMinutes - estimate.estimateMinutes,\n                updatedEstimateMinutes: updated.updatedEstimateMinutes - estimate.updatedEstimateMinutes,\n                workMinutes: {},\n            };\n\n            for (const memberId in updated.workMinutes)\n                delta.workMinutes[memberId] = updated.workMinutes[memberId] - (estimate.workMinutes[memberId] ?? 0);\n\n            if (!autosave)\n                return;\n\n            setFeedback(\"saving...\");\n\n            return getCardEstimate(t)\n                .then(remoteEstimate => {\n                    const updatedRemote: Estimate = {\n                        estimateMinutes: remoteEstimate.estimateMinutes + delta.estimateMinutes,\n                        updatedEstimateMinutes: remoteEstimate.updatedEstimateMinutes + delta.updatedEstimateMinutes,\n                        workMinutes: {},\n                    };\n\n                    for (const memberId in delta.workMinutes)\n                        updatedRemote.workMinutes[memberId] = (remoteEstimate.workMinutes[memberId] ?? 0) + delta.workMinutes[memberId];\n\n                    return setCardEstimate(t, updatedRemote);\n                })\n                .then(updatedRemote => {\n                    setEstimate(updatedRemote);\n                    setFeedback(\"saved!\");\n                    setTimeout(() => setFeedback(\"\"), 1000);\n                    return delta;\n                })\n                .catch(err => {\n                    setFeedback(\"\");\n                    t.alert({\n                        display: \"error\",\n                        message: `error during save: ${err}`,\n                    });\n                });\n        },\n        [estimate, autosave],\n    );\n\n    return useMemo(\n        () => ({\n            value: estimate,\n            set,\n            feedback,\n            refresh,\n        }),\n        [estimate, feedback],\n    );\n}\n\nexport type UsedEstimate = ReturnType<typeof useEstimate>;\n"],"names":["enumerateKeys","object","key","baseurl","apiKey","process","updateCardFields","token","cardId","fields","request","query","queryString","Array","from","join","url","method","fetch","headers","Accept","then","response","json","data","CompleteCardButton","props","t","useProvidedTrello","useCardWithRefresh","card","refresh","className","onClick","undefined","scope","getRestApi","isAuthorized","authorized","Error","catch","authorize","getToken","getAuthorizedRestApi","id","due","dueComplete","Date","toISOString","err","console","error","OpenWorkCardButton","currentWork","useCurrentWork","useCard","value","showCard","WorkDetails","estimate","member","useState","showDetails","setShowDetails","members","setMembers","isCardComplete","elapsedWorkMinutes","useElapsedMinutes","startDate","useEffect","board","res","obj","m","totalWork","getTotalWorkMinutes","myWork","workMinutes","remainingWork","getRemainingWorkMinutes","formatMinutes","current","formatWorkDelta","delta","getWorkDelta","totalWorkMinutes","enumerateWork","filter","item","minutes","map","memberId","fullName","username","TimeButtons","label","e","action","_","parsed","setLabel","previous","clearAction","clearLabel","CardBackSectionPage","autosave","setEstimate","feedback","setFeedback","useMemo","getCardEstimate","fetchedEstimate","noDeps","set","updated","estimateMinutes","updatedEstimateMinutes","remoteEstimate","updatedRemote","setCardEstimate","setTimeout","alert","display","message","useEstimate","inputEstimate","setInputEstimate","useMember","useTrelloRender","parseAndRun","parsedMinutes","parseTimeDelta","isNaN","val","duration","runAndUpdateSession","args","myWorkDelta","popup","type","title","confirmText","onConfirm","tp","closePopup","closeIfOldAndEditCurrentWorkSession","session","hoursPerDay","mouseEvent","cancelText","onCancel","nativeEvent","hasUpdatedEstimate","onChange","target","placeholder","WorkButton","onEstimateChanged","computeNewEstimate","getUpdatedEstimate","computeNewWork","parseAndChangeWork","Boolean"],"sourceRoot":""}