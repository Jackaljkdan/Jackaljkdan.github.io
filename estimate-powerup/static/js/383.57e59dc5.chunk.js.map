{"version":3,"file":"static/js/383.57e59dc5.chunk.js","mappings":"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","sources":["components/SummaryWorkDetails.tsx","components/SummaryDetail.tsx","hooks/useCurrentWork.ts","hooks/useElapsed.ts","hooks/useElapsingSummary.ts","hooks/useMember.ts","hooks/useProvidedTrello.ts","hooks/useTrelloRender.ts","jk/hooks/useInit.ts","jk/noDeps.ts","pages/ListSummaryPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { SummaryEstimate, enumerateWorkSummary } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { useProvidedMemberById } from \"../hooks/useMember\";\n\ntype Props = {\n    className?: string,\n    summary: SummaryEstimate,\n}\n\nexport function SummaryWorkDetails(props: Props) {\n    const summary = props.summary;\n\n    const [showWorkDetails, setShowWorkDetails] = useState(false);\n    const memberById = useProvidedMemberById(showWorkDetails);\n\n    return (\n        <div className={`${props.className ?? \"\"}`}>\n            <If condition={summary.workMinutes > 0}>\n                <span\n                    className='work-details link-like'\n                    onClick={() => setShowWorkDetails(current => !current)}\n                >\n                    details\n                </span>\n            </If>\n            <If condition={showWorkDetails && memberById !== undefined}>\n                {[...enumerateWorkSummary(summary)]\n                    .filter(item => item.minutes > 0)\n                    .map(item => {\n                        const member = memberById![item.memberId];\n                        return (\n                            <div key={item.memberId}>\n                                {member?.fullName ?? \"<missing>\"}\n                                <If condition={member !== undefined}>\n                                    {\" \"} ({member.username})\n                                </If>\n                                {\": \"}\n                                {formatMinutes(item.minutes)}\n                            </div>\n                        );\n                    })\n                }\n            </If>\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport { SummaryEstimate } from \"../api/estimateApi\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { formatWorkDelta } from \"../utils/workDelta\";\nimport { useProvidedMember } from \"../hooks/useMember\";\nimport { SummaryWorkDetails } from \"./SummaryWorkDetails\";\nimport { useElapsingSummary } from \"../hooks/useElapsingSummary\";\n\ntype Props = {\n    className?: string,\n    summary: SummaryEstimate,\n    margin?: number,\n}\n\nexport function SummaryDetail(props: Props) {\n    const summary = props.summary;\n    const member = useProvidedMember(\"id\");\n    const elapsingSummary = useElapsingSummary(summary);\n\n    if (!member)\n        return null;\n\n    const marginMinutes = (props.margin ?? 0) > 0\n        ? props.margin! * summary.estimateMinutes\n        : 0\n        ;\n\n    const usedMarginMinutes = marginMinutes > 0 && elapsingSummary.deltaMinutes < 0\n        ? Math.min(- elapsingSummary.deltaMinutes, marginMinutes)\n        : 0\n        ;\n\n    const remainingMarginMinutes = marginMinutes - usedMarginMinutes;\n\n    const hasUpdatedEstimate = elapsingSummary.updatedEstimateMinutes > 0\n        && elapsingSummary.updatedEstimateMinutes !== elapsingSummary.estimateMinutes\n        ;\n\n    return (\n        <div className={props.className}>\n            <div>\n                {hasUpdatedEstimate && \"Original \"}\n                Estimate: {formatMinutes(elapsingSummary.estimateMinutes + marginMinutes)}\n                <If condition={marginMinutes > 0}>\n                    {\" \"} (without margin: {formatMinutes(elapsingSummary.estimateMinutes)})\n                </If>\n            </div>\n            <If condition={hasUpdatedEstimate}>\n                <div>\n                    Updated Estimate: {formatMinutes(elapsingSummary.updatedEstimateMinutes + remainingMarginMinutes)}\n                </div>\n            </If>\n            <div className=\"flex\">\n                Work: {formatMinutes(elapsingSummary.workMinutes)}\n                {\" \"}\n                <SummaryWorkDetails\n                    className=\"ml-2\"\n                    summary={elapsingSummary}\n                />\n            </div>\n            <div>\n                Remaining: {formatMinutes(elapsingSummary.remainingMinutes + remainingMarginMinutes)}\n                <If condition={marginMinutes > 0 && remainingMarginMinutes > 0}>\n                    {\" \"} (without margin: {formatMinutes(elapsingSummary.remainingMinutes)})\n                </If>\n                <If condition={remainingMarginMinutes === 0}>\n                    {\" \"} (no margin left)\n                </If>\n            </div>\n            <div>\n                {formatWorkDelta({\n                    delta: summary.deltaMinutes >= 0\n                        ? summary.deltaMinutes\n                        : summary.deltaMinutes + Math.min(-summary.deltaMinutes, remainingMarginMinutes),\n                })}\n                <If condition={usedMarginMinutes > 0}>\n                    <If condition={remainingMarginMinutes > 0}>\n                        {\" \"} (without margin {formatWorkDelta({ delta: summary.deltaMinutes })})\n                    </If>\n                    <If condition={remainingMarginMinutes === 0}>\n                        {\" \"} (no margin left)\n                    </If>\n                </If>\n            </div>\n        </div>\n    );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { CurrentWork, getCurrentWork, setCurrentWork } from \"../api/estimateApi\";\nimport { currentWorkChangedEvent } from \"../api/events/apiEvents\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { Trello } from \"../types/trello\";\nimport { minutesToMs } from \"../utils/timeParsing\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRenderWithOptions } from \"./useTrelloRender\";\n\nconst queryKey = \"current_work\";\n\nexport function useCurrentWorkQuery(t: Trello.PowerUp.IFrame) {\n    // N.B. la query sembra che non venga cachata, penso che il motivo sia che\n    // ogni volta che viene aperta una scheda viene avviata una nuova\n    // istanza di react\n    const query = useQuery(\n        queryKey,\n        () => getCurrentWork(t),\n        {\n            staleTime: minutesToMs(2),\n            cacheTime: Infinity,\n            refetchOnMount: false,\n            refetchOnReconnect: false,\n            refetchOnWindowFocus: false,\n        },\n    );\n\n    useTrelloRenderWithOptions(t, {\n        refresh: query.refetch,\n        callImmediately: false,\n    });\n\n    useInit(() => {\n        const listener = currentWorkChangedEvent.on(query.refetch as any);\n        return () => currentWorkChangedEvent.off(listener) as any;\n    });\n\n    return query;\n}\n\nexport function useCurrentWork() {\n    const t = useProvidedTrello();\n    const queryClient = useQueryClient();\n    const query = useCurrentWorkQuery(t);\n    const [isSaving, setIsSaving] = useState(false);\n\n    // console.log(\"query stale: \" + query.isStale);\n\n    const set = useCallback(\n        async (updated: CurrentWork | null) => {\n            setIsSaving(true);\n            await setCurrentWork(t, updated);\n            // console.log(\"setting query data\");\n            queryClient.setQueryData(queryKey, updated);\n            setIsSaving(false);\n        },\n        [t, queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            value: query.data,\n            isSaving,\n            set,\n        }),\n        [query.data, isSaving, set],\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport { getElapsedMs } from \"../utils/dateMath\";\n\nexport function useElapsedMinutes(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000 / 60;\n}\n\nexport function useElapsedSeconds(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000;\n}\n\nexport function useElapsedMs(startDate: Date | undefined) {\n    const [ms, setMs] = useState(0);\n\n    useEffect(\n        () => {\n            if (startDate === undefined) {\n                setMs(0);\n                return;\n            }\n\n            let animationFrameId: number;\n            let canceled = false;\n\n            function updateSeconds() {\n                setMs(getElapsedMs(startDate!));\n\n                if (!canceled)\n                    animationFrameId = requestAnimationFrame(updateSeconds);\n            }\n\n            animationFrameId = requestAnimationFrame(updateSeconds);\n\n            return () => {\n                canceled = true;\n                cancelAnimationFrame(animationFrameId);\n            };\n        },\n        [startDate],\n    );\n\n    return ms;\n}\n","import { SummaryEstimate } from \"../api/estimateApi\";\nimport { useCurrentWork } from \"./useCurrentWork\";\nimport { useElapsedMinutes } from \"./useElapsed\";\nimport { useProvidedMember } from \"./useMember\";\n\nexport function useElapsingSummary(summary: SummaryEstimate) {\n    const member = useProvidedMember();\n    const currentWork = useCurrentWork();\n    const myElapsedWorkMinutes = useElapsedMinutes(currentWork.value?.startDate);\n\n    const elapsingSummary: SummaryEstimate = {\n        estimateMinutes: summary.estimateMinutes,\n        updatedEstimateMinutes: summary.updatedEstimateMinutes,\n        workMinutes: summary.workMinutes + myElapsedWorkMinutes,\n        workMinutesByMember: { ...summary.workMinutesByMember },\n        remainingMinutes: summary.remainingMinutes - myElapsedWorkMinutes,\n        deltaMinutes: summary.deltaMinutes,\n    };\n\n    if (member != undefined) {\n        elapsingSummary.workMinutesByMember[member.id] = (\n            (summary.workMinutesByMember[member.id] ?? 0)\n            + myElapsedWorkMinutes\n        );\n    }\n\n    return elapsingSummary;\n}\n","import { useEffect, useState } from \"react\";\n\nimport { Trello } from \"../types/trello\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport function useMember(t: Trello.PowerUp.IFrame, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const state = useState<Trello.PowerUp.Member>();\n    const [member, setMember] = state;\n\n    useEffect(\n        () => {\n            const actualFields = fields !== undefined && fields.length > 0\n                ? fields\n                : [\"id\"] as Trello.PowerUp.MemberFields[];\n            t.member(...actualFields).then(res => setMember(res));\n        },\n        [t],\n    );\n\n    return member;\n}\n\nexport function useProvidedMember(...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const t = useProvidedTrello();\n    return useMember(t, ...fields);\n}\n\nexport type MemberById = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function useMemberById(t: Trello.PowerUp.IFrame, isLazy = true, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const [memberById, setMemberById] = useState<MemberById>();\n\n    useEffect(\n        () => {\n            if (isLazy || memberById !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MemberById = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMemberById(obj);\n            });\n        },\n        [t, isLazy, memberById],\n    );\n\n    return memberById;\n}\n\nexport function useProvidedMemberById(isLazy = true, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const t = useProvidedTrello();\n    return useMemberById(t, isLazy, ...fields);\n}\n","import { Trello } from \"../types/trello\";\n\nlet t: Trello.PowerUp.IFrame;\n\nexport function useProvidedTrello() {\n    if (t === undefined) {\n        t = window.TrelloPowerUp.iframe({\n            appName: process.env.REACT_APP_POWERUP_NAME,\n            appKey: process.env.REACT_APP_POWERUP_APP_KEY,\n        });\n    }\n\n    return t;\n}\n","import { Trello } from \"../types/trello\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport type TrelloRenderOptions = {\n    refresh: () => void;\n    callImmediately?: boolean;\n}\n\nexport function useTrelloRenderWithOptions(t: Trello.PowerUp.IFrame, options: TrelloRenderOptions) {\n    useInit(() => {\n        if (options.callImmediately)\n            options.refresh();\n        t.render(options.refresh);\n    });\n}\n\nexport function useTrelloRender(t: Trello.PowerUp.IFrame, refresh: () => void) {\n    return useTrelloRenderWithOptions(t, {\n        refresh,\n        callImmediately: true,\n    });\n}\n\nexport function useProvidedTrelloRender(refresh: () => void) {\n    const t = useProvidedTrello();\n    return useTrelloRender(t, refresh);\n}\n","import React, { useEffect } from \"react\";\nimport { noDeps } from \"../noDeps\";\n\nexport function useInit(effect: React.EffectCallback) {\n    return useEffect(effect, noDeps);\n}\n","export const noDeps = [];\n","import React, { useState } from \"react\";\r\n\r\nimport { getListEstimates, SummaryEstimate } from \"../api/estimateApi\";\r\nimport { SummaryDetail } from \"../components/SummaryDetail\";\r\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\r\nimport { useInit } from \"../jk/hooks/useInit\";\r\n\r\nexport default function ListSummaryPage() {\r\n    const t = useProvidedTrello();\r\n\r\n    const [listName, setListName] = useState(\"\");\r\n    const [summary, setSummary] = useState<SummaryEstimate>();\r\n\r\n    useInit(() => {\r\n        (async () => {\r\n            const trelloList = await t.list(\"id\", \"name\");\r\n            setListName(trelloList.name);\r\n            const listSummary = await getListEstimates(t);\r\n            setSummary(listSummary);\r\n        })();\r\n    });\r\n\r\n    if (!summary)\r\n        return (<div>Loading...</div>);\r\n\r\n    return (\r\n        <div>\r\n            <p>\r\n                Summary for list: {listName}\r\n            </p>\r\n            <SummaryDetail summary={summary} />\r\n        </div>\r\n    );\r\n}\r\n"],"names":["SummaryWorkDetails","props","summary","showWorkDetails","setShowWorkDetails","useState","memberById","useProvidedMemberById","className","workMinutes","onClick","current","undefined","enumerateWorkSummary","filter","item","minutes","map","member","memberId","fullName","username","formatMinutes","SummaryDetail","useProvidedMember","elapsingSummary","useElapsingSummary","marginMinutes","margin","estimateMinutes","usedMarginMinutes","deltaMinutes","Math","min","remainingMarginMinutes","hasUpdatedEstimate","updatedEstimateMinutes","remainingMinutes","formatWorkDelta","delta","queryKey","useCurrentWork","t","useProvidedTrello","queryClient","useQueryClient","query","useQuery","getCurrentWork","staleTime","minutesToMs","cacheTime","Infinity","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","useTrelloRenderWithOptions","refresh","refetch","callImmediately","useInit","listener","currentWorkChangedEvent","useCurrentWorkQuery","isSaving","setIsSaving","set","useCallback","async","setCurrentWork","updated","setQueryData","useMemo","value","data","useElapsedMinutes","startDate","useElapsedMs","ms","setMs","useEffect","animationFrameId","canceled","requestAnimationFrame","updateSeconds","getElapsedMs","cancelAnimationFrame","currentWork","myElapsedWorkMinutes","workMinutesByMember","id","useMember","fields","state","setMember","actualFields","length","then","res","useMemberById","isLazy","setMemberById","board","obj","m","members","window","TrelloPowerUp","iframe","appName","process","appKey","options","render","useTrelloRender","effect","noDeps","ListSummaryPage","listName","setListName","setSummary","trelloList","list","name","listSummary","getListEstimates"],"sourceRoot":""}