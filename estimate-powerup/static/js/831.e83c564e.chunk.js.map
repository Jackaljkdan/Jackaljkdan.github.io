{"version":3,"file":"static/js/831.e83c564e.chunk.js","mappings":"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","sources":["api/estimateApi.ts","components/ServedFrom.tsx","components/Version.tsx","components/DeployInfo.tsx","capabilities/cardBadgesCapability.ts","capabilities/capabilitiesInitilizer.ts","capabilities/boardButtonCapability.ts","capabilities/cardBackSectionCapability.ts","pages/CapabilitiesInitializerPage.tsx","pages/IndexPage.tsx","router/components/AppLink.tsx","router/routePathUrl.ts","utils/dateMath.ts","utils/mathParsing.ts","utils/timeParsing.ts","utils/urlUtils.ts","utils/workDelta.ts"],"sourcesContent":["import { Trello } from \"../types/trello\";\n\nexport type UserMinutes = {\n    [key: string]: number,\n}\n\nexport type Estimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: UserMinutes,\n}\n\nexport type SummaryEstimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: number,\n    remainingMinutes: number,\n    deltaMinutes: number,\n}\n\nexport type CurrentWork = {\n    cardId: string,\n    startDate: Date,\n}\n\nexport type WorkSession = {\n    startDate: Date,\n    endDate?: Date,\n    workMinutes: number,\n}\n\nexport async function getMyWorkMinutes(estimate: Estimate, t: Trello.PowerUp.IFrame): Promise<number> {\n    const me = await t.member(\"id\");\n    return estimate.workMinutes[me.id];\n}\n\nexport function getTotalWorkMinutes(estimate: Estimate) {\n    let sum = 0;\n    for (const workerId in estimate.workMinutes)\n        sum += estimate.workMinutes[workerId];\n    return sum;\n}\n\nexport function getRemainingWorkMinutes(estimate: Estimate, dueComplete: boolean, totalWorkMinutes?: number) {\n    if (dueComplete)\n        return 0;\n\n    if (totalWorkMinutes === undefined)\n        totalWorkMinutes = getTotalWorkMinutes(estimate);\n\n    return (estimate.updatedEstimateMinutes || estimate.estimateMinutes) - totalWorkMinutes;\n}\n\nexport function* enumerateWork(estimate: Estimate) {\n    for (const memberId in estimate.workMinutes) {\n        yield {\n            memberId,\n            minutes: estimate.workMinutes[memberId],\n        };\n    }\n}\n\nexport function getUpdatedEstimate(estimate: Estimate) {\n    if (estimate.updatedEstimateMinutes !== 0)\n        return estimate.updatedEstimateMinutes;\n    else\n        return estimate.estimateMinutes;\n}\n\nexport async function getCardEstimate(t: Trello.PowerUp.IFrame, cardId?: string): Promise<Estimate> {\n    const estimate = JSON.parse(await t.get(cardId ?? \"card\", \"shared\", \"estimate\", \"null\")) as Estimate;\n    if (estimate === null) {\n        return {\n            estimateMinutes: 0,\n            updatedEstimateMinutes: 0,\n            workMinutes: {},\n        };\n    }\n    return estimate;\n}\n\nexport async function setCardEstimate(t: Trello.PowerUp.IFrame, estimate: Estimate, cardId?: string) {\n    await t.set(cardId ?? \"card\", \"shared\", \"estimate\", JSON.stringify(estimate));\n    await setLastInputTimeToNow(t);\n    return estimate;\n}\n\nexport async function getAllCardsEstimates(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"id\"];\n\n    const cards: Trello.PowerUp.Card[] = await t.cards(...fields);\n    return await Promise.all(cards.map(card =>\n        getCardEstimate(t, card.id).then(estimate => ({\n            ...estimate,\n            card: card,\n        }))));\n}\n\nexport async function getBoardEstimates(t: Trello.PowerUp.IFrame) {\n    const estimates = await getAllCardsEstimates(t, \"id\", \"dueComplete\");\n\n    const summary: SummaryEstimate = {\n        estimateMinutes: 0,\n        updatedEstimateMinutes: 0,\n        workMinutes: 0,\n        remainingMinutes: 0,\n        deltaMinutes: 0,\n    };\n\n    for (const est of estimates) {\n        summary.estimateMinutes += est.estimateMinutes;\n\n        const totalWorkMinutes = getTotalWorkMinutes(est);\n        summary.workMinutes += totalWorkMinutes;\n\n        const remaining = getRemainingWorkMinutes(est, est.card.dueComplete);\n        summary.remainingMinutes += remaining > 0 ? remaining : 0;\n\n        summary.updatedEstimateMinutes += !est.card.dueComplete\n            ? (est.updatedEstimateMinutes || est.estimateMinutes)\n            : totalWorkMinutes;\n\n        if (est.card.dueComplete || totalWorkMinutes > est.estimateMinutes)\n            summary.deltaMinutes += est.estimateMinutes - totalWorkMinutes;\n    }\n\n    return summary;\n}\n\nexport async function getCurrentWork(t: Trello.PowerUp.IFrame) {\n    // console.log(\"getting current work\");\n\n    const currentWork = JSON.parse(await t.get(\"board\", \"private\", \"work\", \"null\")) as CurrentWork | null;\n\n    if (currentWork !== null)\n        // js parses dates as strings so i have to convert it here\n        currentWork.startDate = new Date(currentWork.startDate);\n\n    return currentWork;\n}\n\nexport async function setCurrentWork(t: Trello.PowerUp.IFrame, currentWork: CurrentWork | null) {\n    // console.log(\"setting current work\");\n    await t.set(\"board\", \"private\", \"work\", JSON.stringify(currentWork ?? null));\n}\n\nexport async function getWorkSessions(t: Trello.PowerUp.IFrame) {\n    const sessions = JSON.parse(await t.get(\"board\", \"private\", \"work_sessions\", \"[]\")) as WorkSession[];\n\n    for (const s of sessions) {\n        s.startDate = new Date(s.startDate);\n        if (s.endDate !== undefined)\n            s.endDate = new Date(s.endDate);\n    }\n\n    return sessions;\n}\n\nexport async function setWorkSessions(t: Trello.PowerUp.IFrame, sessions: WorkSession[]) {\n    await t.set(\"board\", \"private\", \"work_sessions\", JSON.stringify(sessions));\n}\n\nconst maxWorkSessions = 10;\n\nfunction addWorkSession(sessions: WorkSession[]) {\n    if (sessions.length >= maxWorkSessions)\n        sessions.shift();\n\n    const added: WorkSession = {\n        startDate: new Date(),\n        workMinutes: 0,\n    };\n\n    sessions.push(added);\n\n    return added;\n}\n\nexport async function editCurrentWorkSession(t: Trello.PowerUp.IFrame, action: (session: WorkSession) => Promise<WorkSession>) {\n    const sessions = await getWorkSessions(t);\n    let current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        current = addWorkSession(sessions);\n\n    sessions[sessions.length - 1] = await action(current);\n\n    await setWorkSessions(t, sessions);\n}\n\nexport async function getMarginMultiplier(t: Trello.PowerUp.IFrame) {\n    const margin = await t.get(\"board\", \"shared\", \"margin\", 0.2) as number;\n    return margin;\n}\n\nexport async function setMaringMultiplier(t: Trello.PowerUp.IFrame, marginMultiplier: number) {\n    await t.set(\"board\", \"shared\", \"margin\", marginMultiplier);\n}\n\nexport async function getLastInputTime(t: Trello.PowerUp.IFrame) {\n    const time = await t.get(\"board\", \"private\", \"last_input_time\", null) as string | null;\n\n    if (time)\n        return new Date(time);\n\n    return null;\n}\n\nexport async function setLastInputTime(t: Trello.PowerUp.IFrame, time: Date) {\n    await t.set(\"board\", \"private\", \"last_input_time\", time);\n}\n\nexport async function setLastInputTimeToNow(t: Trello.PowerUp.IFrame) {\n    setLastInputTime(t, new Date());\n}\n","import React from \"react\";\r\n\r\nexport function ServedFrom() {\r\n    return (\r\n        <>\r\n            Served from: {window.location.host}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Version() {\r\n    return (\r\n        <>\r\n            Version: {process.env.REACT_APP_VERSION}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./DeployInfo.scss\";\r\nimport { ServedFrom } from \"./ServedFrom\";\r\nimport { Version } from \"./Version\";\r\n\r\ntype Props = {\r\n    className?: string;\r\n}\r\n\r\nexport function DeployInfo(props: Props) {\r\n    return (\r\n        <div className={props.className}>\r\n            <span className=\"deploy-text\">\r\n                <Version />\r\n            </span>\r\n            <span className=\"deploy-text\">\r\n                <ServedFrom />\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n","import { Trello } from \"../types/trello\";\nimport { getCardEstimate, getCurrentWork, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { getElapsedMinutes } from \"../utils/dateMath\";\nimport { formatWorkDelta, getWorkDelta } from \"../utils/workDelta\";\n\nasync function getBadge(t: Trello.PowerUp.IFrame, icon: string): Promise<Trello.PowerUp.CardBadge> {\n    const card = await t.card(\"id\", \"dueComplete\");\n    const estimate = await getCardEstimate(t);\n    const currentWork = await getCurrentWork(t);\n\n    let totalWork = getTotalWorkMinutes(estimate);\n    let remainingWork = getRemainingWorkMinutes(estimate, card.dueComplete, totalWork);\n\n    if (estimate.estimateMinutes === 0 && totalWork === 0 && currentWork?.cardId !== card.id)\n        throw t.NotHandled();\n\n    if (currentWork?.cardId === card.id) {\n        const currentMinutes = getElapsedMinutes(currentWork.startDate);\n        totalWork += currentMinutes;\n        remainingWork -= currentMinutes;\n    }\n\n    const workPart = totalWork > 0\n        ? `| W: ${formatMinutes(totalWork)}`\n        : \"\"\n    ;\n\n    const delta = getWorkDelta({\n        cardId: card.id,\n        estimate,\n        totalWorkMinutes: totalWork,\n    });\n\n    const lastPart = !card.dueComplete\n        ? `| R: ${formatMinutes(remainingWork)}`\n        : delta !== 0\n            ? `| ${formatWorkDelta({\n                delta,\n                short: true,\n            })}`\n            : \"\"\n    ;\n\n    return {\n        text: `E: ${formatMinutes(estimate.updatedEstimateMinutes || estimate.estimateMinutes)} ${workPart} ${lastPart}`,\n        icon: icon,\n        color: card.id === currentWork?.cardId\n            ? \"red\"\n            : card.dueComplete\n                ? delta >= 0 ? \"green\" : \"yellow\"\n                : undefined,\n        refresh: 10, // in seconds\n    };\n}\n\nexport function getCardBadges(t: Trello.PowerUp.IFrame, props: CapabilityProps): Trello.PowerUp.CardBadgeDynamic[] {\n    return [{\n        dynamic: () => {\n            return getBadge(t, props.icon.light);\n        },\n    }];\n}\n","import { Trello } from \"../types/trello\";\nimport { getUrl } from \"../utils/urlUtils\";\nimport { getBoardButton } from \"./boardButtonCapability\";\nimport { getCardBackSection } from \"./cardBackSectionCapability\";\nimport { getCardBadges } from \"./cardBadgesCapability\";\n\nconst CAPABILITY_PROPS: CapabilityProps = {\n    icon: {\n        dark: getUrl(\"/logo192.png\", { absolute: true }),\n        light: getUrl(\"/logo192.png\", { absolute: true }),\n    },\n};\n\nexport function initializeCapabilities() {\n    console.log(\"initializing capabilities\");\n\n    window.TrelloPowerUp.initialize({\n        \"board-buttons\": (t: Trello.PowerUp.IFrame) => getBoardButton(t, CAPABILITY_PROPS),\n        \"card-back-section\": (t: Trello.PowerUp.IFrame) => getCardBackSection(t, CAPABILITY_PROPS),\n        \"card-badges\": (t: Trello.PowerUp.IFrame) => getCardBadges(t, CAPABILITY_PROPS),\n    });\n}\n","import { getRoutePathUrl } from \"../router/routePathUrl\";\nimport { Trello } from \"../types/trello\";\n\nexport function getBoardButton(_t: Trello.PowerUp.IFrame, props: CapabilityProps): Trello.PowerUp.BoardButtonCallback[] {\n    return [{\n        icon: {\n            dark: props.icon.dark,\n            light: props.icon.light,\n        },\n        text: \"Estimate\",\n        callback: (tc: Trello.PowerUp.IFrame) => {\n            return tc.modal({\n                title: \"Estimate\",\n                url: tc.signUrl(getRoutePathUrl(\"/board-page\")),\n                fullscreen: false,\n                height: 400,\n            });\n        },\n        condition: \"edit\",\n    }];\n}\n","import { getRoutePathUrl } from \"../router/routePathUrl\";\nimport { Trello } from \"../types/trello\";\n\nexport function getCardBackSection(t: Trello.PowerUp.IFrame, props: CapabilityProps): Trello.PowerUp.CardBackSection {\n    return {\n        title: \"Estimate\",\n        icon: props.icon.dark,\n        content: {\n            type: \"iframe\",\n            url: t.signUrl(getRoutePathUrl(\"/card-back-section\", { absolute: true })),\n            height: 210,\n        },\n    };\n}\n","import { initializeCapabilities } from \"../capabilities/capabilitiesInitilizer\";\nimport IndexPage from \"./IndexPage\";\n\ninitializeCapabilities();\n\nexport default IndexPage;\n","import React from \"react\";\n\nimport \"./IndexPage.scss\";\nimport logo from \"../assets/e.png\";\nimport { AppLink } from \"../router/components/AppLink\";\nimport { DeployInfo } from \"../components/DeployInfo\";\n\nexport default function IndexPage() {\n    return (\n        <div className={\"App\"}>\n            <header className=\"App-header\">\n                <img\n                    src={logo}\n                    className=\"App-logo\"\n                    alt=\"logo\"\n                />\n                <p>\n                    This is the Estimate Trello Powerup welcome page.\n                </p>\n                <DeployInfo />\n                <AppLink to={\"/dummy\"}>\n                    Dummy page\n                </AppLink>\n                <AppLink to={\"/board-page\"}>\n                    Board page\n                </AppLink>\n                <AppLink to={\"/card-back-section\"}>\n                    Card back section page\n                </AppLink>\n            </header>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { getRoutePathUrl } from \"../routePathUrl\";\n\ntype AnchorProps = React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n\ntype Props = Omit<AnchorProps, \"href\"> & {\n    to: RoutePath\n}\n\nexport function AppLink(props: Props) {\n    return (\n        <a\n            {...props}\n            href={getRoutePathUrl(props.to)}\n        >\n            {props.children}\n        </a>\n    );\n}\n","import { getUrl, UrlOptions } from \"../utils/urlUtils\";\n\nexport function getRoutePathUrl(path: RoutePath, options?: UrlOptions) {\n    return getUrl(\"?path=\" + path, options);\n}\n","import { minutesToMs } from \"./timeParsing\";\n\nexport function addMinutesToDate(date: Date, minutes: number) {\n    return new Date(date.getTime() + minutesToMs(minutes));\n}\n\nexport function getElapsedMs(date: Date) {\n    return Date.now() - date.getTime();\n}\n\nexport function getElapsedSeconds(date: Date) {\n    return getElapsedMs(date) / 1000;\n}\n\nexport function getElapsedMinutes(date: Date) {\n    return getElapsedMs(date) / 1000 / 60;\n}\n\nexport function areDatesEqual(date1: Date, date2: Date) {\n    return date1?.getTime() === date2?.getTime();\n}\n","\nexport function evaluateMathExpression(expression: string) {\n    if (/^[0-9.()+*-/]+$/.test(expression)) {\n        try {\n            return eval(expression) as number;\n        }\n        catch (error) {\n            return NaN;\n        }\n    }\n    else {\n        return NaN;\n    }\n}\n","import { Trello } from \"../types/trello\";\nimport { evaluateMathExpression } from \"./mathParsing\";\n\nexport const hoursPerDay = 8;\n\nexport function parseTimeDelta(timeDeltaString: string) {\n    timeDeltaString = timeDeltaString.replaceAll(\" \", \"\");\n    timeDeltaString = timeDeltaString.replaceAll(\",\", \".\");\n    timeDeltaString = timeDeltaString.toLowerCase();\n\n    if (!/^([^a-z]+[a-z]+)+$/.test(timeDeltaString)) {\n        // console.log(\"desk rejected\");\n        return NaN;\n    }\n\n    let minutes = 0;\n\n    for (const match of timeDeltaString.matchAll(/([^a-z]+)([a-z]+)/g)) {\n        const timeLabel = match[2];\n\n        if (timeLabel.length !== 1)\n            return NaN;\n\n        let multiplier: number;\n\n        if (timeLabel === \"m\")\n            multiplier = 1;\n        else if (timeLabel === \"h\")\n            multiplier = 60;\n        else if (timeLabel === \"d\")\n            multiplier = 60 * hoursPerDay;\n        else\n            return NaN;\n\n        const expressionResult = evaluateMathExpression(match[1]);\n\n        if (isNaN(expressionResult))\n            return NaN;\n\n        minutes += multiplier * expressionResult;\n    }\n\n    if (minutes <= 0)\n        return NaN;\n\n    return minutes;\n}\n\nexport function parseAndRun<T>(t: Trello.PowerUp.IFrame, [input, setInput]: UsedState<string>, action: (parsedMinutes: number) => T) {\n    const parsedMinutes = parseTimeDelta(input);\n\n    if (isNaN(parsedMinutes)) {\n        t.alert({\n            display: \"error\",\n            message: \"invalid input\",\n            duration: 4,\n        });\n        return;\n    }\n\n    const val = action(parsedMinutes);\n\n    setInput(\"\");\n\n    return val;\n}\n\nexport type FormatMinutesOptions = {\n    zero: string,\n    negative: string,\n    hoursPerDay: number,\n}\n\nconst defaultOptions: FormatMinutesOptions = {\n    zero: \"none\",\n    negative: \"?\",\n    hoursPerDay: 8,\n};\n\nexport function formatMinutes(minutes: number) {\n    return formatMinutesWithOptions(minutes );\n}\n\nexport function formatMinutesWithOptions(minutes: number, options: Partial<FormatMinutesOptions> = defaultOptions) {\n    if (isNaN(minutes))\n        return \"NaN\";\n\n    if (minutes < 0)\n        return options.negative ?? defaultOptions.negative;\n\n    if (minutes === 0)\n        return options.zero ?? defaultOptions.zero;\n\n    const hoursPerDay = options.hoursPerDay ?? defaultOptions.hoursPerDay;\n\n    let minutesPart = Math.floor(minutes % 60);\n    const flooredHours = Math.floor(minutes / 60);\n    const hoursPart = flooredHours % hoursPerDay;\n    const daysPart = Math.floor(flooredHours / hoursPerDay);\n\n    let secondsPart = 0;\n\n    // show seconds only if minutes < 1\n    if (minutes < 1) {\n        secondsPart = Math.round(minutes * 60);\n        minutesPart = 0;\n    }\n\n    let str = \"\";\n\n    if (daysPart > 0)\n        str += daysPart + \"d\";\n    if (hoursPart > 0)\n        str += hoursPart + \"h\";\n    if (minutesPart > 0)\n        str += minutesPart + \"m\";\n    if (secondsPart > 0)\n        str += secondsPart + \"s\";\n\n    return str;\n}\n\nexport function minutesToMs(minutes: number) {\n    return minutes * 60 * 1000;\n}\n\nexport function hoursToMs(hours: number) {\n    return minutesToMs(hours * 60);\n}\n\nexport function msToMinutes(ms: number) {\n    return (ms / 1000) / 60;\n}\n","export type UrlOptions = {\r\n    absolute?: boolean,\r\n}\r\n\r\nexport function getUrl(endpoint: string, options?: UrlOptions) {\r\n    const relative = process.env.PUBLIC_URL + endpoint;\r\n\r\n    if (options?.absolute)\r\n        return window.location.origin + relative;\r\n    else\r\n        return relative;\r\n}\r\n","import { CurrentWork, Estimate, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { getElapsedMinutes } from \"./dateMath\";\nimport { formatMinutes } from \"./timeParsing\";\n\ntype Args = {\n    cardId: Trello.PowerUp.Card[\"id\"] | undefined,\n    estimate: Estimate,\n    totalWorkMinutes?: number,\n    currentWork?: CurrentWork | null | undefined,\n}\n\nexport function getWorkDelta(args: Args) {\n    let totalWorkMinutes = args.totalWorkMinutes ?? getTotalWorkMinutes(args.estimate);\n\n    if (args.currentWork != null && args.currentWork.cardId === args.cardId)\n        totalWorkMinutes += getElapsedMinutes(args.currentWork.startDate);\n\n    return args.estimate.estimateMinutes - totalWorkMinutes;\n}\n\ntype FormattedArgs = {\n    delta: number,\n    short?: boolean,\n}\n\nexport function formatWorkDelta({ delta, short }: FormattedArgs) {\n    if (delta >= 0) {\n        if (short)\n            return \"S: \" + formatMinutes(delta);\n        else\n            return \"Saved: \" + formatMinutes(delta);\n    }\n    else {\n        if (short)\n            return \"S: -\" + formatMinutes(-delta);\n        else\n            return \"Spent: \" + formatMinutes(-delta);\n    }\n}\n"],"names":["enumerateWork","getTotalWorkMinutes","estimate","sum","workerId","workMinutes","getRemainingWorkMinutes","dueComplete","totalWorkMinutes","undefined","updatedEstimateMinutes","estimateMinutes","memberId","minutes","getUpdatedEstimate","getCardEstimate","t","cardId","JSON","get","parse","setCardEstimate","set","stringify","setLastInputTimeToNow","getAllCardsEstimates","fields","length","cards","Promise","all","map","card","id","then","getBoardEstimates","estimates","summary","remainingMinutes","deltaMinutes","est","remaining","getCurrentWork","currentWork","startDate","Date","setCurrentWork","getWorkSessions","sessions","s","endDate","setWorkSessions","addWorkSession","shift","added","push","editCurrentWorkSession","action","current","getMarginMultiplier","margin","setMaringMultiplier","marginMultiplier","getLastInputTime","time","setLastInputTime","ServedFrom","window","location","host","Version","process","DeployInfo","props","className","getBadge","icon","totalWork","remainingWork","NotHandled","currentMinutes","getElapsedMinutes","workPart","formatMinutes","delta","getWorkDelta","lastPart","formatWorkDelta","short","text","color","refresh","getCardBadges","dynamic","light","CAPABILITY_PROPS","dark","getUrl","absolute","console","log","TrelloPowerUp","initialize","callback","tc","modal","title","url","signUrl","getRoutePathUrl","fullscreen","height","condition","content","type","getCardBackSection","IndexPage","src","logo","alt","to","AppLink","href","children","path","options","addMinutesToDate","date","getTime","minutesToMs","getElapsedMs","now","getElapsedSeconds","areDatesEqual","date1","date2","evaluateMathExpression","expression","test","NaN","eval","error","hoursPerDay","parseAndRun","input","setInput","parsedMinutes","timeDeltaString","replaceAll","toLowerCase","matchAll","match","timeLabel","multiplier","expressionResult","isNaN","parseTimeDelta","val","alert","display","message","duration","defaultOptions","zero","negative","formatMinutesWithOptions","minutesPart","Math","floor","flooredHours","hoursPart","daysPart","secondsPart","round","str","hoursToMs","hours","msToMinutes","ms","endpoint","relative","origin","args"],"sourceRoot":""}