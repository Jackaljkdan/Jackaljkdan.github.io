{"version":3,"file":"static/js/953.fe6c51f1.chunk.js","mappings":"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","sources":["utils/object.ts","utils/trelloRest.ts","utils/fetch.ts","components/CompleteCardButton.tsx","components/OpenWorkCardButton.tsx","components/TimeButtons.tsx","components/MoreCardFunctionsButton.tsx","components/WorkDetails.tsx","components/WorkTimeButtons.tsx","pages/CardBackSectionPage.tsx","hooks/useEstimate.ts"],"sourcesContent":["export function* enumerateKeys<T>(object: T): Generator<keyof T> {\n    for (const key in object)\n        yield key;\n}\n","import { Trello } from \"../types/trello\";\nimport { fetchJson } from \"./fetch\";\nimport { enumerateKeys } from \"./object\";\n\nconst baseurl = \"https://api.trello.com/1\";\n\nconst apiKey = process.env.REACT_APP_POWERUP_APP_KEY;\n\nexport function getAuthorizedRestApi(t: Trello.PowerUp.IFrame, scope: Trello.PowerUp.AllPermissions = \"read,write\") {\n    return t.getRestApi()\n        .isAuthorized()\n        .then(authorized => {\n            if (authorized)\n                return;\n            else\n                throw new Error(\"unauthorized\");\n        })\n        .catch(() => {\n            return t.getRestApi().authorize({\n                scope,\n            });\n        })\n        .then(() => {\n            return t.getRestApi().getToken();\n        });\n}\n\nexport function getCardFields(token: string, cardId: string, ...fields: [\"all\"] | (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"all\"];\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?fields=${fields.join(\",\")}&key=${apiKey}&token=${token}`,\n        method: \"GET\",\n    });\n}\n\nexport type EditableCard = Partial<Omit<Trello.PowerUp.Card, \"id\" | \"idShort\" | \"url\">>;\n\nexport function updateCardFields(token: string, cardId: string, fields: EditableCard) {\n    const query = {\n        ...fields,\n        key: apiKey,\n        token: token,\n    };\n\n    const queryString = Array.from(enumerateKeys(query), key => key + \"=\" + query[key]).join(\"&\");\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?${queryString}`,\n        method: \"PUT\",\n    });\n}\n","export type Request = RequestInit & {\n    url: RequestInfo | URL;\n}\n\nexport type JsonResponse<T> = Response & {\n    data: T;\n    request: Request\n}\n\nexport function fetchJson<T>(request: Request): Promise<JsonResponse<T>> {\n    return fetch(request.url, {\n        ...request,\n        headers: {\n            Accept: \"application/json\",\n            ...request?.headers,\n        },\n    })\n        .then(response => {\n            return response.json().then(json => {\n                const jsonResponse = response as JsonResponse<T>;\n                jsonResponse.data = json;\n                jsonResponse.request = request;\n                return jsonResponse;\n            });\n        });\n}\n","import React from \"react\";\n\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { getAuthorizedRestApi, updateCardFields } from \"../utils/trelloRest\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function CompleteCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\", \"due\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n\n    return (\n        <button\n            className={`complete-work ${props.className}`}\n            onClick={() => {\n                if (card === undefined)\n                    return;\n\n                getAuthorizedRestApi(t)\n                    .then(token => updateCardFields(token, card.id, {\n                        due: dueCompleteQuery.data\n                            ? null\n                            : card.due\n                                ? card.due\n                                : new Date().toISOString(),\n                        dueComplete: !dueCompleteQuery.data,\n                    }))\n                    .then(response => {\n                        if (response.ok)\n                            dueCompleteQuery.setData(response.data.dueComplete);\n                    })\n                    .catch(err => {\n                        console.error(err);\n                    });\n            }}\n        >\n            <If condition={dueCompleteQuery.data === undefined}>\n                loading...\n            </If>\n            <If condition={dueCompleteQuery.data !== undefined}>\n                <If condition={dueCompleteQuery.data}>\n                    Uncomplete card\n                </If>\n                <If condition={!dueCompleteQuery.data}>\n                    Complete card\n                </If>\n            </If>\n        </button>\n    );\n}\n","import React from \"react\";\nimport { useCard } from \"../hooks/useCard\";\n\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function OpenWorkCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const card = useCard(t, \"id\");\n\n    if (currentWork.value?.cardId === undefined)\n        return null;\n\n    if (card === undefined || currentWork.value.cardId === card.id)\n        return null;\n\n    return (\n        <button\n            className={`open-work ${props.className}`}\n            onClick={() => t.showCard(currentWork.value!.cardId)}\n        >\n            Open work card\n        </button>\n    );\n}\n","import React from \"react\";\r\n\r\nimport \"./TimeButtons.scss\";\r\n\r\ntype Props = {\r\n    label: React.ReactNode;\r\n    action: (\r\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n        computeNew: (previous: number, parsed: number) => number\r\n    ) => void;\r\n    clearAction: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    setLabel?: string;\r\n    clearLabel?: string;\r\n    className?: string;\r\n}\r\n\r\nexport function TimeButtons(props: Props) {\r\n    return (\r\n        <div className={`time-buttons ${props.className ?? \"\"}`}>\r\n            <div className='label'>\r\n                {props.label}\r\n            </div>\r\n            <button onClick={e => props.action(e, (_, parsed) => parsed)}>\r\n                {props.setLabel ?? \"Set\"}\r\n            </button>\r\n            <button onClick={e => props.action(e, (previous, parsed) => previous + parsed)}>\r\n                +\r\n            </button>\r\n            <button onClick={e => props.action(e, (previous, parsed) => previous - parsed)}>\r\n                -\r\n            </button>\r\n            <button onClick={props.clearAction}>\r\n                {props.clearLabel ?? \"Clear\"}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { getCardEstimate, getLastInputTime, setCardEstimate } from \"../api/estimateApi\";\r\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\r\nimport { Trello } from \"../types/trello\";\r\nimport { getElapsedMinutes } from \"../utils/dateMath\";\r\nimport { formatMinutes } from \"../utils/timeParsing\";\r\n\r\ntype Props = {\r\n    className?: string;\r\n    onRefresh?: () => void;\r\n}\r\n\r\nexport function MoreCardFunctionsButton(props: Props) {\r\n    const t = useProvidedTrello();\r\n\r\n    return (\r\n        <button\r\n            className={`${props.className ?? \"\"}`}\r\n            onClick={async e => {\r\n                const lastInputTime = await getLastInputTime(t);\r\n\r\n                const items: Trello.PowerUp.PopupOptions[\"items\"] = [];\r\n\r\n                if (lastInputTime) {\r\n                    const elapsedMinutesSinceLastInput = getElapsedMinutes(lastInputTime);\r\n\r\n                    items.push({\r\n                        text: `Add time since last input as work (${formatMinutes(elapsedMinutesSinceLastInput)})`,\r\n                        callback: async tp => {\r\n                            const card = await t.card(\"id\");\r\n                            const member = await t.member(\"id\");\r\n                            const estimate = await getCardEstimate(t, card.id);\r\n\r\n                            await setCardEstimate(t, {\r\n                                ...estimate,\r\n                                workMinutes: {\r\n                                    ...estimate.workMinutes,\r\n                                    [member.id]: (estimate.workMinutes[member.id] ?? 0) + getElapsedMinutes(lastInputTime),\r\n                                },\r\n                            });\r\n\r\n                            props.onRefresh?.();\r\n\r\n                            await tp.closePopup();\r\n                        },\r\n                    });\r\n                };\r\n\r\n                t.popup({\r\n                    title: \"More functions\",\r\n                    items,\r\n                    mouseEvent: e.nativeEvent,\r\n                });\r\n            }}\r\n        >\r\n            &#8943;\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\n\nimport { enumerateWork, Estimate, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { formatWorkDelta, getWorkDelta } from \"../utils/workDelta\";\n\ntype Props = {\n    estimate: Estimate,\n    member: Trello.PowerUp.Member,\n}\n\ntype MembersObject = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function WorkDetails(props: Props) {\n    const { estimate, member } = props;\n    const [showDetails, setShowDetails] = useState(false);\n    const [members, setMembers] = useState<MembersObject>();\n\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n    const isCardComplete = dueCompleteQuery.data ?? false;\n\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(\n        currentWork.value?.cardId === card?.id\n            ? currentWork.value?.startDate\n            : undefined,\n    );\n\n    useEffect(\n        () => {\n            if (!showDetails || members !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MembersObject = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMembers(obj);\n            });\n        },\n        [showDetails, members],\n    );\n\n    const totalWork = getTotalWorkMinutes(estimate) + elapsedWorkMinutes;\n    const myWork = elapsedWorkMinutes + estimate.workMinutes[member.id!] ?? 0;\n    const remainingWork = getRemainingWorkMinutes(estimate, isCardComplete, totalWork);\n\n    return (\n        <>\n            <div className='card-label'>\n                Work: {formatMinutes(totalWork)}\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    (mine: {formatMinutes(myWork)})\n                </If>\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    <span\n                        className='work-details link-like'\n                        onClick={() => setShowDetails(current => !current)}\n                    >\n                        details\n                    </span>\n                </If>\n                <If condition={!isCardComplete}>\n                    {\" | \"} Remaining: {formatMinutes(remainingWork)}\n                </If>\n                <If condition={isCardComplete}>\n                    {\" | \"}\n                    {formatWorkDelta({\n                        delta: getWorkDelta({\n                            cardId: card?.id,\n                            estimate,\n                            totalWorkMinutes: totalWork,\n                        }),\n                    })}\n                </If>\n            </div>\n            <If condition={showDetails && members !== undefined}>\n                <div>\n                    {[...enumerateWork(estimate)]\n                        .filter(item => item.minutes > 0)\n                        .map(item => {\n                            const member = members![item.memberId];\n                            return (\n                                <div key={item.memberId}>\n                                    {member?.fullName ?? \"<missing>\"}\n                                    {member && \" \"}\n                                    {member !== undefined ? `(${member.username})` : \"\"}\n                                    {\": \"}\n                                    {formatMinutes(item.minutes)}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </If>\n        </>\n    );\n}\n","import React from \"react\";\r\n\r\nimport { getTotalWorkMinutes } from \"../api/estimateApi\";\r\nimport { UsedEstimate } from \"../hooks/useEstimate\";\r\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\r\nimport { Trello } from \"../types/trello\";\r\nimport { hoursPerDay, parseAndRun } from \"../utils/timeParsing\";\r\nimport { closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\r\nimport { TimeButtons } from \"./TimeButtons\";\r\nimport { WorkDetails } from \"./WorkDetails\";\r\n\r\ntype Props = {\r\n    className?: string;\r\n    estimate: UsedEstimate,\r\n    inputState: UsedState<string>,\r\n    member: Trello.PowerUp.Member,\r\n}\r\n\r\nexport function WorkTimeButtons(props: Props) {\r\n    const { estimate, member } = props;\r\n    const t = useProvidedTrello();\r\n\r\n    if (estimate.value === undefined)\r\n        return (<div>{estimate.feedback}</div>);\r\n\r\n    const totalWork = getTotalWorkMinutes(estimate.value);\r\n    const myWork = estimate.value.workMinutes[member.id!] ?? 0;\r\n\r\n    async function runAndUpdateSession(args: {\r\n        action: () => ReturnType<typeof estimate.set>,\r\n        mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n    }) {\r\n        const delta = await args.action();\r\n\r\n        if (!delta)\r\n            return;\r\n\r\n        const myWorkDelta = delta.workMinutes[member!.id];\r\n        if (myWorkDelta === undefined)\r\n            return;\r\n\r\n        t.popup({\r\n            type: \"confirm\",\r\n            title: \"Add to session?\",\r\n            message: \"Should this work change count in your work session?\",\r\n            confirmText: \"Yes\",\r\n            onConfirm: tp => {\r\n                tp.closePopup();\r\n                return closeIfOldAndEditCurrentWorkSession(t, {\r\n                    action: async session => ({\r\n                        ...session,\r\n                        workMinutes: session.workMinutes + myWorkDelta,\r\n                    }),\r\n                    hoursPerDay,\r\n                    mouseEvent: args.mouseEvent,\r\n                });\r\n            },\r\n            cancelText: \"No\",\r\n            onCancel: tp => tp.closePopup(),\r\n            mouseEvent: args.mouseEvent.nativeEvent,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <TimeButtons\r\n            label= {<WorkDetails\r\n                estimate={estimate.value}\r\n                member={member!}\r\n            />}\r\n            action={(e, computeNewWork) => runAndUpdateSession({\r\n                action: () => parseAndRun(t, props.inputState, parsedMinutes =>\r\n                    estimate.set(current => ({\r\n                        ...current,\r\n                        workMinutes: {\r\n                            ...current.workMinutes,\r\n                            [member!.id]: computeNewWork(current.workMinutes[member!.id] ?? 0, parsedMinutes),\r\n                        },\r\n                    }))),\r\n                mouseEvent: e,\r\n            })}\r\n            clearAction={e => runAndUpdateSession({\r\n                action: () => estimate.set(current => ({\r\n                    ...current,\r\n                    workMinutes: {\r\n                        ...current.workMinutes,\r\n                        [member!.id]: 0,\r\n                    },\r\n                })),\r\n                mouseEvent: e,\r\n            })}\r\n            setLabel={myWork < totalWork ? \"Set mine\" : undefined}\r\n            clearLabel={myWork < totalWork ? \"Clear mine\" : undefined}\r\n            className={props.className}\r\n        />\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\n\nimport \"./CardBackSectionPage.scss\";\nimport { formatMinutes, parseAndRun } from \"../utils/timeParsing\";\nimport { useMember } from \"../hooks/useMember\";\nimport { useEstimate } from \"../hooks/useEstimate\";\nimport { WorkButton } from \"../components/WorkButton\";\nimport { CompleteCardButton } from \"../components/CompleteCardButton\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { OpenWorkCardButton } from \"../components/OpenWorkCardButton\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { useTrelloRender } from \"../hooks/useTrelloRender\";\nimport { TimeButtons } from \"../components/TimeButtons\";\nimport { getUpdatedEstimate } from \"../api/estimateApi\";\nimport { MoreCardFunctionsButton } from \"../components/MoreCardFunctionsButton\";\nimport { WorkTimeButtons } from \"../components/WorkTimeButtons\";\n\nexport default function CardBackSectionPage() {\n    const t = useProvidedTrello();\n    const estimate = useEstimate(t);\n\n    const inputState = useState<string>(\"\");\n    const [inputEstimate, setInputEstimate] = inputState;\n\n    const member = useMember(t, \"id\");\n\n    useTrelloRender(t, estimate.refresh);\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    const hasUpdatedEstimate = estimate.value.updatedEstimateMinutes !== 0\n        && estimate.value.updatedEstimateMinutes !== estimate.value.estimateMinutes;\n\n    return (\n        <div>\n            <div className='card-input-header'>\n                <input\n                    value={inputEstimate}\n                    onChange={e => setInputEstimate(e.target.value)}\n                    placeholder=\"input for all buttons...\"\n                />\n                <WorkButton onEstimateChanged={estimate.refresh} />\n                <div className='top-right'>\n                    <OpenWorkCardButton />\n                    <CompleteCardButton />\n                    <MoreCardFunctionsButton onRefresh={estimate.refresh} />\n                </div>\n            </div>\n            <TimeButtons\n                label={<>\n                    {hasUpdatedEstimate && \"Original \"}\n                    Estimate: {formatMinutes(estimate.value.estimateMinutes)}\n                    <If condition={hasUpdatedEstimate}>\n                        {\" | \"}\n                        Updated: {formatMinutes(estimate.value.updatedEstimateMinutes!)}\n                    </If>\n                </>}\n                action={(e, computeNewEstimate) => parseAndRun(t, inputState, parsedMinutes => {\n                    if (estimate.value!.estimateMinutes === 0 && !hasUpdatedEstimate) {\n                        estimate.set(current => ({\n                            ...current,\n                            estimateMinutes: computeNewEstimate(current.estimateMinutes, parsedMinutes),\n                        }));\n                    }\n                    else {\n                        t.popup({\n                            type: \"confirm\",\n                            title: \"Update estimate?\",\n                            message: \"Do you want to update the estimate or change the original?\",\n                            confirmText: \"Update\",\n                            onConfirm: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    updatedEstimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                }));\n                                return tp.closePopup();\n                            },\n                            cancelText: \"Change original\",\n                            onCancel: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    estimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                    updatedEstimateMinutes: 0,\n                                }));\n                                return tp.closePopup();\n                            },\n                            mouseEvent: e.nativeEvent,\n                        });\n                    }\n                })}\n                clearAction={() => estimate.set(current => ({\n                    ...current,\n                    estimateMinutes: 0,\n                    updatedEstimateMinutes: 0,\n                }))}\n            />\n            <If condition={member !== undefined}>\n                <WorkTimeButtons\n                    estimate={estimate}\n                    member={member!}\n                    inputState={inputState}\n                    className=\"work\"\n                />\n            </If>\n            <If condition={Boolean(estimate.feedback)}>\n                <div>\n                    {estimate.feedback}\n                </div>\n            </If>\n        </div>\n    );\n}\n","import { useState, useMemo } from \"react\";\n\nimport { Estimate, getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\n\nexport function useEstimate(t: Trello.PowerUp.IFrame, autosave = true) {\n    const [estimate, setEstimate] = useState<Estimate>();\n    const [feedback, setFeedback] = useState(\"\");\n\n    const refresh = useMemo(\n        () => async () => {\n            setFeedback(\"loading...\");\n            const fetchedEstimate = await getCardEstimate(t);\n            setEstimate(fetchedEstimate);\n            setFeedback(\"\");\n        },\n        noDeps,\n    );\n\n    const set = useMemo(\n        () => (action: (estimate: Estimate) => Estimate) => {\n            if (estimate === undefined)\n                return;\n\n            const updated = action(estimate);\n\n            const delta: Estimate = {\n                estimateMinutes: updated.estimateMinutes - estimate.estimateMinutes,\n                updatedEstimateMinutes: updated.updatedEstimateMinutes - estimate.updatedEstimateMinutes,\n                workMinutes: {},\n            };\n\n            for (const memberId in updated.workMinutes)\n                delta.workMinutes[memberId] = updated.workMinutes[memberId] - (estimate.workMinutes[memberId] ?? 0);\n\n            if (!autosave)\n                return;\n\n            setFeedback(\"saving...\");\n\n            return getCardEstimate(t)\n                .then(remoteEstimate => {\n                    const updatedRemote: Estimate = {\n                        estimateMinutes: remoteEstimate.estimateMinutes + delta.estimateMinutes,\n                        updatedEstimateMinutes: remoteEstimate.updatedEstimateMinutes + delta.updatedEstimateMinutes,\n                        workMinutes: {},\n                    };\n\n                    for (const memberId in delta.workMinutes)\n                        updatedRemote.workMinutes[memberId] = (remoteEstimate.workMinutes[memberId] ?? 0) + delta.workMinutes[memberId];\n\n                    return setCardEstimate(t, updatedRemote);\n                })\n                .then(updatedRemote => {\n                    setEstimate(updatedRemote);\n                    setFeedback(\"saved!\");\n                    setTimeout(() => setFeedback(\"\"), 1000);\n                    return delta;\n                })\n                .catch(err => {\n                    setFeedback(\"\");\n                    t.alert({\n                        display: \"error\",\n                        message: `error during save: ${err}`,\n                    });\n                });\n        },\n        [estimate, autosave],\n    );\n\n    return useMemo(\n        () => ({\n            value: estimate,\n            set,\n            feedback,\n            refresh,\n        }),\n        [estimate, feedback],\n    );\n}\n\nexport type UsedEstimate = ReturnType<typeof useEstimate>;\n"],"names":["enumerateKeys","object","key","baseurl","apiKey","process","updateCardFields","token","cardId","fields","request","query","queryString","Array","from","join","url","method","fetch","headers","Accept","then","response","json","jsonResponse","data","CompleteCardButton","props","t","useProvidedTrello","card","useCard","dueCompleteQuery","useCardDueCompletedQuery","className","onClick","undefined","scope","getRestApi","isAuthorized","authorized","Error","catch","authorize","getToken","getAuthorizedRestApi","id","due","Date","toISOString","dueComplete","ok","setData","err","console","error","OpenWorkCardButton","currentWork","useCurrentWork","value","showCard","TimeButtons","label","e","action","_","parsed","setLabel","previous","clearAction","clearLabel","MoreCardFunctionsButton","getLastInputTime","lastInputTime","items","elapsedMinutesSinceLastInput","getElapsedMinutes","push","text","formatMinutes","callback","tp","member","getCardEstimate","estimate","setCardEstimate","workMinutes","onRefresh","closePopup","popup","title","mouseEvent","nativeEvent","WorkDetails","useState","showDetails","setShowDetails","members","setMembers","isCardComplete","elapsedWorkMinutes","useElapsedMinutes","startDate","useEffect","board","res","obj","m","totalWork","getTotalWorkMinutes","myWork","remainingWork","getRemainingWorkMinutes","current","formatWorkDelta","delta","getWorkDelta","totalWorkMinutes","enumerateWork","filter","item","minutes","map","memberId","fullName","username","WorkTimeButtons","feedback","runAndUpdateSession","args","myWorkDelta","type","message","confirmText","onConfirm","closeIfOldAndEditCurrentWorkSession","session","hoursPerDay","cancelText","onCancel","computeNewWork","parseAndRun","inputState","parsedMinutes","set","CardBackSectionPage","autosave","setEstimate","setFeedback","refresh","useMemo","fetchedEstimate","noDeps","updated","estimateMinutes","updatedEstimateMinutes","remoteEstimate","updatedRemote","setTimeout","alert","display","useEstimate","inputEstimate","setInputEstimate","useMember","useTrelloRender","hasUpdatedEstimate","onChange","target","placeholder","WorkButton","onEstimateChanged","computeNewEstimate","getUpdatedEstimate","Boolean"],"sourceRoot":""}