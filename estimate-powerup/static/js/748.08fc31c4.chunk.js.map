{"version":3,"file":"static/js/748.08fc31c4.chunk.js","mappings":"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","sources":["utils/object.ts","utils/trelloRest.ts","utils/fetch.ts","components/CompleteCardButton.tsx","components/OpenWorkCardButton.tsx","components/WorkDetails.tsx","pages/CardBackSection.tsx","hooks/useEstimate.ts"],"sourcesContent":["export function* enumerateKeys<T>(object: T): Generator<keyof T> {\n    for (const key in object)\n        yield key;\n}\n","import { Trello } from \"../types/trello\";\nimport { fetchJson } from \"./fetch\";\nimport { enumerateKeys } from \"./object\";\n\nconst baseurl = \"https://api.trello.com/1\";\n\nconst apiKey = process.env.REACT_APP_POWERUP_APP_KEY;\n\nexport function getAuthorizedRestApi(t: Trello.PowerUp.IFrame, scope: Trello.PowerUp.AllPermissions = \"read,write\") {\n    return t.getRestApi()\n        .isAuthorized()\n        .then(authorized => {\n            if (authorized)\n                return;\n            else\n                throw new Error(\"unauthorized\");\n        })\n        .catch(() => {\n            return t.getRestApi().authorize({\n                scope,\n            });\n        })\n        .then(() => {\n            return t.getRestApi().getToken();\n        });\n}\n\nexport function getCardFields(token: string, cardId: string, ...fields: [\"all\"] | (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"all\"];\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?fields=${fields.join(\",\")}&key=${apiKey}&token=${token}`,\n        method: \"GET\",\n    });\n}\n\nexport type EditableCard = Partial<Omit<Trello.PowerUp.Card, \"id\" | \"idShort\" | \"url\">>;\n\nexport function updateCardFields(token: string, cardId: string, fields: EditableCard) {\n    const query = {\n        ...fields,\n        key: apiKey,\n        token: token,\n    };\n\n    const queryString = Array.from(enumerateKeys(query), key => key + \"=\" + query[key]).join(\"&\");\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?${queryString}`,\n        method: \"PUT\",\n    });\n}\n","export type Request = RequestInit & {\n    url: RequestInfo | URL;\n}\n\nexport type JsonResponse<T> = Response & {\n    data: T;\n    request: Request\n}\n\nexport function fetchJson<T>(request: Request): Promise<JsonResponse<T>> {\n    return fetch(request.url, {\n        ...request,\n        headers: {\n            Accept: \"application/json\",\n            ...request?.headers,\n        },\n    })\n        .then(response => {\n            return response.json().then(json => ({\n                ...response,\n                data: json as T,\n                request: request,\n            }));\n        });\n}\n","import React from \"react\";\n\nimport { useCardWithRefresh } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { getAuthorizedRestApi, updateCardFields } from \"../utils/trelloRest\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function CompleteCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const { card, refresh } = useCardWithRefresh(t, \"id\", \"due\", \"dueComplete\");\n\n    return (\n        <button\n            className={`complete-work ${props.className}`}\n            onClick={() => {\n                if (card === undefined)\n                    return;\n\n                getAuthorizedRestApi(t)\n                    .then(token =>\n                        updateCardFields(token, card.id, {\n                            due: card.dueComplete\n                                ? null\n                                : card.due\n                                    ? card.due\n                                    : new Date().toISOString(),\n                            dueComplete: !card.dueComplete,\n                        }))\n                    .catch(err => {\n                        console.error(err);\n                    })\n                    // TODO: il refresh non funziona sempre, a volte la card rimane non aggiornata\n                    .then(refresh);\n            }}\n        >\n            {card === undefined\n                ? \"loading...\"\n                : card.dueComplete\n                    ? \"Uncomplete card\"\n                    : \"Complete card\"\n            }\n        </button>\n    );\n}\n","import React from \"react\";\nimport { useCard } from \"../hooks/useCard\";\n\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function OpenWorkCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const card = useCard(t, \"id\");\n\n    if (currentWork.value?.cardId === undefined)\n        return null;\n\n    if (card === undefined || currentWork.value.cardId === card.id)\n        return null;\n\n    return (\n        <button\n            className={`open-work ${props.className}`}\n            onClick={() => t.showCard(currentWork.value!.cardId)}\n        >\n            Open work card\n        </button>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { enumerateWork, Estimate, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { useCard } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\n\ntype Props = {\n    estimate: Estimate,\n    member: Trello.PowerUp.Member,\n}\n\ntype MembersObject = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function WorkDetails(props: Props) {\n    const t = useProvidedTrello();\n    const { estimate, member } = props;\n    const [showDetails, setShowDetails] = useState(false);\n    const [members, setMembers] = useState<MembersObject>();\n    const card = useCard(t, \"id\", \"dueComplete\");\n    const currentWork = useCurrentWork();\n    let elapsedWorkMinutes = useElapsedMinutes(currentWork.value?.startDate);\n\n    if (currentWork.value?.cardId !== card?.id)\n        elapsedWorkMinutes = 0;\n\n    useEffect(\n        () => {\n            if (!showDetails || members !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MembersObject = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMembers(obj);\n            });\n        },\n        [showDetails, members],\n    );\n\n    const totalWork = getTotalWorkMinutes(estimate) + elapsedWorkMinutes;\n    const myWork = elapsedWorkMinutes + estimate.workMinutes[member.id!] ?? 0;\n    const remainingWork = getRemainingWorkMinutes(estimate, card?.dueComplete ?? false, totalWork);\n\n    return (\n        <>\n            <div className='card-label'>\n                Work: {formatMinutes(totalWork)}\n                {\" \"}\n                {myWork < totalWork && `(mine: ${formatMinutes(myWork)})`}\n                {\" \"}\n                {myWork < totalWork\n                    && <span\n                        className='work-details link-like'\n                        onClick={() => setShowDetails(current => !current)}\n                    >\n                        details\n                    </span>\n                }\n                {\" | \"} Remaining: {formatMinutes(remainingWork)}\n            </div>\n            {showDetails && members !== undefined\n                && <div>\n                    {[...enumerateWork(estimate)]\n                        .filter(item => item.minutes > 0)\n                        .map(item => {\n                            const member = members[item.memberId];\n                            return (\n                                <div key={item.memberId}>\n                                    {member?.fullName ?? \"<missing>\"}\n                                    {member && \" \"}\n                                    {member !== undefined ? `(${member.username})` : \"\"}\n                                    {\": \"}\n                                    {formatMinutes(item.minutes)}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            }\n        </>\n    );\n}\n","import React, { useState } from \"react\";\n\nimport { formatMinutes, hoursPerDay, parseTimeDelta } from \"../utils/timeParsing\";\nimport { useMember } from \"../hooks/useMember\";\nimport { useEstimate } from \"../hooks/useEstimate\";\nimport { WorkButton } from \"../components/WorkButton\";\nimport { CompleteCardButton } from \"../components/CompleteCardButton\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { OpenWorkCardButton } from \"../components/OpenWorkCardButton\";\nimport { closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { WorkDetails } from \"../components/WorkDetails\";\nimport { useInit } from \"../jk/hooks/useInit\";\n\nexport default function CardBackSectionPage() {\n    const t = useProvidedTrello();\n    const estimate = useEstimate(t);\n    const [inputEstimate, setInputEstimate] = useState<string>(\"\");\n    const member = useMember(t, \"id\");\n\n    useInit(() => {\n        estimate.refresh();\n\n        t.render(async () => {\n            return estimate.refresh();\n        });\n    });\n\n    function parseAndRun<T>(action: (parsedMinutes: number) => T) {\n        const parsedMinutes = parseTimeDelta(inputEstimate);\n\n        if (isNaN(parsedMinutes)) {\n            t.alert({\n                display: \"error\",\n                message: \"invalid input\",\n                duration: 4,\n            });\n            return;\n        }\n\n        const val = action(parsedMinutes);\n\n        setInputEstimate(\"\");\n\n        return val;\n    }\n\n    function parseAndChangeEstimate(computeNewEstimate: (previousMinutes: number, parsedMinutes: number) => number) {\n        parseAndRun(parsedMinutes => {\n            estimate.set(current => ({\n                ...current,\n                estimateMinutes: computeNewEstimate(current.estimateMinutes, parsedMinutes),\n            }));\n        });\n    }\n\n    function parseAndChangeWork(computeNewWork: (previousMinutes: number, parsedMinutes: number) => number) {\n        return parseAndRun(parsedMinutes =>\n            estimate.set(current => ({\n                ...current,\n                workMinutes: {\n                    ...current.workMinutes,\n                    [member!.id]: computeNewWork(current.workMinutes[member!.id] ?? 0, parsedMinutes),\n                },\n            })));\n    }\n\n    function parseAndChangeWorkAndSession(args: {\n        computeNewWork: (previousMinutes: number, parsedMinutes: number) => number,\n        askConfirm: boolean,\n        mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    }) {\n        runAndUpdateSession({\n            action: () => parseAndChangeWork(args.computeNewWork),\n            askConfirm: args.askConfirm,\n            mouseEvent: args.mouseEvent,\n        });\n    }\n\n    async function runAndUpdateSession(args: {\n        action: () => ReturnType<typeof estimate.set>,\n        askConfirm: boolean,\n        mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    }) {\n        const delta = await args.action();\n\n        if (!delta)\n            return;\n\n        const myWorkDelta = delta.workMinutes[member!.id];\n        if (myWorkDelta === undefined)\n            return;\n\n        function updateSession() {\n            return closeIfOldAndEditCurrentWorkSession(t, {\n                action: async session => ({\n                    ...session,\n                    workMinutes: session.workMinutes + myWorkDelta,\n                }),\n                hoursPerDay,\n                mouseEvent: args.mouseEvent,\n            });\n        }\n\n        if (args.askConfirm) {\n            t.popup({\n                type: \"confirm\",\n                title: \"Add to session?\",\n                message: \"Should this work change count in your work session?\",\n                confirmText: \"Yes\",\n                onConfirm: tp => {\n                    tp.closePopup();\n                    return updateSession();\n                },\n                cancelText: \"No\",\n                onCancel: tp => tp.closePopup(),\n                mouseEvent: args.mouseEvent.nativeEvent,\n            });\n        }\n        else {\n            updateSession();\n        }\n    }\n\n    return (\n        <div>\n            {estimate.value === undefined && (\n                <p>Loading...</p>\n            )}\n            {estimate.value !== undefined && (<>\n                <div className='card-input-header'>\n                    <input\n                        value={inputEstimate}\n                        onChange={e => setInputEstimate(e.target.value)}\n                        placeholder=\"input for all buttons...\"\n                    />\n                    <WorkButton onEstimateChanged={estimate.refresh} />\n                    <div className='top-right'>\n                        <OpenWorkCardButton />\n                        <CompleteCardButton />\n                    </div>\n                </div>\n                <div>\n                    <div className='card-label'>\n                        Estimate: {formatMinutes(estimate.value.estimateMinutes)}\n                    </div>\n                    <button onClick={() => parseAndChangeEstimate((_, parsedMinutes) => parsedMinutes)}>\n                        Set\n                    </button>\n                    <button onClick={() => parseAndChangeEstimate((previousMinutes, parsedMinutes) => previousMinutes + parsedMinutes)}>\n                        +\n                    </button>\n                    <button onClick={() => parseAndChangeEstimate((previousMinutes, parsedMinutes) => previousMinutes - parsedMinutes)}>\n                        -\n                    </button>\n                    <button\n                        onClick={() => estimate.set(current => ({\n                            ...current,\n                            estimateMinutes: 0,\n                        }))}\n                    >\n                        Clear\n                    </button>\n                </div>\n                {member !== undefined && (\n                    <div>\n                        <WorkDetails\n                            estimate={estimate.value}\n                            member={member}\n                        />\n                        <button\n                            onClick={e => parseAndChangeWorkAndSession({\n                                computeNewWork: (_, parsedMinutes) => parsedMinutes,\n                                askConfirm: true,\n                                mouseEvent: e,\n                            })}\n                        >\n                            Set\n                        </button>\n                        <button\n                            onClick={e => parseAndChangeWorkAndSession({\n                                computeNewWork: (previousMinutes, parsedMinutes) => previousMinutes + parsedMinutes,\n                                askConfirm: false,\n                                mouseEvent: e,\n                            })}\n                        >\n                            +\n                        </button>\n                        <button\n                            onClick={e => parseAndChangeWorkAndSession({\n                                computeNewWork: (previousMinutes, parsedMinutes) => previousMinutes - parsedMinutes,\n                                askConfirm: true,\n                                mouseEvent: e,\n                            })}\n                        >\n                            -\n                        </button>\n                        <button\n                            onClick={e => runAndUpdateSession({\n                                action: () => estimate.set(current => ({\n                                    ...current,\n                                    workMinutes: {\n                                        ...current.workMinutes,\n                                        [member!.id]: 0,\n                                    },\n                                })),\n                                askConfirm: true,\n                                mouseEvent: e,\n                            })}\n                        >\n                            Clear mine\n                        </button>\n                    </div>\n                )}\n                {estimate.feedback && <div>{estimate.feedback}</div>}\n            </>)}\n        </div>\n    );\n}\n","import { useState, useMemo } from \"react\";\n\nimport { Estimate, getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\n\nexport function useEstimate(t: Trello.PowerUp.IFrame, autosave = true) {\n    const [estimate, setEstimate] = useState<Estimate>();\n    const [feedback, setFeedback] = useState(\"\");\n\n    const refresh = useMemo(\n        () => async () => {\n            const fetchedEstimate = await getCardEstimate(t);\n            setEstimate(fetchedEstimate);\n        },\n        noDeps,\n    );\n\n    const set = useMemo(\n        () => (action: (estimate: Estimate) => Estimate) => {\n            if (estimate === undefined)\n                return;\n\n            const updated = action(estimate);\n\n            const delta: Estimate = {\n                estimateMinutes: updated.estimateMinutes - estimate.estimateMinutes,\n                workMinutes: {},\n            };\n\n            for (const memberId in updated.workMinutes)\n                delta.workMinutes[memberId] = updated.workMinutes[memberId] - (estimate.workMinutes[memberId] ?? 0);\n\n            if (!autosave)\n                return;\n\n            setFeedback(\"saving...\");\n\n            return getCardEstimate(t)\n                .then(remoteEstimate => {\n                    const updatedRemote: Estimate = {\n                        estimateMinutes: remoteEstimate.estimateMinutes + delta.estimateMinutes,\n                        workMinutes: {},\n                    };\n\n                    for (const memberId in delta.workMinutes)\n                        updatedRemote.workMinutes[memberId] = (remoteEstimate.workMinutes[memberId] ?? 0) + delta.workMinutes[memberId];\n\n                    return setCardEstimate(t, updatedRemote);\n                })\n                .then(updatedRemote => {\n                    setEstimate(updatedRemote);\n                    setFeedback(\"saved!\");\n                    setTimeout(() => setFeedback(\"\"), 1000);\n                    return delta;\n                })\n                .catch(err => {\n                    setFeedback(\"\");\n                    t.alert({\n                        display: \"error\",\n                        message: `error during save: ${err}`,\n                    });\n                });\n        },\n        [estimate, autosave],\n    );\n\n    return useMemo(\n        () => ({\n            value: estimate,\n            set,\n            feedback,\n            refresh,\n        }),\n        [estimate, feedback],\n    );\n}\n\nexport type UsedEstimate = ReturnType<typeof useEstimate>;\n"],"names":["enumerateKeys","object","key","baseurl","apiKey","process","updateCardFields","token","cardId","fields","request","query","queryString","Array","from","join","url","method","fetch","headers","Accept","then","response","json","data","CompleteCardButton","props","t","useProvidedTrello","useCardWithRefresh","card","refresh","className","onClick","undefined","scope","getRestApi","isAuthorized","authorized","Error","catch","authorize","getToken","getAuthorizedRestApi","id","due","dueComplete","Date","toISOString","err","console","error","OpenWorkCardButton","currentWork","useCurrentWork","useCard","value","showCard","WorkDetails","estimate","member","useState","showDetails","setShowDetails","members","setMembers","elapsedWorkMinutes","useElapsedMinutes","startDate","useEffect","board","res","obj","m","totalWork","getTotalWorkMinutes","myWork","workMinutes","remainingWork","getRemainingWorkMinutes","formatMinutes","current","enumerateWork","filter","item","minutes","map","memberId","fullName","username","CardBackSectionPage","autosave","setEstimate","feedback","setFeedback","useMemo","getCardEstimate","fetchedEstimate","noDeps","set","action","updated","delta","estimateMinutes","remoteEstimate","updatedRemote","setCardEstimate","setTimeout","alert","display","message","useEstimate","inputEstimate","setInputEstimate","useMember","parseAndRun","parsedMinutes","parseTimeDelta","isNaN","val","duration","parseAndChangeEstimate","computeNewEstimate","parseAndChangeWorkAndSession","args","runAndUpdateSession","computeNewWork","askConfirm","mouseEvent","updateSession","closeIfOldAndEditCurrentWorkSession","session","myWorkDelta","hoursPerDay","popup","type","title","confirmText","onConfirm","tp","closePopup","cancelText","onCancel","nativeEvent","useInit","render","onChange","e","target","placeholder","WorkButton","onEstimateChanged","_","previousMinutes"],"sourceRoot":""}