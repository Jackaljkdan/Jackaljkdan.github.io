{"version":3,"file":"static/js/786.3db92da5.chunk.js","mappings":"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","sources":["api/estimateApi.ts","api/events/apiEvents.ts","jk/events/createEvent.ts","utils/truncate.ts","components/WorkButton.tsx","hooks/useCard.ts","hooks/useCurrentWork.ts","hooks/useElapsed.ts","hooks/useMember.ts","hooks/useProvidedTrello.ts","hooks/useTrelloRender.ts","jk/hooks/useInit.ts","jk/noDeps.ts","utils/dateFormatting.ts","utils/dateMath.ts","utils/mathParsing.ts","utils/timeParsing.ts","utils/workDelta.ts","utils/workSessionsUtils.ts"],"sourcesContent":["import { Trello } from \"../types/trello\";\nimport { currentWorkChangedEvent } from \"./events/apiEvents\";\n\nexport type UserMinutes = {\n    [key: string]: number,\n}\n\nexport type Estimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: UserMinutes,\n}\n\nexport type SummaryEstimate = {\n    estimateMinutes: number,\n    updatedEstimateMinutes: number,\n    workMinutes: number,\n    remainingMinutes: number,\n    deltaMinutes: number,\n}\n\nexport type CurrentWork = {\n    cardId: string,\n    startDate: Date,\n}\n\nexport type WorkSession = {\n    startDate: Date,\n    endDate?: Date,\n    workMinutes: number,\n}\n\nexport async function getMyWorkMinutes(estimate: Estimate, t: Trello.PowerUp.IFrame): Promise<number> {\n    const me = await t.member(\"id\");\n    return estimate.workMinutes[me.id];\n}\n\nexport function getTotalWorkMinutes(estimate: Estimate) {\n    let sum = 0;\n    for (const workerId in estimate.workMinutes)\n        sum += estimate.workMinutes[workerId];\n    return sum;\n}\n\nexport function getRemainingWorkMinutes(estimate: Estimate, dueComplete: boolean, totalWorkMinutes?: number) {\n    if (dueComplete)\n        return 0;\n\n    if (totalWorkMinutes === undefined)\n        totalWorkMinutes = getTotalWorkMinutes(estimate);\n\n    return (estimate.updatedEstimateMinutes || estimate.estimateMinutes) - totalWorkMinutes;\n}\n\nexport function* enumerateWork(estimate: Estimate) {\n    for (const memberId in estimate.workMinutes) {\n        yield {\n            memberId,\n            minutes: estimate.workMinutes[memberId],\n        };\n    }\n}\n\nexport function getUpdatedEstimate(estimate: Estimate) {\n    if (estimate.updatedEstimateMinutes !== 0)\n        return estimate.updatedEstimateMinutes;\n    else\n        return estimate.estimateMinutes;\n}\n\nexport async function getCardEstimate(t: Trello.PowerUp.IFrame, cardId?: string): Promise<Estimate> {\n    const estimate = JSON.parse(await t.get(cardId ?? \"card\", \"shared\", \"estimate\", \"null\")) as Estimate;\n    if (estimate === null) {\n        return {\n            estimateMinutes: 0,\n            updatedEstimateMinutes: 0,\n            workMinutes: {},\n        };\n    }\n    return estimate;\n}\n\nexport async function setCardEstimate(t: Trello.PowerUp.IFrame, estimate: Estimate, cardId?: string) {\n    await t.set(cardId ?? \"card\", \"shared\", \"estimate\", JSON.stringify(estimate));\n    await setLastInputTimeToNow(t);\n    return estimate;\n}\n\nexport async function getAllCardsEstimates(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"id\"];\n\n    const cards: Trello.PowerUp.Card[] = await t.cards(...fields);\n    return await Promise.all(cards.map(card =>\n        getCardEstimate(t, card.id).then(estimate => ({\n            ...estimate,\n            card: card,\n        }))));\n}\n\nexport async function getBoardEstimates(t: Trello.PowerUp.IFrame) {\n    const estimates = await getAllCardsEstimates(t, \"id\", \"dueComplete\");\n\n    const summary: SummaryEstimate = {\n        estimateMinutes: 0,\n        updatedEstimateMinutes: 0,\n        workMinutes: 0,\n        remainingMinutes: 0,\n        deltaMinutes: 0,\n    };\n\n    for (const est of estimates) {\n        summary.estimateMinutes += est.estimateMinutes;\n\n        const totalWorkMinutes = getTotalWorkMinutes(est);\n        summary.workMinutes += totalWorkMinutes;\n\n        const remaining = getRemainingWorkMinutes(est, est.card.dueComplete);\n        summary.remainingMinutes += remaining > 0 ? remaining : 0;\n\n        summary.updatedEstimateMinutes += !est.card.dueComplete\n            ? (est.updatedEstimateMinutes || est.estimateMinutes)\n            : totalWorkMinutes;\n\n        if (est.card.dueComplete || totalWorkMinutes > est.estimateMinutes)\n            summary.deltaMinutes += est.estimateMinutes - totalWorkMinutes;\n    }\n\n    return summary;\n}\n\nexport async function getCurrentWork(t: Trello.PowerUp.IFrame) {\n    // console.log(\"getting current work\");\n\n    const currentWork = JSON.parse(await t.get(\"board\", \"private\", \"work\", \"null\")) as CurrentWork | null;\n\n    if (currentWork !== null)\n        // js parses dates as strings so i have to convert it here\n        currentWork.startDate = new Date(currentWork.startDate);\n\n    return currentWork;\n}\n\nexport async function setCurrentWork(t: Trello.PowerUp.IFrame, currentWork: CurrentWork | null) {\n    // console.log(\"setting current work\");\n    await t.set(\"board\", \"private\", \"work\", JSON.stringify(currentWork ?? null));\n    currentWorkChangedEvent.emit();\n}\n\nexport async function getWorkSessions(t: Trello.PowerUp.IFrame) {\n    const sessions = JSON.parse(await t.get(\"board\", \"private\", \"work_sessions\", \"[]\")) as WorkSession[];\n\n    for (const s of sessions) {\n        s.startDate = new Date(s.startDate);\n        if (s.endDate !== undefined)\n            s.endDate = new Date(s.endDate);\n    }\n\n    return sessions;\n}\n\nexport async function setWorkSessions(t: Trello.PowerUp.IFrame, sessions: WorkSession[]) {\n    await t.set(\"board\", \"private\", \"work_sessions\", JSON.stringify(sessions));\n}\n\nconst maxWorkSessions = 10;\n\nfunction addWorkSession(sessions: WorkSession[]) {\n    if (sessions.length >= maxWorkSessions)\n        sessions.shift();\n\n    const added: WorkSession = {\n        startDate: new Date(),\n        workMinutes: 0,\n    };\n\n    sessions.push(added);\n\n    return added;\n}\n\nexport async function editCurrentWorkSession(t: Trello.PowerUp.IFrame, action: (session: WorkSession) => Promise<WorkSession>) {\n    const sessions = await getWorkSessions(t);\n    let current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        current = addWorkSession(sessions);\n\n    sessions[sessions.length - 1] = await action(current);\n\n    await setWorkSessions(t, sessions);\n}\n\nexport async function getMarginMultiplier(t: Trello.PowerUp.IFrame) {\n    const margin = await t.get(\"board\", \"shared\", \"margin\", 0.2) as number;\n    return margin;\n}\n\nexport async function setMaringMultiplier(t: Trello.PowerUp.IFrame, marginMultiplier: number) {\n    await t.set(\"board\", \"shared\", \"margin\", marginMultiplier);\n}\n\nexport async function getLastInputTime(t: Trello.PowerUp.IFrame) {\n    const time = await t.get(\"board\", \"private\", \"last_input_time\", null) as string | null;\n\n    if (time)\n        return new Date(time);\n\n    return null;\n}\n\nexport async function setLastInputTime(t: Trello.PowerUp.IFrame, time: Date) {\n    await t.set(\"board\", \"private\", \"last_input_time\", time);\n}\n\nexport async function setLastInputTimeToNow(t: Trello.PowerUp.IFrame) {\n    setLastInputTime(t, new Date());\n}\n","import EventEmitter from \"eventemitter3\";\r\nimport { createEvent } from \"../../jk/events/createEvent\";\r\n\r\nexport const apiEventEmitter = new EventEmitter();\r\n\r\nexport const currentWorkChangedEvent = createEvent<void>(apiEventEmitter, \"work.current.changed\");\r\n","import EventEmitter from \"eventemitter3\";\r\n\r\ninterface Listener<T> {\r\n    (arg: T): void;\r\n}\r\n\r\nexport type Event<T> = {\r\n    on: (listener: Listener<T>) => Listener<T>;\r\n    once: (listener: Listener<T>) => Listener<T>;\r\n    off: (listener: Listener<T>) => Listener<T>;\r\n    emit: (arg: T) => void;\r\n}\r\n\r\nexport function createEvent<T>(eventEmitter: EventEmitter, key: string): Event<T> {\r\n    return {\r\n        on: listener => {\r\n            eventEmitter.on(key, listener);\r\n            return listener;\r\n        },\r\n        once: listener => {\r\n            eventEmitter.once(key, listener);\r\n            return listener;\r\n        },\r\n        off: listener => {\r\n            eventEmitter.off(key, listener);\r\n            return listener;\r\n        },\r\n        emit: arg => eventEmitter.emit(key, arg),\r\n    };\r\n}\r\n","\nexport function truncateString(str: string, maxLength = 10) {\n    if (str.length < maxLength)\n        return str;\n    else\n        return str.substring(0, maxLength - 3) + \"...\";\n}\n","import React from \"react\";\n\nimport \"./WorkButton.scss\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useCardById, useProvidedCard } from \"../hooks/useCard\";\nimport { getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { formatMinutesWithOptions, hoursPerDay } from \"../utils/timeParsing\";\nimport { truncateString } from \"../utils/truncate\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { useMember } from \"../hooks/useMember\";\nimport { addMinutesToDate, getElapsedSeconds } from \"../utils/dateMath\";\nimport { askToCloseOldSessionAndCreateNew, closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { If } from \"../jk/types/jsxControlStatements\";\n\ntype Props = {\n    onEstimateChanged?: () => void;\n}\n\nexport function WorkButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(currentWork.value?.startDate);\n    const providedCard = useProvidedCard(\"id\");\n    const workCard = useCardById(t, currentWork.value?.cardId, \"id\", \"name\");\n    const member = useMember(t, \"id\");\n\n    const isWorking = currentWork.value?.cardId !== undefined && !currentWork.isSaving;\n\n    if (!providedCard && !isWorking)\n        return null;\n\n    return (\n        <div className=\"work-button-wrapper\">\n            <button\n                className={`work-button ${!isWorking ? \"mod-primary\" : \"mod-danger\"}`}\n                onClick={async e => {\n                    if (member === undefined)\n                        return;\n\n                    if (!isWorking && providedCard !== undefined) {\n                        currentWork.set({\n                            cardId: providedCard.id,\n                            startDate: new Date(),\n                        });\n\n                        askToCloseOldSessionAndCreateNew(t, {\n                            hoursPerDay,\n                            mouseEvent: e,\n                        });\n                    }\n                    else if (isWorking) {\n                        const seconds = Math.round(getElapsedSeconds(currentWork.value!.startDate));\n                        const minutes = seconds / 60;\n\n                        currentWork.set(null);\n\n                        const estimate = await getCardEstimate(t, currentWork.value!.cardId);\n                        await setCardEstimate(\n                            t,\n                            {\n                                ...estimate,\n                                workMinutes: {\n                                    ...estimate.workMinutes,\n                                    [member.id]: (estimate.workMinutes[member.id] ?? 0) + minutes,\n                                },\n                            },\n                            currentWork.value!.cardId,\n                        );\n\n                        await closeIfOldAndEditCurrentWorkSession(t, {\n                            action: async session => {\n                                if (session.workMinutes === 0)\n                                    session.startDate = addMinutesToDate(session.startDate, -minutes);\n                                session.workMinutes += minutes;\n                                return session;\n                            },\n                            hoursPerDay,\n                            mouseEvent: e,\n                        });\n\n                        props.onEstimateChanged?.();\n                    }\n                }}\n            >\n                <If condition={currentWork.isSaving}>\n                ...\n                </If>\n                <If condition={!currentWork.isSaving}>\n                    {!isWorking ? \"Start work\" : \"End work\"}\n                    <If condition={isWorking}>\n                        {\" \" + formatMinutesWithOptions(elapsedWorkMinutes, { zero: \"\" })}\n                    </If>\n                    <If condition={isWorking && providedCard?.id !== currentWork.value?.cardId}>\n                        {` (on${providedCard ? \" other\" : \"\"} card${workCard === undefined ? \"\" : `: \"${truncateString(workCard.name, 8)}\"`})`}\n                    </If>\n                </If>\n            </button>\n            <If condition={isWorking}>\n                <button\n                    className=\"cancel-work-button\"\n                    onClick={e => t.popup({\n                        type: \"confirm\",\n                        title: \"Cancel work?\",\n                        message: \"Are you sure you want to cancel the work in progress?\",\n                        confirmText: \"Yes\",\n                        onConfirm: tp => {\n                            currentWork.set(null);\n                            return tp.closePopup();\n                        },\n                        cancelText: \"No\",\n                        onCancel: tp => tp.closePopup(),\n                        mouseEvent: e.nativeEvent,\n                    })}\n                >\n                    X\n                </button>\n            </If>\n        </div>\n    );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRender } from \"./useTrelloRender\";\n\nexport function useCardDueCompletedQuery(t: Trello.PowerUp.IFrame) {\n    const queryKey = \"card\";\n    const queryClient = useQueryClient();\n\n    const query = useQuery(\n        queryKey,\n        async () => {\n            const card = await t.card(\"dueComplete\");\n            return card.dueComplete;\n        },\n        { staleTime: 1000 },\n    );\n\n    const setData = useCallback(\n        (data: boolean) => queryClient.setQueryData(queryKey, data),\n        [queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            ...query,\n            setData,\n        }),\n        [query, setData],\n    );\n}\n\nexport function useCardWithFunctions(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    const refresh = useCallback(\n        async () => {\n            let fetched: Trello.PowerUp.Card;\n\n            try {\n                fetched = await t.card(...fields);\n            }\n            catch (error) {\n                console.warn(\"no card in context\");\n                return;\n            }\n\n            // console.log(\"refreshed card complete\", fetched.dueComplete);\n\n            setCard(fetched);\n        },\n        noDeps,\n    );\n\n    useTrelloRender(t, refresh);\n\n    return useMemo(\n        () => ({\n            card,\n            refresh,\n            setCard,\n        }),\n        [card],\n    );\n}\n\nexport function useCard(t: Trello.PowerUp.IFrame, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const { card } = useCardWithFunctions(t, ...fields);\n    return card;\n}\n\nexport function useProvidedCard(...fields: (keyof Trello.PowerUp.Card)[]) {\n    const t = useProvidedTrello();\n    return useCard(t, ...fields);\n}\n\nexport function useCardById(t: Trello.PowerUp.IFrame, cardId: string | undefined, ...fields: (keyof Trello.PowerUp.Card)[]) {\n    const [card, setCard] = useState<Trello.PowerUp.Card>();\n\n    useEffect(\n        () => {\n            async function refresh() {\n                if (cardId === undefined)\n                    return;\n\n                const cards = await t.cards(...fields);\n                for (const c of cards) {\n                    if (c.id === cardId) {\n                        setCard(c);\n                        break;\n                    }\n                }\n            }\n            refresh();\n            t.render(refresh);\n        },\n        [cardId],\n    );\n\n    return card;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { CurrentWork, getCurrentWork, setCurrentWork } from \"../api/estimateApi\";\nimport { currentWorkChangedEvent } from \"../api/events/apiEvents\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { Trello } from \"../types/trello\";\nimport { minutesToMs } from \"../utils/timeParsing\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\nimport { useTrelloRenderWithOptions } from \"./useTrelloRender\";\n\nconst queryKey = \"current_work\";\n\nexport function useCurrentWorkQuery(t: Trello.PowerUp.IFrame) {\n    // N.B. la query sembra che non venga cachata, penso che il motivo sia che\n    // ogni volta che viene aperta una scheda viene avviata una nuova\n    // istanza di react\n    const query = useQuery(\n        queryKey,\n        () => getCurrentWork(t),\n        {\n            staleTime: minutesToMs(2),\n            cacheTime: Infinity,\n            refetchOnMount: false,\n            refetchOnReconnect: false,\n            refetchOnWindowFocus: false,\n        },\n    );\n\n    useTrelloRenderWithOptions(t, {\n        refresh: query.refetch,\n        callImmediately: false,\n    });\n\n    useInit(() => {\n        const listener = currentWorkChangedEvent.on(query.refetch as any);\n        return () => currentWorkChangedEvent.off(listener) as any;\n    });\n\n    return query;\n}\n\nexport function useCurrentWork() {\n    const t = useProvidedTrello();\n    const queryClient = useQueryClient();\n    const query = useCurrentWorkQuery(t);\n    const [isSaving, setIsSaving] = useState(false);\n\n    // console.log(\"query stale: \" + query.isStale);\n\n    const set = useCallback(\n        async (updated: CurrentWork | null) => {\n            setIsSaving(true);\n            await setCurrentWork(t, updated);\n            // console.log(\"setting query data\");\n            queryClient.setQueryData(queryKey, updated);\n            setIsSaving(false);\n        },\n        [t, queryClient],\n    );\n\n    return useMemo(\n        () => ({\n            value: query.data,\n            isSaving,\n            set,\n        }),\n        [query.data, isSaving, set],\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport { getElapsedMs } from \"../utils/dateMath\";\n\nexport function useElapsedMinutes(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000 / 60;\n}\n\nexport function useElapsedSeconds(startDate: Date | undefined) {\n    return useElapsedMs(startDate) / 1000;\n}\n\nexport function useElapsedMs(startDate: Date | undefined) {\n    const [ms, setMs] = useState(0);\n\n    useEffect(\n        () => {\n            if (startDate === undefined) {\n                setMs(0);\n                return;\n            }\n\n            let animationFrameId: number;\n            let canceled = false;\n\n            function updateSeconds() {\n                setMs(getElapsedMs(startDate!));\n\n                if (!canceled)\n                    animationFrameId = requestAnimationFrame(updateSeconds);\n            }\n\n            animationFrameId = requestAnimationFrame(updateSeconds);\n\n            return () => {\n                canceled = true;\n                cancelAnimationFrame(animationFrameId);\n            };\n        },\n        [startDate],\n    );\n\n    return ms;\n}\n","import { useEffect, useState } from \"react\";\n\nimport { Trello } from \"../types/trello\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport function useMember(t: Trello.PowerUp.IFrame, ...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const state = useState<Trello.PowerUp.Member>();\n    const [member, setMember] = state;\n\n    useEffect(\n        () => {\n            const actualFields = fields !== undefined && fields.length > 0\n                ? fields\n                : [\"id\"] as Trello.PowerUp.MemberFields[];\n            t.member(...actualFields).then(res => setMember(res));\n        },\n        [t],\n    );\n\n    return member;\n}\n\nexport function useProvidedMember(...fields: [\"all\"] | Trello.PowerUp.MemberFields[]) {\n    const t = useProvidedTrello();\n    return useMember(t, ...fields);\n}\n","import { Trello } from \"../types/trello\";\n\nlet t: Trello.PowerUp.IFrame;\n\nexport function useProvidedTrello() {\n    if (t === undefined) {\n        t = window.TrelloPowerUp.iframe({\n            appName: process.env.REACT_APP_POWERUP_NAME,\n            appKey: process.env.REACT_APP_POWERUP_APP_KEY,\n        });\n    }\n\n    return t;\n}\n","import { Trello } from \"../types/trello\";\nimport { useInit } from \"../jk/hooks/useInit\";\nimport { useProvidedTrello } from \"./useProvidedTrello\";\n\nexport type TrelloRenderOptions = {\n    refresh: () => void;\n    callImmediately?: boolean;\n}\n\nexport function useTrelloRenderWithOptions(t: Trello.PowerUp.IFrame, options: TrelloRenderOptions) {\n    useInit(() => {\n        if (options.callImmediately)\n            options.refresh();\n        t.render(options.refresh);\n    });\n}\n\nexport function useTrelloRender(t: Trello.PowerUp.IFrame, refresh: () => void) {\n    return useTrelloRenderWithOptions(t, {\n        refresh,\n        callImmediately: true,\n    });\n}\n\nexport function useProvidedTrelloRender(refresh: () => void) {\n    const t = useProvidedTrello();\n    return useTrelloRender(t, refresh);\n}\n","import React, { useEffect } from \"react\";\nimport { noDeps } from \"../noDeps\";\n\nexport function useInit(effect: React.EffectCallback) {\n    return useEffect(effect, noDeps);\n}\n","export const noDeps = [];\n","export type DateFormat =\r\n    \"yyyy-MM-dd\"\r\n    | \"yyyy-MM-dd hh:mm:ss\"\r\n;\r\n\r\nexport function formatDate(date: Date, format: DateFormat = \"yyyy-MM-dd\") {\r\n    return format\r\n        .replaceAll(\"yyyy\", date.getFullYear().toString())\r\n        .replaceAll(\"MM\", (date.getMonth() + 1).toString().padStart(2, \"0\"))\r\n        .replaceAll(\"dd\", date.getDate().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"hh\", date.getHours().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"mm\", date.getMinutes().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"ss\", date.getSeconds().toString().padStart(2, \"0\"));\r\n}\r\n","import { minutesToMs, msToMinutes } from \"./timeParsing\";\n\nexport function addMinutesToDate(date: Date, minutes: number) {\n    return new Date(date.getTime() + minutesToMs(minutes));\n}\n\nexport function getMsBetween(earlierDate: Date, laterDate: Date) {\n    return laterDate.getTime() - earlierDate.getTime();\n}\n\nexport function getMinutesBetween(earlierDate: Date, laterDate: Date) {\n    return msToMinutes(getMsBetween(earlierDate, laterDate));\n}\n\nexport function getElapsedMs(date: Date) {\n    return Date.now() - date.getTime();\n}\n\nexport function getElapsedSeconds(date: Date) {\n    return getElapsedMs(date) / 1000;\n}\n\nexport function getElapsedMinutes(date: Date) {\n    return getElapsedMs(date) / 1000 / 60;\n}\n\nexport function areDatesEqual(date1: Date, date2: Date) {\n    return date1?.getTime() === date2?.getTime();\n}\n","\nexport function evaluateMathExpression(expression: string) {\n    if (/^[0-9.()+*-/]+$/.test(expression)) {\n        try {\n            return eval(expression) as number;\n        }\n        catch (error) {\n            return NaN;\n        }\n    }\n    else {\n        return NaN;\n    }\n}\n","import { Trello } from \"../types/trello\";\nimport { evaluateMathExpression } from \"./mathParsing\";\n\nexport const hoursPerDay = 8;\n\nexport function parseTimeDelta(timeDeltaString: string) {\n    timeDeltaString = timeDeltaString.replaceAll(\" \", \"\");\n    timeDeltaString = timeDeltaString.replaceAll(\",\", \".\");\n    timeDeltaString = timeDeltaString.toLowerCase();\n\n    if (!/^([^a-z]+[a-z]+)+$/.test(timeDeltaString)) {\n        // console.log(\"desk rejected\");\n        return NaN;\n    }\n\n    let minutes = 0;\n\n    for (const match of timeDeltaString.matchAll(/([^a-z]+)([a-z]+)/g)) {\n        const timeLabel = match[2];\n\n        if (timeLabel.length !== 1)\n            return NaN;\n\n        let multiplier: number;\n\n        if (timeLabel === \"m\")\n            multiplier = 1;\n        else if (timeLabel === \"h\")\n            multiplier = 60;\n        else if (timeLabel === \"d\")\n            multiplier = 60 * hoursPerDay;\n        else\n            return NaN;\n\n        const expressionResult = evaluateMathExpression(match[1]);\n\n        if (isNaN(expressionResult))\n            return NaN;\n\n        minutes += multiplier * expressionResult;\n    }\n\n    if (minutes <= 0)\n        return NaN;\n\n    return minutes;\n}\n\nexport function parseAndRun<T>(t: Trello.PowerUp.IFrame, [input, setInput]: UsedState<string>, action: (parsedMinutes: number) => T) {\n    const parsedMinutes = parseTimeDelta(input);\n\n    if (isNaN(parsedMinutes)) {\n        t.alert({\n            display: \"error\",\n            message: \"invalid input\",\n            duration: 4,\n        });\n        return;\n    }\n\n    const val = action(parsedMinutes);\n\n    setInput(\"\");\n\n    return val;\n}\n\nexport type FormatMinutesOptions = {\n    zero: string,\n    negative: string,\n    hoursPerDay: number,\n}\n\nconst defaultOptions: FormatMinutesOptions = {\n    zero: \"none\",\n    negative: \"?\",\n    hoursPerDay: 8,\n};\n\nexport function formatMinutes(minutes: number) {\n    return formatMinutesWithOptions(minutes );\n}\n\nexport function formatMinutesWithOptions(minutes: number, options: Partial<FormatMinutesOptions> = defaultOptions) {\n    if (isNaN(minutes))\n        return \"NaN\";\n\n    if (minutes < 0)\n        return options.negative ?? defaultOptions.negative;\n\n    if (minutes === 0)\n        return options.zero ?? defaultOptions.zero;\n\n    const hoursPerDay = options.hoursPerDay ?? defaultOptions.hoursPerDay;\n\n    let minutesPart = Math.floor(minutes % 60);\n    const flooredHours = Math.floor(minutes / 60);\n    const hoursPart = flooredHours % hoursPerDay;\n    const daysPart = Math.floor(flooredHours / hoursPerDay);\n\n    let secondsPart = 0;\n\n    // show seconds only if minutes < 1\n    if (minutes < 1) {\n        secondsPart = Math.round(minutes * 60);\n        minutesPart = 0;\n    }\n\n    let str = \"\";\n\n    if (daysPart > 0)\n        str += daysPart + \"d\";\n    if (hoursPart > 0)\n        str += hoursPart + \"h\";\n    if (minutesPart > 0)\n        str += minutesPart + \"m\";\n    if (secondsPart > 0)\n        str += secondsPart + \"s\";\n\n    return str;\n}\n\nexport function minutesToMs(minutes: number) {\n    return minutes * 60 * 1000;\n}\n\nexport function hoursToMs(hours: number) {\n    return minutesToMs(hours * 60);\n}\n\nexport function msToMinutes(ms: number) {\n    return (ms / 1000) / 60;\n}\n","import { CurrentWork, Estimate, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { getElapsedMinutes } from \"./dateMath\";\nimport { formatMinutes } from \"./timeParsing\";\n\ntype Args = {\n    cardId: Trello.PowerUp.Card[\"id\"] | undefined,\n    estimate: Estimate,\n    totalWorkMinutes?: number,\n    currentWork?: CurrentWork | null | undefined,\n}\n\nexport function getWorkDelta(args: Args) {\n    let totalWorkMinutes = args.totalWorkMinutes ?? getTotalWorkMinutes(args.estimate);\n\n    if (args.currentWork != null && args.currentWork.cardId === args.cardId)\n        totalWorkMinutes += getElapsedMinutes(args.currentWork.startDate);\n\n    return args.estimate.estimateMinutes - totalWorkMinutes;\n}\n\ntype FormattedArgs = {\n    delta: number,\n    short?: boolean,\n}\n\nexport function formatWorkDelta({ delta, short }: FormattedArgs) {\n    if (delta >= 0) {\n        if (short)\n            return \"S: \" + formatMinutes(delta);\n        else\n            return \"Saved: \" + formatMinutes(delta);\n    }\n    else {\n        if (short)\n            return \"S: -\" + formatMinutes(-delta);\n        else\n            return \"Spent: \" + formatMinutes(-delta);\n    }\n}\n","import { Trello } from \"../types/trello\";\nimport { editCurrentWorkSession, getWorkSessions, setWorkSessions, WorkSession } from \"../api/estimateApi\";\nimport { formatMinutesWithOptions, hoursToMs, msToMinutes } from \"./timeParsing\";\nimport { getElapsedMs } from \"./dateMath\";\n\ntype Options = {\n    hoursPerDay: number,\n    mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n}\n\ntype AskOptions = Options & {\n    action?: () => Promise<void>,\n}\n\ntype EditOptions = Options & {\n    action: (session: WorkSession) => Promise<WorkSession>,\n}\n\nexport async function askToCloseOldSession(t: Trello.PowerUp.IFrame, options: AskOptions): Promise<void> {\n    const sessions = await getWorkSessions(t);\n    const current = sessions[sessions.length - 1];\n\n    if (current === undefined || current.endDate !== undefined)\n        return options.action?.();\n\n    const sessionAgeMs = getElapsedMs(current.startDate);\n\n    if (sessionAgeMs < hoursToMs(options.hoursPerDay * 2))\n        return options.action?.();\n\n    const formattedAge = formatMinutesWithOptions(msToMinutes(sessionAgeMs), {\n        hoursPerDay: 24,\n    });\n\n    return new Promise((resolve, reject) => {\n        t.popup({\n            type: \"confirm\",\n            title: \"Close old session?\",\n            message: `The current session looks old (${formattedAge}), do you want to close it and open a new one to save this work?`,\n            confirmText: \"Yes\",\n            onConfirm: async tp => {\n                current.endDate = new Date();\n                await setWorkSessions(t, sessions);\n                resolve(options.action?.());\n                await tp.closePopup();\n            },\n            cancelText: \"No\",\n            onCancel: tp => {\n                resolve(options.action?.());\n                return tp.closePopup();\n            },\n            mouseEvent: options.mouseEvent.nativeEvent,\n        });\n    });\n}\n\nexport function askToCloseOldSessionAndCreateNew(t: Trello.PowerUp.IFrame, options: AskOptions) {\n    return askToCloseOldSession(t, {\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n        action: async () => {\n            await editCurrentWorkSession(t, async session => session);\n            options.action?.();\n        },\n    });\n}\n\nexport function closeIfOldAndEditCurrentWorkSession(t: Trello.PowerUp.IFrame, options: EditOptions) {\n    return askToCloseOldSession(t, {\n        action: () => editCurrentWorkSession(t, options.action),\n        hoursPerDay: options.hoursPerDay,\n        mouseEvent: options.mouseEvent,\n    });\n}\n"],"names":["enumerateWork","getTotalWorkMinutes","estimate","sum","workerId","workMinutes","getRemainingWorkMinutes","dueComplete","totalWorkMinutes","undefined","updatedEstimateMinutes","estimateMinutes","memberId","minutes","getUpdatedEstimate","getCardEstimate","t","cardId","JSON","get","parse","setCardEstimate","set","stringify","setLastInputTimeToNow","getAllCardsEstimates","fields","length","cards","Promise","all","map","card","id","then","getBoardEstimates","estimates","summary","remainingMinutes","deltaMinutes","est","remaining","getCurrentWork","currentWork","startDate","Date","setCurrentWork","currentWorkChangedEvent","getWorkSessions","sessions","s","endDate","setWorkSessions","addWorkSession","shift","added","push","editCurrentWorkSession","action","current","getMarginMultiplier","margin","setMaringMultiplier","marginMultiplier","getLastInputTime","time","setLastInputTime","eventEmitter","key","apiEventEmitter","EventEmitter","on","listener","once","off","emit","arg","truncateString","str","maxLength","substring","WorkButton","props","useProvidedTrello","useCurrentWork","elapsedWorkMinutes","useElapsedMinutes","value","providedCard","useProvidedCard","workCard","useCardById","member","useMember","isWorking","isSaving","className","onClick","e","askToCloseOldSessionAndCreateNew","hoursPerDay","mouseEvent","seconds","Math","round","getElapsedSeconds","closeIfOldAndEditCurrentWorkSession","session","addMinutesToDate","onEstimateChanged","formatMinutesWithOptions","zero","name","popup","type","title","message","confirmText","onConfirm","tp","closePopup","cancelText","onCancel","nativeEvent","useCardDueCompletedQuery","queryKey","queryClient","useQueryClient","query","useQuery","staleTime","setData","useCallback","data","setQueryData","useMemo","useCardWithFunctions","useState","setCard","refresh","fetched","console","warn","noDeps","useTrelloRender","useCard","useEffect","c","render","minutesToMs","cacheTime","Infinity","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","useTrelloRenderWithOptions","refetch","callImmediately","useInit","useCurrentWorkQuery","setIsSaving","updated","useElapsedMs","ms","setMs","animationFrameId","canceled","requestAnimationFrame","updateSeconds","getElapsedMs","cancelAnimationFrame","state","setMember","actualFields","res","window","TrelloPowerUp","iframe","appName","process","appKey","options","effect","formatDate","date","format","replaceAll","getFullYear","toString","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","getTime","getMinutesBetween","earlierDate","laterDate","msToMinutes","getMsBetween","now","getElapsedMinutes","areDatesEqual","date1","date2","evaluateMathExpression","expression","test","NaN","eval","error","parseAndRun","input","setInput","parsedMinutes","timeDeltaString","toLowerCase","matchAll","match","timeLabel","multiplier","expressionResult","isNaN","parseTimeDelta","val","alert","display","duration","defaultOptions","negative","formatMinutes","minutesPart","floor","flooredHours","hoursPart","daysPart","secondsPart","hoursToMs","hours","getWorkDelta","args","formatWorkDelta","delta","short","askToCloseOldSession","sessionAgeMs","formattedAge","resolve","reject"],"sourceRoot":""}