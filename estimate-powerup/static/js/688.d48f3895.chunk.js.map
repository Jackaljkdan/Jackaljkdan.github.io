{"version":3,"file":"static/js/688.d48f3895.chunk.js","mappings":"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","sources":["components/ServedFrom.tsx","components/Version.tsx","components/DeployInfo.tsx","capabilities/cardBadgesCapability.ts","capabilities/listActionsCapability.ts","capabilities/capabilitiesInitilizer.ts","capabilities/boardButtonCapability.ts","capabilities/cardBackSectionCapability.ts","pages/CapabilitiesInitializerPage.tsx","pages/IndexPage.tsx","router/components/AppLink.tsx","router/routePathUrl.ts","utils/dateFormatting.ts","utils/exitTime.ts","utils/urlUtils.ts"],"sourcesContent":["import React from \"react\";\n\nexport function ServedFrom() {\n    return (\n        <>\n            Served from: {window.location.host}\n        </>\n    );\n}\n","import React from \"react\";\n\nexport function Version() {\n    return (\n        <>\n            Version: {process.env.REACT_APP_VERSION}\n        </>\n    );\n}\n","import React from \"react\";\n\nimport \"./DeployInfo.scss\";\nimport { ServedFrom } from \"./ServedFrom\";\nimport { Version } from \"./Version\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function DeployInfo(props: Props) {\n    return (\n        <div className={props.className}>\n            <span className=\"deploy-text\">\n                <Version />\n            </span>\n            <span className=\"deploy-text\">\n                <ServedFrom />\n            </span>\n        </div>\n    );\n}\n","import { Trello } from \"../types/trello\";\nimport { getCardEstimate, getCurrentWork, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { getElapsedMinutes } from \"../utils/dateMath\";\nimport { formatWorkDelta, getWorkDelta } from \"../utils/workDelta\";\n\nasync function getBadge(t: Trello.PowerUp.IFrame, icon: string): Promise<Trello.PowerUp.CardBadge> {\n    const card = await t.card(\"id\", \"dueComplete\");\n    const estimate = await getCardEstimate(t);\n    const currentWork = await getCurrentWork(t);\n\n    let totalWork = getTotalWorkMinutes(estimate);\n    let remainingWork = getRemainingWorkMinutes(estimate, card.dueComplete, totalWork);\n\n    if (estimate.estimateMinutes === 0 && totalWork === 0 && currentWork?.cardId !== card.id)\n        throw t.NotHandled();\n\n    if (currentWork?.cardId === card.id) {\n        const currentMinutes = getElapsedMinutes(currentWork.startDate);\n        totalWork += currentMinutes;\n        remainingWork -= currentMinutes;\n    }\n\n    const workPart = totalWork > 0\n        ? `| W: ${formatMinutes(totalWork)}`\n        : \"\"\n    ;\n\n    const delta = getWorkDelta({\n        cardId: card.id,\n        estimate,\n        totalWorkMinutes: totalWork,\n    });\n\n    const lastPart = !card.dueComplete\n        ? `| R: ${formatMinutes(remainingWork)}`\n        : delta !== 0\n            ? `| ${formatWorkDelta({\n                delta,\n                short: true,\n            })}`\n            : \"\"\n    ;\n\n    return {\n        text: `E: ${formatMinutes(estimate.updatedEstimateMinutes || estimate.estimateMinutes)} ${workPart} ${lastPart}`,\n        icon: icon,\n        color: card.id === currentWork?.cardId\n            ? \"red\"\n            : card.dueComplete\n                ? delta >= 0 ? \"green\" : \"yellow\"\n                : undefined,\n        refresh: 10, // in seconds\n    };\n}\n\nexport function getCardBadges(t: Trello.PowerUp.IFrame, props: CapabilityProps): Trello.PowerUp.CardBadgeDynamic[] {\n    return [{\n        dynamic: () => {\n            return getBadge(t, props.icon.light);\n        },\n    }];\n}\n","import { getRoutePathUrl } from \"../router/routePathUrl\";\r\nimport { Trello } from \"../types/trello\";\r\n\r\nexport async function getListActions(t: Trello.PowerUp.IFrame, props: CapabilityProps): Promise<Trello.PowerUp.ListAction[]> {\r\n    return [{\r\n        text: \"Show list estimate summary\",\r\n        callback: async (tc: Trello.PowerUp.IFrame) => {\r\n            return tc.popup({\r\n                title: \"List estimate summary\",\r\n                url: tc.signUrl(getRoutePathUrl(\"/list-summary\")),\r\n            });\r\n        },\r\n    }];\r\n}\r\n","import { Trello } from \"../types/trello\";\nimport { getUrl } from \"../utils/urlUtils\";\nimport { getBoardButton } from \"./boardButtonCapability\";\nimport { getCardBackSection } from \"./cardBackSectionCapability\";\nimport { getCardBadges } from \"./cardBadgesCapability\";\nimport { getListActions } from \"./listActionsCapability\";\n\nconst CAPABILITY_PROPS: CapabilityProps = {\n    icon: {\n        dark: getUrl(\"/logo192.png\", { absolute: true }),\n        light: getUrl(\"/logo192.png\", { absolute: true }),\n    },\n};\n\nexport function initializeCapabilities() {\n    console.log(\"initializing capabilities\");\n\n    window.TrelloPowerUp.initialize({\n        \"board-buttons\": (t: Trello.PowerUp.IFrame) => getBoardButton(t, CAPABILITY_PROPS),\n        \"card-back-section\": (t: Trello.PowerUp.IFrame) => getCardBackSection(t, CAPABILITY_PROPS),\n        \"card-badges\": (t: Trello.PowerUp.IFrame) => getCardBadges(t, CAPABILITY_PROPS),\n        \"list-actions\": (t: Trello.PowerUp.IFrame) => getListActions(t, CAPABILITY_PROPS),\n    });\n}\n","import { getRoutePathUrl } from \"../router/routePathUrl\";\nimport { Trello } from \"../types/trello\";\n\nexport function getBoardButton(_t: Trello.PowerUp.IFrame, props: CapabilityProps): Trello.PowerUp.BoardButtonCallback[] {\n    return [{\n        icon: {\n            dark: props.icon.dark,\n            light: props.icon.light,\n        },\n        text: \"Estimate\",\n        callback: (tc: Trello.PowerUp.IFrame) => {\n            return tc.modal({\n                title: \"Estimate\",\n                url: tc.signUrl(getRoutePathUrl(\"/board-page\")),\n                fullscreen: false,\n                height: 400,\n            });\n        },\n        condition: \"edit\",\n    }];\n}\n","import { getRoutePathUrl } from \"../router/routePathUrl\";\nimport { Trello } from \"../types/trello\";\n\nexport function getCardBackSection(t: Trello.PowerUp.IFrame, props: CapabilityProps): Trello.PowerUp.CardBackSection {\n    return {\n        title: \"Estimate\",\n        icon: props.icon.dark,\n        content: {\n            type: \"iframe\",\n            url: t.signUrl(getRoutePathUrl(\"/card-back-section\", { absolute: true })),\n            height: 210,\n        },\n    };\n}\n","import { initializeCapabilities } from \"../capabilities/capabilitiesInitilizer\";\nimport { addListenerToSaveExitTime } from \"../utils/exitTime\";\nimport IndexPage from \"./IndexPage\";\n\ninitializeCapabilities();\naddListenerToSaveExitTime();\n\nexport default IndexPage;\n","import React from \"react\";\n\nimport \"./IndexPage.scss\";\nimport logo from \"../assets/e.png\";\nimport { AppLink } from \"../router/components/AppLink\";\nimport { DeployInfo } from \"../components/DeployInfo\";\n\nexport default function IndexPage() {\n    return (\n        <div className={\"App\"}>\n            <header className=\"App-header\">\n                <img\n                    src={logo}\n                    className=\"App-logo\"\n                    alt=\"logo\"\n                />\n                <p>\n                    This is the Estimate Trello Powerup welcome page.\n                </p>\n                <DeployInfo />\n                <AppLink to={\"/dummy\"}>\n                    Dummy page\n                </AppLink>\n                <AppLink to={\"/board-page\"}>\n                    Board page\n                </AppLink>\n                <AppLink to={\"/card-back-section\"}>\n                    Card back section page\n                </AppLink>\n            </header>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { getRoutePathUrl } from \"../routePathUrl\";\n\ntype AnchorProps = React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n\ntype Props = Omit<AnchorProps, \"href\"> & {\n    to: RoutePath\n}\n\nexport function AppLink(props: Props) {\n    return (\n        <a\n            {...props}\n            href={getRoutePathUrl(props.to)}\n        >\n            {props.children}\n        </a>\n    );\n}\n","import { getUrl, UrlOptions } from \"../utils/urlUtils\";\n\nexport function getRoutePathUrl(path: RoutePath, options?: UrlOptions) {\n    return getUrl(\"?path=\" + path, options);\n}\n","export type DateFormat =\r\n    \"yyyy-MM-dd\"\r\n    | \"yyyy-MM-dd hh:mm:ss\"\r\n;\r\n\r\nexport function formatDate(date: Date, format: DateFormat = \"yyyy-MM-dd\") {\r\n    return format\r\n        .replaceAll(\"yyyy\", date.getFullYear().toString())\r\n        .replaceAll(\"MM\", (date.getMonth() + 1).toString().padStart(2, \"0\"))\r\n        .replaceAll(\"dd\", date.getDate().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"hh\", date.getHours().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"mm\", date.getMinutes().toString().padStart(2, \"0\"))\r\n        .replaceAll(\"ss\", date.getSeconds().toString().padStart(2, \"0\"));\r\n}\r\n","import { formatDate } from \"./dateFormatting\";\r\n\r\nconst key = \"exit.datetime\";\r\n\r\nexport function addListenerToSaveExitTime() {\r\n    window.addEventListener(\"pagehide\", e => {\r\n        localStorage.setItem(key, JSON.stringify(new Date()));\r\n        // localStorage.setItem(\"pagehide\", JSON.stringify(new Date()));\r\n    });\r\n\r\n    // window.addEventListener(\"visibilitychange\", e => {\r\n    //     localStorage.setItem(\"visibilitychange.\" + document.visibilityState, JSON.stringify(new Date()));\r\n    // });\r\n\r\n    const lastExitTime = getLastExitTime();\r\n    console.log(key + \": \" + (lastExitTime ? formatDate(lastExitTime, \"yyyy-MM-dd hh:mm:ss\") : \"null\"));\r\n}\r\n\r\nexport function getLastExitTime() {\r\n    const saved = JSON.parse(localStorage.getItem(key) as string);\r\n\r\n    if (saved)\r\n        return new Date(saved);\r\n\r\n    return null;\r\n}\r\n","export type UrlOptions = {\n    absolute?: boolean,\n}\n\nexport function getUrl(endpoint: string, options?: UrlOptions) {\n    const relative = process.env.PUBLIC_URL + endpoint;\n\n    if (options?.absolute)\n        return window.location.origin + relative;\n    else\n        return relative;\n}\n"],"names":["ServedFrom","window","location","host","Version","process","DeployInfo","props","className","getBadge","t","icon","card","getCardEstimate","estimate","getCurrentWork","currentWork","totalWork","getTotalWorkMinutes","remainingWork","getRemainingWorkMinutes","dueComplete","estimateMinutes","cardId","id","NotHandled","currentMinutes","getElapsedMinutes","startDate","workPart","formatMinutes","delta","getWorkDelta","totalWorkMinutes","lastPart","formatWorkDelta","short","text","updatedEstimateMinutes","color","undefined","refresh","getCardBadges","dynamic","light","callback","tc","popup","title","url","signUrl","getRoutePathUrl","CAPABILITY_PROPS","dark","getUrl","absolute","console","log","TrelloPowerUp","initialize","modal","fullscreen","height","condition","content","type","getCardBackSection","getListActions","addListenerToSaveExitTime","IndexPage","src","logo","alt","to","AppLink","href","children","path","options","formatDate","date","format","replaceAll","getFullYear","toString","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","key","addEventListener","e","localStorage","setItem","JSON","stringify","Date","lastExitTime","getLastExitTime","saved","parse","getItem","endpoint","relative","origin"],"sourceRoot":""}