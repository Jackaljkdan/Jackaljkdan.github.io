{"version":3,"file":"static/js/775.cb438592.chunk.js","mappings":"uTAAiBA,GAAV,SAAUA,EAAiBC,GAA3B,gGACeA,GADf,6CAEC,OADOC,EADR,oBAEOA,EAFP,6DCIP,IAAMC,EAAU,2BAEVC,EAASC,mCAiCR,SAASC,EAAiBC,EAAeC,EAAgBC,GAC5D,IC/ByBC,ED+BnBC,GAAK,kBACJF,GADI,IAEPP,IAAKE,EACLG,MAAOA,IAGLK,EAAcC,MAAMC,KAAKd,EAAcW,IAAQ,SAAAT,GAAG,OAAIA,EAAM,IAAMS,EAAMT,MAAMa,KAAK,KAEzF,OCvCyBL,EDuCa,CAClCM,IAAKb,EAAO,iBAAaK,EAAb,YAAuBI,GACnCK,OAAQ,OCxCLC,MAAMR,EAAQM,KAAT,QAAC,UACNN,GADK,IAERS,SAAQ,QACJC,OAAQ,oBADL,OAEAV,QAFA,IAEAA,OAFA,EAEAA,EAASS,YAGfE,MAAK,SAAAC,GACF,OAAOA,EAASC,OAAOF,MAAK,SAAAE,GACxB,IAAMC,EAAeF,EAGrB,OAFAE,EAAaC,KAAOF,EACpBC,EAAad,QAAUA,EAChBc,Q,aCXhB,SAASE,EAAmBC,GAC/B,IAAMC,GAAIC,EAAAA,EAAAA,KACJC,GAAOC,EAAAA,EAAAA,IAAQH,EAAG,KAAM,OACxBI,GAAmBC,EAAAA,EAAAA,IAAyBL,GAElD,OACI,oBACIM,UAAS,wBAAmBP,EAAMO,WAClCC,QAAS,gBACQC,IAATN,GFZb,SAA8BF,GAAgF,IAAtDS,EAAqD,uDAAd,aAClG,OAAOT,EAAEU,aACJC,eACAlB,MAAK,SAAAmB,GACF,IAAIA,EAGA,MAAM,IAAIC,MAAM,mBAEvBC,OAAM,WACH,OAAOd,EAAEU,aAAaK,UAAU,CAC5BN,MAAAA,OAGPhB,MAAK,WACF,OAAOO,EAAEU,aAAaM,cEAlBC,CAAqBjB,GAChBP,MAAK,SAAAd,GAAK,OAAID,EAAiBC,EAAOuB,EAAKgB,GAAI,CAC5CC,IAAKf,EAAiBP,KAChB,KACAK,EAAKiB,IACDjB,EAAKiB,KACL,IAAIC,MAAOC,cACrBC,aAAclB,EAAiBP,UAElCJ,MAAK,SAAAC,GACEA,EAAS6B,IACTnB,EAAiBoB,QAAQ9B,EAASG,KAAKyB,gBAE9CR,OAAM,SAAAW,GACHC,QAAQC,MAAMF,OApB9B,eAwB6CjB,IAA1BJ,EAAiBP,KAxBpC,uBA2B6CW,IAA1BJ,EAAiBP,KA3BpC,CA4BuBO,EAAiBP,KA5BxC,uBA+BwBO,EAAiBP,KA/BzC,8B,cCPD,SAAS+B,EAAmB7B,GAAe,IAAD,EACvCC,GAAIC,EAAAA,EAAAA,KACJ4B,GAAcC,EAAAA,EAAAA,KACd5B,GAAOC,EAAAA,EAAAA,IAAQH,EAAG,MAExB,YAAkCQ,KAA9B,UAAAqB,EAAYE,aAAZ,eAAmBnD,cAGV4B,IAATN,GAAsB2B,EAAYE,MAAMnD,SAAWsB,EAAKgB,GAFjD,MAMP,mBACIZ,UAAS,oBAAeP,EAAMO,WAC9BC,QAAS,kBAAMP,EAAEgC,SAASH,EAAYE,MAAOnD,SAFjD,4B,cCND,SAASqD,EAAYlC,GAAe,IAAD,MACtC,OACI,iBAAKO,UAAS,iCAAkBP,EAAMO,iBAAxB,QAAqC,IAAnD,WACI,gBAAKA,UAAU,QAAf,SACKP,EAAMmC,SAEX,mBAAQ3B,QAAS,SAAA4B,GAAC,OAAIpC,EAAMqC,OAAOD,GAAG,SAACE,EAAGC,GAAJ,OAAeA,MAArD,mBACKvC,EAAMwC,gBADX,QACuB,SAEvB,mBAAQhC,QAAS,SAAA4B,GAAC,OAAIpC,EAAMqC,OAAOD,GAAG,SAACK,EAAUF,GAAX,OAAsBE,EAAWF,MAAvE,gBAGA,mBAAQ/B,QAAS,SAAA4B,GAAC,OAAIpC,EAAMqC,OAAOD,GAAG,SAACK,EAAUF,GAAX,OAAsBE,EAAWF,MAAvE,gBAGA,mBAAQ/B,QAASR,EAAM0C,YAAvB,mBACK1C,EAAM2C,kBADX,QACyB,a,wBC3BxBC,EAA4C,CACrDC,aAAa,WAAD,8BAAE,WAAM5C,GAAN,kFAAW6C,QAAX,UAAyBC,EAAAA,EAAAA,IAAiB9C,GAA1C,uGAAF,mDAAC,GACb+C,SAAS,WAAD,8BAAE,WAAM/C,GAAN,+FACuB8C,EAAAA,EAAAA,IAAiB9C,GADxC,cACAgD,EADA,OAEAC,GAA+BC,EAAAA,EAAAA,IAAkBF,GAFjD,gEAGuCG,EAAAA,EAAAA,IAAcF,GAHrD,iDAAF,mDAAC,GAKTG,KAAK,WAAD,8BAAE,WAAMpD,GAAN,qGAC2B8C,EAAAA,EAAAA,IAAiB9C,GAD5C,cACIgD,EADJ,gBAEiBhD,EAAEE,KAAK,MAFxB,cAEIA,EAFJ,gBAGmBF,EAAEqD,OAAO,MAH5B,cAGIA,EAHJ,kBAIqBC,EAAAA,EAAAA,IAAgBtD,EAAGE,EAAKgB,IAJ7C,eAIIqC,EAJJ,kBAMIC,EAAAA,EAAAA,IAAgBxD,GAAD,QAAC,UACfuD,GADc,IAEjBE,aAAY,kBACLF,EAASE,aADL,cAENJ,EAAOnC,IAAK,UAACqC,EAASE,YAAYJ,EAAOnC,WAA7B,QAAoC,IAAKgC,EAAAA,EAAAA,IAAkBF,QAV9E,4CAAF,mDAAC,I,oBCLIU,EAAgC,CACzCd,aAAa,WAAD,8BAAE,WAAM5C,GAAN,iFACJ2D,GAAeC,EAAAA,EAAAA,KADX,0CAIC,GAJD,wBAMgBC,EAAAA,EAAAA,IAAe7D,GAN/B,kBAMJ6B,EANI,kBAQLA,GAAAA,EAAaiC,UARR,0CASC,GATD,gCAWHH,EAAe9B,EAAYiC,WAXxB,2CAAF,mDAAC,GAabf,SAAS,WAAD,8BAAE,WAAM/C,GAAN,iGACqB6D,EAAAA,EAAAA,IAAe7D,GADpC,cACA6B,EADA,OAEA8B,GAAeC,EAAAA,EAAAA,KACfG,GAA0BC,EAAAA,EAAAA,IAAkBnC,EAAYiC,UAAWH,GAHnE,8EAKqDM,EAAAA,EAAAA,GAAWN,EAAc,uBAL9E,mBAK8GR,EAAAA,EAAAA,IAAcY,GAL5H,iDAAF,mDAAC,GAOTX,KAAK,WAAD,8BAAE,WAAMpD,GAAN,sGACmBA,EAAEqD,OAAO,MAD5B,cACIA,EADJ,iBAGyBQ,EAAAA,EAAAA,IAAe7D,GAHxC,cAGI6B,EAHJ,OAII8B,GAAeC,EAAAA,EAAAA,KACfG,GAA0BC,EAAAA,EAAAA,IAAkBnC,EAAYiC,UAAWH,GALvE,WAOqBL,EAAAA,EAAAA,IAAgBtD,EAAG6B,EAAYjD,QAPpD,eAOI2E,EAPJ,kBASIC,EAAAA,EAAAA,IACFxD,GADiB,QAAC,UAGXuD,GAHU,IAIbE,aAAY,kBACLF,EAASE,aADL,cAENJ,EAAOnC,IAAK,UAACqC,EAASE,YAAYJ,EAAOnC,WAA7B,QAAoC,GAAK6C,MAG9DlC,EAAYjD,QAlBd,0BAqBIsF,EAAAA,EAAAA,IAAelE,EAAG,MArBtB,4CAAF,mDAAC,ICfF,SAASmE,EAAwBpE,GAAe,IAAD,EAC5CC,GAAIC,EAAAA,EAAAA,KADwC,SAGnCmE,EAHmC,kFAGlD,WAA6CC,EAA6CC,GAA1F,sFACeA,EAAa1B,aAAa5C,GADzC,8EAIIqE,EAJJ,SAKoBC,EAAavB,SAAS/C,GAL1C,iEAMkB,WAAMuE,GAAN,4FACAD,EAAalB,KAAKpD,GADlB,cAEN,UAAAD,EAAMyE,iBAAN,cAAAzE,GAFM,SAGAwE,EAAGE,aAHH,2CANlB,4DAKQC,KALR,KAMQC,SANR,WAIUC,KAJV,4DAHkD,wBAiBlD,OACI,mBACItE,UAAS,oBAAKP,EAAMO,iBAAX,QAAwB,IACjCC,QAAO,yCAAE,WAAM4B,GAAN,mFACCkC,EAA8C,GAD/C,SAGCD,EAA8BC,EAAO1B,GAHtC,uBAICyB,EAA8BC,EAAOX,GAJtC,OAML1D,EAAE6E,MAAM,CACJC,MAAO,iBACPT,MAAAA,EACAU,WAAY5C,EAAE6C,cATb,2CAAF,sDAFX,oB,sDCVD,SAASC,EAAYlF,GAAe,IAAD,QAC9BwD,EAAqBxD,EAArBwD,SAAUF,EAAWtD,EAAXsD,OAClB,GAAsC6B,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8BF,EAAAA,EAAAA,YAA9B,eAAOG,EAAP,KAAgBC,EAAhB,KAEMtF,GAAIC,EAAAA,EAAAA,KACJC,GAAOC,EAAAA,EAAAA,IAAQH,EAAG,MAElBuF,EAAc,WADKlF,EAAAA,EAAAA,IAAyBL,GACVH,YAApB,SAEdgC,GAAcC,EAAAA,EAAAA,KACd0D,GAAqBC,EAAAA,EAAAA,KACvB,UAAA5D,EAAYE,aAAZ,eAAmBnD,WAAnB,OAA8BsB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMgB,IAApC,UACMW,EAAYE,aADlB,aACM,EAAmB+B,eACnBtD,IAGVkF,EAAAA,EAAAA,YACI,WACSP,QAA2B3E,IAAZ6E,GAGpBrF,EAAE2F,MAAM,WAAWlG,MAAK,SAAAmG,GACpB,IAD2B,EACrBC,EAAqB,GADA,UAEXD,EAAIP,SAFO,IAE3B,2BACI,KADOS,EACP,QAAAD,EAAIC,EAAE5E,IAAM4E,GAHW,8BAI3BR,EAAWO,QAGnB,CAACV,EAAaE,IAGlB,IAAMU,GAAYC,EAAAA,EAAAA,IAAoBzC,GAAYiC,EAC5CS,EAAM,UAAGT,EAAqBjC,EAASE,YAAYJ,EAAOnC,WAApD,QAA4D,EAClEgF,GAAgBC,EAAAA,EAAAA,IAAwB5C,EAAUgC,EAAgBQ,GAExE,OACI,iCACI,iBAAKzF,UAAU,aAAf,oBACW6C,EAAAA,EAAAA,IAAc4C,GACpB,IACcE,EAASF,EAH5B,YAIgB5C,EAAAA,EAAAA,IAAc8C,GAJ9B,UAMK,IACcA,EAASF,GACpB,iBACIzF,UAAU,yBACVC,QAAS,kBAAM6E,GAAe,SAAAgB,GAAO,OAAKA,MAF9C,qBARR,KAeoBb,EAfpB,MAgBS,MAhBT,gBAgB4BpC,EAAAA,EAAAA,IAAc+C,IAEvBX,EAlBnB,CAmBS,OACAc,EAAAA,EAAAA,GAAgB,CACbC,OAAOC,EAAAA,EAAAA,GAAa,CAChB3H,OAAM,OAAEsB,QAAF,IAAEA,OAAF,EAAEA,EAAMgB,GACdqC,SAAAA,EACAiD,iBAAkBT,OAxBlC,QA6BeZ,QAA2B3E,IAAZ6E,GAC1B,0BACK,QAAIoB,EAAAA,EAAAA,IAAclD,IACdmD,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAU,KAC9BC,KAAI,SAAAF,GAAS,IAAD,EACHtD,EAASgC,EAASsB,EAAKG,UAC7B,OACI,4CACKzD,QADL,IACKA,OADL,EACKA,EAAQ0D,gBADb,QACyB,YACpB1D,GAAU,SACC7C,IAAX6C,EAAA,WAA2BA,EAAO2D,SAAlC,KAAgD,GAChD,MACA7D,EAAAA,EAAAA,IAAcwD,EAAKC,WALdD,EAAKG,eArCvC,QCxCD,SAASG,EAAgBlH,GAAe,IAAD,EAClCwD,EAAqBxD,EAArBwD,SAAUF,EAAWtD,EAAXsD,OACZrD,GAAIC,EAAAA,EAAAA,KAEV,QAAuBO,IAAnB+C,EAASxB,MACT,OAAQ,yBAAMwB,EAAS2D,WAE3B,IAAMnB,GAAYC,EAAAA,EAAAA,IAAoBzC,EAASxB,OACzCkE,EAAM,UAAG1C,EAASxB,MAAM0B,YAAYJ,EAAOnC,WAArC,QAA6C,EARf,SAU3BiG,EAV2B,gFAU1C,WAAmCC,GAAnC,8FAIwBA,EAAKhF,SAJ7B,UAIUkE,EAJV,gEAUwB9F,KADd6G,EAAcf,EAAM7C,YAAYJ,EAAQnC,KATlD,iDAaIlB,EAAE6E,MAAM,CACJyC,KAAM,UACNxC,MAAO,kBACPyC,QAAS,sDACTC,YAAa,MACbC,UAAW,SAAAlD,GAEP,OADAA,EAAGE,cACIiD,EAAAA,EAAAA,IAAoC1H,EAAG,CAC1CoC,OAAO,WAAD,8BAAE,WAAMuF,GAAN,kHACDA,GADC,IAEJlE,YAAakE,EAAQlE,YAAc4D,KAF/B,2CAAF,mDAAC,GAIPO,YAAAA,EAAAA,GACA7C,WAAYqC,EAAKrC,cAGzB8C,WAAY,KACZC,SAAU,SAAAvD,GAAE,OAAIA,EAAGE,cACnBM,WAAYqC,EAAKrC,WAAWC,cA/BpC,2CAV0C,wBA6C1C,OACI,SAAC,EAAD,CACI9C,OAAQ,SAAC+C,EAAD,CACJ1B,SAAUA,EAASxB,MACnBsB,OAAQA,IAEZjB,OAAQ,SAACD,EAAG4F,GAAJ,OAAuBZ,EAAoB,CAC/C/E,OAAQ,kBAAM4F,EAAAA,EAAAA,IAAYhI,EAAGD,EAAMkI,YAAY,SAAAC,GAAa,OACxD3E,EAAS4E,KAAI,SAAA/B,GAAO,+BACbA,GADa,IAEhB3C,aAAY,kBACL2C,EAAQ3C,aADJ,cAENJ,EAAQnC,GAAK6G,EAAc,UAAC3B,EAAQ3C,YAAYJ,EAAQnC,WAA7B,QAAoC,EAAGgH,cAG/EnD,WAAY5C,KAEhBM,YAAa,SAAAN,GAAC,OAAIgF,EAAoB,CAClC/E,OAAQ,kBAAMmB,EAAS4E,KAAI,SAAA/B,GAAO,yBAC3BA,GAD2B,IAE9B3C,aAAY,kBACL2C,EAAQ3C,aADJ,cAENJ,EAAQnC,GAAK,UAGtB6D,WAAY5C,KAEhBI,SAAU0D,EAASF,EAAY,gBAAavF,EAC5CkC,WAAYuD,EAASF,EAAY,kBAAevF,EAChDF,UAAWP,EAAMO,YC3Ed,SAAS8H,IACpB,IAAMpI,GAAIC,EAAAA,EAAAA,KACJsD,ECbH,SAAqBvD,GAA4C,IAAlBqI,IAAiB,yDACnE,GAAgCnD,EAAAA,EAAAA,YAAhC,eAAO3B,EAAP,KAAiB+E,EAAjB,KACA,GAAgCpD,EAAAA,EAAAA,UAAS,IAAzC,eAAOgC,EAAP,KAAiBqB,EAAjB,KAEMC,GAAUC,EAAAA,EAAAA,UACZ,yCAAM,gGACFF,EAAY,cADV,UAE4BjF,EAAAA,EAAAA,IAAgBtD,GAF5C,OAEI0I,EAFJ,OAGFJ,EAAYI,GACZH,EAAY,IAJV,6CAMNI,EAAAA,GAGER,GAAMM,EAAAA,EAAAA,UACR,kBAAM,SAACrG,GACH,QAAiB5B,IAAb+C,EAAJ,CAGA,IAAMqF,EAAUxG,EAAOmB,GAEjB+C,EAAkB,CACpBuC,gBAAiBD,EAAQC,gBAAkBtF,EAASsF,gBACpDC,uBAAwBF,EAAQE,uBAAyBvF,EAASuF,uBAClErF,YAAa,IAGjB,IAAK,IAAMqD,KAAY8B,EAAQnF,YAA/B,OACI6C,EAAM7C,YAAYqD,GAAY8B,EAAQnF,YAAYqD,IAApB,UAAiCvD,EAASE,YAAYqD,UAAtD,QAAmE,GAErG,GAAKuB,EAKL,OAFAE,EAAY,cAELjF,EAAAA,EAAAA,IAAgBtD,GAClBP,MAAK,SAAAsJ,GACF,IAAMC,EAA0B,CAC5BH,gBAAiBE,EAAeF,gBAAkBvC,EAAMuC,gBACxDC,uBAAwBC,EAAeD,uBAAyBxC,EAAMwC,uBACtErF,YAAa,IAGjB,IAAK,IAAMqD,KAAYR,EAAM7C,YAA7B,OACIuF,EAAcvF,YAAYqD,IAAY,UAACiC,EAAetF,YAAYqD,UAA5B,QAAyC,GAAKR,EAAM7C,YAAYqD,GAE1G,OAAOtD,EAAAA,EAAAA,IAAgBxD,EAAGgJ,MAE7BvJ,MAAK,SAAAuJ,GAIF,OAHAV,EAAYU,GACZT,EAAY,UACZU,YAAW,kBAAMV,EAAY,MAAK,KAC3BjC,KAEVxF,OAAM,SAAAW,GACH8G,EAAY,IACZvI,EAAEkJ,MAAM,CACJC,QAAS,QACT5B,QAAQ,sBAAD,OAAwB9F,YAI/C,CAAC8B,EAAU8E,IAGf,OAAOI,EAAAA,EAAAA,UACH,iBAAO,CACH1G,MAAOwB,EACP4E,IAAAA,EACAjB,SAAAA,EACAsB,QAAAA,KAEJ,CAACjF,EAAU2D,ID3DEkC,CAAYpJ,GAEvBiI,GAAa/C,EAAAA,EAAAA,UAAiB,IACpC,UAA0C+C,EAA1C,GAAOoB,EAAP,KAAsBC,EAAtB,KAEMjG,GAASkG,EAAAA,EAAAA,GAAUvJ,EAAG,MAI5B,IAFAwJ,EAAAA,EAAAA,IAAgBxJ,EAAGuD,EAASiF,cAELhI,IAAnB+C,EAASxB,MACT,OAAQ,yBAAMwB,EAAS2D,WAE3B,IAAMuC,EAA+D,IAA1ClG,EAASxB,MAAM+G,wBACnCvF,EAASxB,MAAM+G,yBAA2BvF,EAASxB,MAAM8G,gBAEhE,OACI,4BACI,iBAAKvI,UAAU,oBAAf,WACI,kBACIyB,MAAOsH,EACPK,SAAU,SAAAvH,GAAC,OAAImH,EAAiBnH,EAAEwH,OAAO5H,QACzC6H,YAAY,8BAEhB,SAACC,EAAA,EAAD,CAAYC,kBAAmBvG,EAASiF,WACxC,iBAAKlI,UAAU,YAAf,WACI,SAACsB,EAAD,KACA,SAAC9B,EAAD,KACA,SAACqE,EAAD,CAAyBK,UAAWjB,EAASiF,iBAGrD,SAAC,EAAD,CACItG,OAAO,gCACFuH,GAAsB,YADpB,cAEQtG,EAAAA,EAAAA,IAAcI,EAASxB,MAAM8G,iBACzBY,EAHZ,CAIE,MAJF,aAKWtG,EAAAA,EAAAA,IAAcI,EAASxB,MAAM+G,yBALxC,QAQP1G,OAAQ,SAACD,EAAG4H,GAAJ,OAA2B/B,EAAAA,EAAAA,IAAYhI,EAAGiI,GAAY,SAAAC,GAClB,IAApC3E,EAASxB,MAAO8G,iBAA0BY,EAO1CzJ,EAAE6E,MAAM,CACJyC,KAAM,UACNxC,MAAO,mBACPyC,QAAS,6DACTC,YAAa,SACbC,UAAW,SAAAlD,GAQP,OAPAhB,EAAS4E,KAAI,SAAA/B,GAAO,yBACbA,GADa,IAEhB0C,uBAAwBiB,GACpBC,EAAAA,EAAAA,IAAmB5D,GACnB8B,QAGD3D,EAAGE,cAEdoD,WAAY,kBACZC,SAAU,SAAAvD,GASN,OARAhB,EAAS4E,KAAI,SAAA/B,GAAO,yBACbA,GADa,IAEhByC,gBAAiBkB,GACbC,EAAAA,EAAAA,IAAmB5D,GACnB8B,GAEJY,uBAAwB,OAErBvE,EAAGE,cAEdM,WAAY5C,EAAE6C,cAjClBzB,EAAS4E,KAAI,SAAA/B,GAAO,yBACbA,GADa,IAEhByC,gBAAiBkB,EAAmB3D,EAAQyC,gBAAiBX,YAmCzEzF,YAAa,kBAAMc,EAAS4E,KAAI,SAAA/B,GAAO,yBAChCA,GADgC,IAEnCyC,gBAAiB,EACjBC,uBAAwB,eAGNtI,IAAX6C,GACX,SAAC4D,EAAD,CACI1D,SAAUA,EACVF,OAAQA,EACR4E,WAAYA,EACZ3H,UAAU,SAzEtB,KA4EmBuC,QAAQU,EAAS2D,WAC5B,yBACK3D,EAAS2D,WA9EtB,U,0FEjCF5I,EAAM,gBAEL,SAAS2L,IACZC,OAAOC,iBAAiB,YAAY,SAAAhI,GAChCiI,aAAaC,QAAQ/L,EAAKgM,KAAKC,UAAU,IAAInJ,UAQjD,IAAMuC,EAAeC,IACrBlC,QAAQ8I,IAAIlM,EAAM,MAAQqF,GAAeM,EAAAA,EAAAA,GAAWN,EAAc,uBAAyB,SAGxF,SAASC,IACZ,IAAM6G,EAAQH,KAAKI,MAAMN,aAAaO,QAAQrM,IAE9C,OAAImM,EACO,IAAIrJ,KAAKqJ,GAEb","sources":["utils/object.ts","utils/trelloRest.ts","utils/fetch.ts","components/CompleteCardButton.tsx","components/OpenWorkCardButton.tsx","components/TimeButtons.tsx","card_functions/addTimeSinceLastInputAsWork.ts","card_functions/forgotToEndWork.ts","components/MoreCardFunctionsButton.tsx","components/WorkDetails.tsx","components/WorkTimeButtons.tsx","pages/CardBackSectionPage.tsx","hooks/useEstimate.ts","utils/exitTime.ts"],"sourcesContent":["export function* enumerateKeys<T>(object: T): Generator<keyof T> {\n    for (const key in object)\n        yield key;\n}\n","import { Trello } from \"../types/trello\";\nimport { fetchJson } from \"./fetch\";\nimport { enumerateKeys } from \"./object\";\n\nconst baseurl = \"https://api.trello.com/1\";\n\nconst apiKey = process.env.REACT_APP_POWERUP_APP_KEY;\n\nexport function getAuthorizedRestApi(t: Trello.PowerUp.IFrame, scope: Trello.PowerUp.AllPermissions = \"read,write\") {\n    return t.getRestApi()\n        .isAuthorized()\n        .then(authorized => {\n            if (authorized)\n                return;\n            else\n                throw new Error(\"unauthorized\");\n        })\n        .catch(() => {\n            return t.getRestApi().authorize({\n                scope,\n            });\n        })\n        .then(() => {\n            return t.getRestApi().getToken();\n        });\n}\n\nexport function getCardFields(token: string, cardId: string, ...fields: [\"all\"] | (keyof Trello.PowerUp.Card)[]) {\n    if (fields === undefined || fields.length === 0)\n        fields = [\"all\"];\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?fields=${fields.join(\",\")}&key=${apiKey}&token=${token}`,\n        method: \"GET\",\n    });\n}\n\nexport type EditableCard = Partial<Omit<Trello.PowerUp.Card, \"id\" | \"idShort\" | \"url\">>;\n\nexport function updateCardFields(token: string, cardId: string, fields: EditableCard) {\n    const query = {\n        ...fields,\n        key: apiKey,\n        token: token,\n    };\n\n    const queryString = Array.from(enumerateKeys(query), key => key + \"=\" + query[key]).join(\"&\");\n\n    return fetchJson<Trello.PowerUp.Card>({\n        url: baseurl + `/cards/${cardId}?${queryString}`,\n        method: \"PUT\",\n    });\n}\n","export type Request = RequestInit & {\n    url: RequestInfo | URL;\n}\n\nexport type JsonResponse<T> = Response & {\n    data: T;\n    request: Request\n}\n\nexport function fetchJson<T>(request: Request): Promise<JsonResponse<T>> {\n    return fetch(request.url, {\n        ...request,\n        headers: {\n            Accept: \"application/json\",\n            ...request?.headers,\n        },\n    })\n        .then(response => {\n            return response.json().then(json => {\n                const jsonResponse = response as JsonResponse<T>;\n                jsonResponse.data = json;\n                jsonResponse.request = request;\n                return jsonResponse;\n            });\n        });\n}\n","import React from \"react\";\n\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { getAuthorizedRestApi, updateCardFields } from \"../utils/trelloRest\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function CompleteCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\", \"due\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n\n    return (\n        <button\n            className={`complete-work ${props.className}`}\n            onClick={() => {\n                if (card === undefined)\n                    return;\n\n                getAuthorizedRestApi(t)\n                    .then(token => updateCardFields(token, card.id, {\n                        due: dueCompleteQuery.data\n                            ? null\n                            : card.due\n                                ? card.due\n                                : new Date().toISOString(),\n                        dueComplete: !dueCompleteQuery.data,\n                    }))\n                    .then(response => {\n                        if (response.ok)\n                            dueCompleteQuery.setData(response.data.dueComplete);\n                    })\n                    .catch(err => {\n                        console.error(err);\n                    });\n            }}\n        >\n            <If condition={dueCompleteQuery.data === undefined}>\n                loading...\n            </If>\n            <If condition={dueCompleteQuery.data !== undefined}>\n                <If condition={dueCompleteQuery.data}>\n                    Uncomplete card\n                </If>\n                <If condition={!dueCompleteQuery.data}>\n                    Complete card\n                </If>\n            </If>\n        </button>\n    );\n}\n","import React from \"react\";\nimport { useCard } from \"../hooks/useCard\";\n\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\n\ntype Props = {\n    className?: string;\n}\n\nexport function OpenWorkCardButton(props: Props) {\n    const t = useProvidedTrello();\n    const currentWork = useCurrentWork();\n    const card = useCard(t, \"id\");\n\n    if (currentWork.value?.cardId === undefined)\n        return null;\n\n    if (card === undefined || currentWork.value.cardId === card.id)\n        return null;\n\n    return (\n        <button\n            className={`open-work ${props.className}`}\n            onClick={() => t.showCard(currentWork.value!.cardId)}\n        >\n            Open work card\n        </button>\n    );\n}\n","import React from \"react\";\n\nimport \"./TimeButtons.scss\";\n\ntype Props = {\n    label: React.ReactNode;\n    action: (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        computeNew: (previous: number, parsed: number) => number\n    ) => void;\n    clearAction: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    setLabel?: string;\n    clearLabel?: string;\n    className?: string;\n}\n\nexport function TimeButtons(props: Props) {\n    return (\n        <div className={`time-buttons ${props.className ?? \"\"}`}>\n            <div className='label'>\n                {props.label}\n            </div>\n            <button onClick={e => props.action(e, (_, parsed) => parsed)}>\n                {props.setLabel ?? \"Set\"}\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous + parsed)}>\n                +\n            </button>\n            <button onClick={e => props.action(e, (previous, parsed) => previous - parsed)}>\n                -\n            </button>\n            <button onClick={props.clearAction}>\n                {props.clearLabel ?? \"Clear\"}\n            </button>\n        </div>\n    );\n}\n","import { CardFunction } from \"./types\";\r\nimport { getCardEstimate, getLastInputTime, setCardEstimate } from \"../api/estimateApi\";\r\nimport { getElapsedMinutes } from \"../utils/dateMath\";\r\nimport { formatMinutes } from \"../utils/timeParsing\";\r\n\r\nexport const addTimeSinceLastInputAsWork: CardFunction = {\r\n    isApplicable: async t => Boolean(await getLastInputTime(t)),\r\n    getTitle: async t => {\r\n        const lastInputTime = (await getLastInputTime(t))!;\r\n        const elapsedMinutesSinceLastInput = getElapsedMinutes(lastInputTime);\r\n        return `Add time since last input as work (${formatMinutes(elapsedMinutesSinceLastInput)})`;\r\n    },\r\n    call: async t => {\r\n        const lastInputTime = (await getLastInputTime(t))!;\r\n        const card = await t.card(\"id\");\r\n        const member = await t.member(\"id\");\r\n        const estimate = await getCardEstimate(t, card.id);\r\n\r\n        await setCardEstimate(t, {\r\n            ...estimate,\r\n            workMinutes: {\r\n                ...estimate.workMinutes,\r\n                [member.id]: (estimate.workMinutes[member.id] ?? 0) + getElapsedMinutes(lastInputTime),\r\n            },\r\n        });\r\n    },\r\n};\r\n","import { CardFunction } from \"./types\";\r\nimport { getCardEstimate, setCardEstimate, getCurrentWork, setCurrentWork } from \"../api/estimateApi\";\r\nimport { getMinutesBetween } from \"../utils/dateMath\";\r\nimport { formatMinutes } from \"../utils/timeParsing\";\r\nimport { getLastExitTime } from \"../utils/exitTime\";\r\nimport { formatDate } from \"../utils/dateFormatting\";\r\n\r\nexport const forgotToEndWork: CardFunction = {\r\n    isApplicable: async t => {\r\n        const lastExitTime = getLastExitTime();\r\n\r\n        if (!lastExitTime)\r\n            return false;\r\n\r\n        const currentWork = await getCurrentWork(t);\r\n\r\n        if (!currentWork?.startDate)\r\n            return false;\r\n\r\n        return lastExitTime > currentWork.startDate;\r\n    },\r\n    getTitle: async t => {\r\n        const currentWork = (await getCurrentWork(t))!;\r\n        const lastExitTime = getLastExitTime()!;\r\n        const elapsedMinutesUntilExit = getMinutesBetween(currentWork.startDate, lastExitTime);\r\n\r\n        return `I forgot to end work before closing (close time: ${formatDate(lastExitTime, \"yyyy-MM-dd hh:mm:ss\")} work: ${formatMinutes(elapsedMinutesUntilExit)})`;\r\n    },\r\n    call: async t => {\r\n        const member = await t.member(\"id\");\r\n\r\n        const currentWork = (await getCurrentWork(t))!;\r\n        const lastExitTime = getLastExitTime()!;\r\n        const elapsedMinutesUntilExit = getMinutesBetween(currentWork.startDate, lastExitTime);\r\n\r\n        const estimate = await getCardEstimate(t, currentWork.cardId);\r\n\r\n        await setCardEstimate(\r\n            t,\r\n            {\r\n                ...estimate,\r\n                workMinutes: {\r\n                    ...estimate.workMinutes,\r\n                    [member.id]: (estimate.workMinutes[member.id] ?? 0) + elapsedMinutesUntilExit,\r\n                },\r\n            },\r\n            currentWork.cardId,\r\n        );\r\n\r\n        await setCurrentWork(t, null);\r\n    },\r\n};\r\n","import React from \"react\";\nimport { addTimeSinceLastInputAsWork } from \"../card_functions/addTimeSinceLastInputAsWork\";\nimport { forgotToEndWork } from \"../card_functions/forgotToEndWork\";\nimport { CardFunction } from \"../card_functions/types\";\n\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\n\ntype Props = {\n    className?: string;\n    onRefresh?: () => void;\n}\n\nexport function MoreCardFunctionsButton(props: Props) {\n    const t = useProvidedTrello();\n\n    async function addFunctionButtonIfApplicable(items: Trello.PowerUp.PopupOptions[\"items\"], cardFunction: CardFunction) {\n        if (!await cardFunction.isApplicable(t))\n            return;\n\n        items.push({\n            text: await cardFunction.getTitle(t),\n            callback: async tp => {\n                await cardFunction.call(t);\n                props.onRefresh?.();\n                await tp.closePopup();\n            },\n        });\n    }\n\n    return (\n        <button\n            className={`${props.className ?? \"\"}`}\n            onClick={async e => {\n                const items: Trello.PowerUp.PopupOptions[\"items\"] = [];\n\n                await addFunctionButtonIfApplicable(items, addTimeSinceLastInputAsWork);\n                await addFunctionButtonIfApplicable(items, forgotToEndWork);\n\n                t.popup({\n                    title: \"More functions\",\n                    items,\n                    mouseEvent: e.nativeEvent,\n                });\n            }}\n        >\n            &#8943;\n        </button>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { enumerateWork, Estimate, getRemainingWorkMinutes, getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { formatMinutes } from \"../utils/timeParsing\";\nimport { useCard, useCardDueCompletedQuery } from \"../hooks/useCard\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { useCurrentWork } from \"../hooks/useCurrentWork\";\nimport { useElapsedMinutes } from \"../hooks/useElapsed\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { formatWorkDelta, getWorkDelta } from \"../utils/workDelta\";\n\ntype Props = {\n    estimate: Estimate,\n    member: Trello.PowerUp.Member,\n}\n\ntype MembersObject = {\n    [key: Trello.PowerUp.Member[\"id\"]]: Trello.PowerUp.Member,\n}\n\nexport function WorkDetails(props: Props) {\n    const { estimate, member } = props;\n    const [showDetails, setShowDetails] = useState(false);\n    const [members, setMembers] = useState<MembersObject>();\n\n    const t = useProvidedTrello();\n    const card = useCard(t, \"id\");\n    const dueCompleteQuery = useCardDueCompletedQuery(t);\n    const isCardComplete = dueCompleteQuery.data ?? false;\n\n    const currentWork = useCurrentWork();\n    const elapsedWorkMinutes = useElapsedMinutes(\n        currentWork.value?.cardId === card?.id\n            ? currentWork.value?.startDate\n            : undefined,\n    );\n\n    useEffect(\n        () => {\n            if (!showDetails || members !== undefined)\n                return;\n\n            t.board(\"members\").then(res => {\n                const obj: MembersObject = {};\n                for (const m of res.members)\n                    obj[m.id] = m;\n                setMembers(obj);\n            });\n        },\n        [showDetails, members],\n    );\n\n    const totalWork = getTotalWorkMinutes(estimate) + elapsedWorkMinutes;\n    const myWork = elapsedWorkMinutes + estimate.workMinutes[member.id!] ?? 0;\n    const remainingWork = getRemainingWorkMinutes(estimate, isCardComplete, totalWork);\n\n    return (\n        <>\n            <div className='card-label'>\n                Work: {formatMinutes(totalWork)}\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    (mine: {formatMinutes(myWork)})\n                </If>\n                {\" \"}\n                <If condition={myWork < totalWork}>\n                    <span\n                        className='work-details link-like'\n                        onClick={() => setShowDetails(current => !current)}\n                    >\n                        details\n                    </span>\n                </If>\n                <If condition={!isCardComplete}>\n                    {\" | \"} Remaining: {formatMinutes(remainingWork)}\n                </If>\n                <If condition={isCardComplete}>\n                    {\" | \"}\n                    {formatWorkDelta({\n                        delta: getWorkDelta({\n                            cardId: card?.id,\n                            estimate,\n                            totalWorkMinutes: totalWork,\n                        }),\n                    })}\n                </If>\n            </div>\n            <If condition={showDetails && members !== undefined}>\n                <div>\n                    {[...enumerateWork(estimate)]\n                        .filter(item => item.minutes > 0)\n                        .map(item => {\n                            const member = members![item.memberId];\n                            return (\n                                <div key={item.memberId}>\n                                    {member?.fullName ?? \"<missing>\"}\n                                    {member && \" \"}\n                                    {member !== undefined ? `(${member.username})` : \"\"}\n                                    {\": \"}\n                                    {formatMinutes(item.minutes)}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </If>\n        </>\n    );\n}\n","import React from \"react\";\n\nimport { getTotalWorkMinutes } from \"../api/estimateApi\";\nimport { UsedEstimate } from \"../hooks/useEstimate\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { Trello } from \"../types/trello\";\nimport { hoursPerDay, parseAndRun } from \"../utils/timeParsing\";\nimport { closeIfOldAndEditCurrentWorkSession } from \"../utils/workSessionsUtils\";\nimport { TimeButtons } from \"./TimeButtons\";\nimport { WorkDetails } from \"./WorkDetails\";\n\ntype Props = {\n    className?: string;\n    estimate: UsedEstimate,\n    inputState: UsedState<string>,\n    member: Trello.PowerUp.Member,\n}\n\nexport function WorkTimeButtons(props: Props) {\n    const { estimate, member } = props;\n    const t = useProvidedTrello();\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    const totalWork = getTotalWorkMinutes(estimate.value);\n    const myWork = estimate.value.workMinutes[member.id!] ?? 0;\n\n    async function runAndUpdateSession(args: {\n        action: () => ReturnType<typeof estimate.set>,\n        mouseEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    }) {\n        const delta = await args.action();\n\n        if (!delta)\n            return;\n\n        const myWorkDelta = delta.workMinutes[member!.id];\n        if (myWorkDelta === undefined)\n            return;\n\n        t.popup({\n            type: \"confirm\",\n            title: \"Add to session?\",\n            message: \"Should this work change count in your work session?\",\n            confirmText: \"Yes\",\n            onConfirm: tp => {\n                tp.closePopup();\n                return closeIfOldAndEditCurrentWorkSession(t, {\n                    action: async session => ({\n                        ...session,\n                        workMinutes: session.workMinutes + myWorkDelta,\n                    }),\n                    hoursPerDay,\n                    mouseEvent: args.mouseEvent,\n                });\n            },\n            cancelText: \"No\",\n            onCancel: tp => tp.closePopup(),\n            mouseEvent: args.mouseEvent.nativeEvent,\n        });\n    }\n\n    return (\n        <TimeButtons\n            label= {<WorkDetails\n                estimate={estimate.value}\n                member={member!}\n            />}\n            action={(e, computeNewWork) => runAndUpdateSession({\n                action: () => parseAndRun(t, props.inputState, parsedMinutes =>\n                    estimate.set(current => ({\n                        ...current,\n                        workMinutes: {\n                            ...current.workMinutes,\n                            [member!.id]: computeNewWork(current.workMinutes[member!.id] ?? 0, parsedMinutes),\n                        },\n                    }))),\n                mouseEvent: e,\n            })}\n            clearAction={e => runAndUpdateSession({\n                action: () => estimate.set(current => ({\n                    ...current,\n                    workMinutes: {\n                        ...current.workMinutes,\n                        [member!.id]: 0,\n                    },\n                })),\n                mouseEvent: e,\n            })}\n            setLabel={myWork < totalWork ? \"Set mine\" : undefined}\n            clearLabel={myWork < totalWork ? \"Clear mine\" : undefined}\n            className={props.className}\n        />\n    );\n}\n","import React, { useState } from \"react\";\n\nimport \"./CardBackSectionPage.scss\";\nimport { formatMinutes, parseAndRun } from \"../utils/timeParsing\";\nimport { useMember } from \"../hooks/useMember\";\nimport { useEstimate } from \"../hooks/useEstimate\";\nimport { WorkButton } from \"../components/WorkButton\";\nimport { CompleteCardButton } from \"../components/CompleteCardButton\";\nimport { useProvidedTrello } from \"../hooks/useProvidedTrello\";\nimport { OpenWorkCardButton } from \"../components/OpenWorkCardButton\";\nimport { If } from \"../jk/types/jsxControlStatements\";\nimport { useTrelloRender } from \"../hooks/useTrelloRender\";\nimport { TimeButtons } from \"../components/TimeButtons\";\nimport { getUpdatedEstimate } from \"../api/estimateApi\";\nimport { MoreCardFunctionsButton } from \"../components/MoreCardFunctionsButton\";\nimport { WorkTimeButtons } from \"../components/WorkTimeButtons\";\n\nexport default function CardBackSectionPage() {\n    const t = useProvidedTrello();\n    const estimate = useEstimate(t);\n\n    const inputState = useState<string>(\"\");\n    const [inputEstimate, setInputEstimate] = inputState;\n\n    const member = useMember(t, \"id\");\n\n    useTrelloRender(t, estimate.refresh);\n\n    if (estimate.value === undefined)\n        return (<div>{estimate.feedback}</div>);\n\n    const hasUpdatedEstimate = estimate.value.updatedEstimateMinutes !== 0\n        && estimate.value.updatedEstimateMinutes !== estimate.value.estimateMinutes;\n\n    return (\n        <div>\n            <div className='card-input-header'>\n                <input\n                    value={inputEstimate}\n                    onChange={e => setInputEstimate(e.target.value)}\n                    placeholder=\"input for all buttons...\"\n                />\n                <WorkButton onEstimateChanged={estimate.refresh} />\n                <div className='top-right'>\n                    <OpenWorkCardButton />\n                    <CompleteCardButton />\n                    <MoreCardFunctionsButton onRefresh={estimate.refresh} />\n                </div>\n            </div>\n            <TimeButtons\n                label={<>\n                    {hasUpdatedEstimate && \"Original \"}\n                    Estimate: {formatMinutes(estimate.value.estimateMinutes)}\n                    <If condition={hasUpdatedEstimate}>\n                        {\" | \"}\n                        Updated: {formatMinutes(estimate.value.updatedEstimateMinutes!)}\n                    </If>\n                </>}\n                action={(e, computeNewEstimate) => parseAndRun(t, inputState, parsedMinutes => {\n                    if (estimate.value!.estimateMinutes === 0 && !hasUpdatedEstimate) {\n                        estimate.set(current => ({\n                            ...current,\n                            estimateMinutes: computeNewEstimate(current.estimateMinutes, parsedMinutes),\n                        }));\n                    }\n                    else {\n                        t.popup({\n                            type: \"confirm\",\n                            title: \"Update estimate?\",\n                            message: \"Do you want to update the estimate or change the original?\",\n                            confirmText: \"Update\",\n                            onConfirm: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    updatedEstimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                }));\n                                return tp.closePopup();\n                            },\n                            cancelText: \"Change original\",\n                            onCancel: tp => {\n                                estimate.set(current => ({\n                                    ...current,\n                                    estimateMinutes: computeNewEstimate(\n                                        getUpdatedEstimate(current),\n                                        parsedMinutes,\n                                    ),\n                                    updatedEstimateMinutes: 0,\n                                }));\n                                return tp.closePopup();\n                            },\n                            mouseEvent: e.nativeEvent,\n                        });\n                    }\n                })}\n                clearAction={() => estimate.set(current => ({\n                    ...current,\n                    estimateMinutes: 0,\n                    updatedEstimateMinutes: 0,\n                }))}\n            />\n            <If condition={member !== undefined}>\n                <WorkTimeButtons\n                    estimate={estimate}\n                    member={member!}\n                    inputState={inputState}\n                    className=\"work\"\n                />\n            </If>\n            <If condition={Boolean(estimate.feedback)}>\n                <div>\n                    {estimate.feedback}\n                </div>\n            </If>\n        </div>\n    );\n}\n","import { useState, useMemo } from \"react\";\n\nimport { Estimate, getCardEstimate, setCardEstimate } from \"../api/estimateApi\";\nimport { Trello } from \"../types/trello\";\nimport { noDeps } from \"../jk/noDeps\";\n\nexport function useEstimate(t: Trello.PowerUp.IFrame, autosave = true) {\n    const [estimate, setEstimate] = useState<Estimate>();\n    const [feedback, setFeedback] = useState(\"\");\n\n    const refresh = useMemo(\n        () => async () => {\n            setFeedback(\"loading...\");\n            const fetchedEstimate = await getCardEstimate(t);\n            setEstimate(fetchedEstimate);\n            setFeedback(\"\");\n        },\n        noDeps,\n    );\n\n    const set = useMemo(\n        () => (action: (estimate: Estimate) => Estimate) => {\n            if (estimate === undefined)\n                return;\n\n            const updated = action(estimate);\n\n            const delta: Estimate = {\n                estimateMinutes: updated.estimateMinutes - estimate.estimateMinutes,\n                updatedEstimateMinutes: updated.updatedEstimateMinutes - estimate.updatedEstimateMinutes,\n                workMinutes: {},\n            };\n\n            for (const memberId in updated.workMinutes)\n                delta.workMinutes[memberId] = updated.workMinutes[memberId] - (estimate.workMinutes[memberId] ?? 0);\n\n            if (!autosave)\n                return;\n\n            setFeedback(\"saving...\");\n\n            return getCardEstimate(t)\n                .then(remoteEstimate => {\n                    const updatedRemote: Estimate = {\n                        estimateMinutes: remoteEstimate.estimateMinutes + delta.estimateMinutes,\n                        updatedEstimateMinutes: remoteEstimate.updatedEstimateMinutes + delta.updatedEstimateMinutes,\n                        workMinutes: {},\n                    };\n\n                    for (const memberId in delta.workMinutes)\n                        updatedRemote.workMinutes[memberId] = (remoteEstimate.workMinutes[memberId] ?? 0) + delta.workMinutes[memberId];\n\n                    return setCardEstimate(t, updatedRemote);\n                })\n                .then(updatedRemote => {\n                    setEstimate(updatedRemote);\n                    setFeedback(\"saved!\");\n                    setTimeout(() => setFeedback(\"\"), 1000);\n                    return delta;\n                })\n                .catch(err => {\n                    setFeedback(\"\");\n                    t.alert({\n                        display: \"error\",\n                        message: `error during save: ${err}`,\n                    });\n                });\n        },\n        [estimate, autosave],\n    );\n\n    return useMemo(\n        () => ({\n            value: estimate,\n            set,\n            feedback,\n            refresh,\n        }),\n        [estimate, feedback],\n    );\n}\n\nexport type UsedEstimate = ReturnType<typeof useEstimate>;\n","import { formatDate } from \"./dateFormatting\";\r\n\r\nconst key = \"exit.datetime\";\r\n\r\nexport function addListenerToSaveExitTime() {\r\n    window.addEventListener(\"pagehide\", e => {\r\n        localStorage.setItem(key, JSON.stringify(new Date()));\r\n        // localStorage.setItem(\"pagehide\", JSON.stringify(new Date()));\r\n    });\r\n\r\n    // window.addEventListener(\"visibilitychange\", e => {\r\n    //     localStorage.setItem(\"visibilitychange.\" + document.visibilityState, JSON.stringify(new Date()));\r\n    // });\r\n\r\n    const lastExitTime = getLastExitTime();\r\n    console.log(key + \": \" + (lastExitTime ? formatDate(lastExitTime, \"yyyy-MM-dd hh:mm:ss\") : \"null\"));\r\n}\r\n\r\nexport function getLastExitTime() {\r\n    const saved = JSON.parse(localStorage.getItem(key) as string);\r\n\r\n    if (saved)\r\n        return new Date(saved);\r\n\r\n    return null;\r\n}\r\n"],"names":["enumerateKeys","object","key","baseurl","apiKey","process","updateCardFields","token","cardId","fields","request","query","queryString","Array","from","join","url","method","fetch","headers","Accept","then","response","json","jsonResponse","data","CompleteCardButton","props","t","useProvidedTrello","card","useCard","dueCompleteQuery","useCardDueCompletedQuery","className","onClick","undefined","scope","getRestApi","isAuthorized","authorized","Error","catch","authorize","getToken","getAuthorizedRestApi","id","due","Date","toISOString","dueComplete","ok","setData","err","console","error","OpenWorkCardButton","currentWork","useCurrentWork","value","showCard","TimeButtons","label","e","action","_","parsed","setLabel","previous","clearAction","clearLabel","addTimeSinceLastInputAsWork","isApplicable","Boolean","getLastInputTime","getTitle","lastInputTime","elapsedMinutesSinceLastInput","getElapsedMinutes","formatMinutes","call","member","getCardEstimate","estimate","setCardEstimate","workMinutes","forgotToEndWork","lastExitTime","getLastExitTime","getCurrentWork","startDate","elapsedMinutesUntilExit","getMinutesBetween","formatDate","setCurrentWork","MoreCardFunctionsButton","addFunctionButtonIfApplicable","items","cardFunction","tp","onRefresh","closePopup","text","callback","push","popup","title","mouseEvent","nativeEvent","WorkDetails","useState","showDetails","setShowDetails","members","setMembers","isCardComplete","elapsedWorkMinutes","useElapsedMinutes","useEffect","board","res","obj","m","totalWork","getTotalWorkMinutes","myWork","remainingWork","getRemainingWorkMinutes","current","formatWorkDelta","delta","getWorkDelta","totalWorkMinutes","enumerateWork","filter","item","minutes","map","memberId","fullName","username","WorkTimeButtons","feedback","runAndUpdateSession","args","myWorkDelta","type","message","confirmText","onConfirm","closeIfOldAndEditCurrentWorkSession","session","hoursPerDay","cancelText","onCancel","computeNewWork","parseAndRun","inputState","parsedMinutes","set","CardBackSectionPage","autosave","setEstimate","setFeedback","refresh","useMemo","fetchedEstimate","noDeps","updated","estimateMinutes","updatedEstimateMinutes","remoteEstimate","updatedRemote","setTimeout","alert","display","useEstimate","inputEstimate","setInputEstimate","useMember","useTrelloRender","hasUpdatedEstimate","onChange","target","placeholder","WorkButton","onEstimateChanged","computeNewEstimate","getUpdatedEstimate","addListenerToSaveExitTime","window","addEventListener","localStorage","setItem","JSON","stringify","log","saved","parse","getItem"],"sourceRoot":""}